
Receptor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ed8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000914  0800a078  0800a078  0001a078  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a98c  0800a98c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a98c  0800a98c  0001a98c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a994  0800a994  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a994  0800a994  0001a994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a998  0800a998  0001a998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800a99c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  200001e8  0800ab80  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200003f0  0800ab80  000203f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dc8e  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001da0  00000000  00000000  0002dea2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d30  00000000  00000000  0002fc48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c58  00000000  00000000  00030978  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000169c0  00000000  00000000  000315d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a77a  00000000  00000000  00047f90  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00089702  00000000  00000000  0005270a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dbe0c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004824  00000000  00000000  000dbe88  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a060 	.word	0x0800a060

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	0800a060 	.word	0x0800a060

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cac:	f000 b972 	b.w	8000f94 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	4688      	mov	r8, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14b      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4615      	mov	r5, r2
 8000cda:	d967      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0720 	rsb	r7, r2, #32
 8000ce6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cea:	fa20 f707 	lsr.w	r7, r0, r7
 8000cee:	4095      	lsls	r5, r2
 8000cf0:	ea47 0803 	orr.w	r8, r7, r3
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d00:	fa1f fc85 	uxth.w	ip, r5
 8000d04:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d08:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d0c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18eb      	adds	r3, r5, r3
 8000d16:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000d1a:	f080 811b 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8118 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d24:	3f02      	subs	r7, #2
 8000d26:	442b      	add	r3, r5
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d3c:	45a4      	cmp	ip, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	192c      	adds	r4, r5, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d46:	f080 8107 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d4a:	45a4      	cmp	ip, r4
 8000d4c:	f240 8104 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d50:	3802      	subs	r0, #2
 8000d52:	442c      	add	r4, r5
 8000d54:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d58:	eba4 040c 	sub.w	r4, r4, ip
 8000d5c:	2700      	movs	r7, #0
 8000d5e:	b11e      	cbz	r6, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c6 4300 	strd	r4, r3, [r6]
 8000d68:	4639      	mov	r1, r7
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0xbe>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80eb 	beq.w	8000f4e <__udivmoddi4+0x286>
 8000d78:	2700      	movs	r7, #0
 8000d7a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d7e:	4638      	mov	r0, r7
 8000d80:	4639      	mov	r1, r7
 8000d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d86:	fab3 f783 	clz	r7, r3
 8000d8a:	2f00      	cmp	r7, #0
 8000d8c:	d147      	bne.n	8000e1e <__udivmoddi4+0x156>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d302      	bcc.n	8000d98 <__udivmoddi4+0xd0>
 8000d92:	4282      	cmp	r2, r0
 8000d94:	f200 80fa 	bhi.w	8000f8c <__udivmoddi4+0x2c4>
 8000d98:	1a84      	subs	r4, r0, r2
 8000d9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d9e:	2001      	movs	r0, #1
 8000da0:	4698      	mov	r8, r3
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	d0e0      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000da6:	e9c6 4800 	strd	r4, r8, [r6]
 8000daa:	e7dd      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000dac:	b902      	cbnz	r2, 8000db0 <__udivmoddi4+0xe8>
 8000dae:	deff      	udf	#255	; 0xff
 8000db0:	fab2 f282 	clz	r2, r2
 8000db4:	2a00      	cmp	r2, #0
 8000db6:	f040 808f 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000dba:	1b49      	subs	r1, r1, r5
 8000dbc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dc0:	fa1f f885 	uxth.w	r8, r5
 8000dc4:	2701      	movs	r7, #1
 8000dc6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dca:	0c23      	lsrs	r3, r4, #16
 8000dcc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dd8:	4299      	cmp	r1, r3
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x124>
 8000ddc:	18eb      	adds	r3, r5, r3
 8000dde:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4299      	cmp	r1, r3
 8000de6:	f200 80cd 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dea:	4684      	mov	ip, r0
 8000dec:	1a59      	subs	r1, r3, r1
 8000dee:	b2a3      	uxth	r3, r4
 8000df0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000df8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dfc:	fb08 f800 	mul.w	r8, r8, r0
 8000e00:	45a0      	cmp	r8, r4
 8000e02:	d907      	bls.n	8000e14 <__udivmoddi4+0x14c>
 8000e04:	192c      	adds	r4, r5, r4
 8000e06:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x14a>
 8000e0c:	45a0      	cmp	r8, r4
 8000e0e:	f200 80b6 	bhi.w	8000f7e <__udivmoddi4+0x2b6>
 8000e12:	4618      	mov	r0, r3
 8000e14:	eba4 0408 	sub.w	r4, r4, r8
 8000e18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e1c:	e79f      	b.n	8000d5e <__udivmoddi4+0x96>
 8000e1e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e22:	40bb      	lsls	r3, r7
 8000e24:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e28:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e2c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e30:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e34:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e38:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e3c:	4325      	orrs	r5, r4
 8000e3e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e42:	0c2c      	lsrs	r4, r5, #16
 8000e44:	fb08 3319 	mls	r3, r8, r9, r3
 8000e48:	fa1f fa8e 	uxth.w	sl, lr
 8000e4c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e50:	fb09 f40a 	mul.w	r4, r9, sl
 8000e54:	429c      	cmp	r4, r3
 8000e56:	fa02 f207 	lsl.w	r2, r2, r7
 8000e5a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1e 0303 	adds.w	r3, lr, r3
 8000e64:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e68:	f080 8087 	bcs.w	8000f7a <__udivmoddi4+0x2b2>
 8000e6c:	429c      	cmp	r4, r3
 8000e6e:	f240 8084 	bls.w	8000f7a <__udivmoddi4+0x2b2>
 8000e72:	f1a9 0902 	sub.w	r9, r9, #2
 8000e76:	4473      	add	r3, lr
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	b2ad      	uxth	r5, r5
 8000e7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e80:	fb08 3310 	mls	r3, r8, r0, r3
 8000e84:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e88:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e8c:	45a2      	cmp	sl, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1e 0404 	adds.w	r4, lr, r4
 8000e94:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e98:	d26b      	bcs.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9a:	45a2      	cmp	sl, r4
 8000e9c:	d969      	bls.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	4474      	add	r4, lr
 8000ea2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ea6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eaa:	eba4 040a 	sub.w	r4, r4, sl
 8000eae:	454c      	cmp	r4, r9
 8000eb0:	46c2      	mov	sl, r8
 8000eb2:	464b      	mov	r3, r9
 8000eb4:	d354      	bcc.n	8000f60 <__udivmoddi4+0x298>
 8000eb6:	d051      	beq.n	8000f5c <__udivmoddi4+0x294>
 8000eb8:	2e00      	cmp	r6, #0
 8000eba:	d069      	beq.n	8000f90 <__udivmoddi4+0x2c8>
 8000ebc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ec0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ec4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ec8:	40fd      	lsrs	r5, r7
 8000eca:	40fc      	lsrs	r4, r7
 8000ecc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ed0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ed4:	2700      	movs	r7, #0
 8000ed6:	e747      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ee0:	4095      	lsls	r5, r2
 8000ee2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ee6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eee:	4338      	orrs	r0, r7
 8000ef0:	0c01      	lsrs	r1, r0, #16
 8000ef2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ef6:	fa1f f885 	uxth.w	r8, r5
 8000efa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000efe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f02:	fb07 f308 	mul.w	r3, r7, r8
 8000f06:	428b      	cmp	r3, r1
 8000f08:	fa04 f402 	lsl.w	r4, r4, r2
 8000f0c:	d907      	bls.n	8000f1e <__udivmoddi4+0x256>
 8000f0e:	1869      	adds	r1, r5, r1
 8000f10:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000f14:	d22f      	bcs.n	8000f76 <__udivmoddi4+0x2ae>
 8000f16:	428b      	cmp	r3, r1
 8000f18:	d92d      	bls.n	8000f76 <__udivmoddi4+0x2ae>
 8000f1a:	3f02      	subs	r7, #2
 8000f1c:	4429      	add	r1, r5
 8000f1e:	1acb      	subs	r3, r1, r3
 8000f20:	b281      	uxth	r1, r0
 8000f22:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f26:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f2e:	fb00 f308 	mul.w	r3, r0, r8
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x27e>
 8000f36:	1869      	adds	r1, r5, r1
 8000f38:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f3c:	d217      	bcs.n	8000f6e <__udivmoddi4+0x2a6>
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	d915      	bls.n	8000f6e <__udivmoddi4+0x2a6>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4429      	add	r1, r5
 8000f46:	1ac9      	subs	r1, r1, r3
 8000f48:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f4c:	e73b      	b.n	8000dc6 <__udivmoddi4+0xfe>
 8000f4e:	4637      	mov	r7, r6
 8000f50:	4630      	mov	r0, r6
 8000f52:	e709      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f54:	4607      	mov	r7, r0
 8000f56:	e6e7      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f58:	4618      	mov	r0, r3
 8000f5a:	e6fb      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f5c:	4541      	cmp	r1, r8
 8000f5e:	d2ab      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f60:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f64:	eb69 020e 	sbc.w	r2, r9, lr
 8000f68:	3801      	subs	r0, #1
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	e7a4      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f6e:	4660      	mov	r0, ip
 8000f70:	e7e9      	b.n	8000f46 <__udivmoddi4+0x27e>
 8000f72:	4618      	mov	r0, r3
 8000f74:	e795      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f76:	4667      	mov	r7, ip
 8000f78:	e7d1      	b.n	8000f1e <__udivmoddi4+0x256>
 8000f7a:	4681      	mov	r9, r0
 8000f7c:	e77c      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f7e:	3802      	subs	r0, #2
 8000f80:	442c      	add	r4, r5
 8000f82:	e747      	b.n	8000e14 <__udivmoddi4+0x14c>
 8000f84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f88:	442b      	add	r3, r5
 8000f8a:	e72f      	b.n	8000dec <__udivmoddi4+0x124>
 8000f8c:	4638      	mov	r0, r7
 8000f8e:	e708      	b.n	8000da2 <__udivmoddi4+0xda>
 8000f90:	4637      	mov	r7, r6
 8000f92:	e6e9      	b.n	8000d68 <__udivmoddi4+0xa0>

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 8000fa4:	4b0a      	ldr	r3, [pc, #40]	; (8000fd0 <NRF24_DelayMicroSeconds+0x38>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a0a      	ldr	r2, [pc, #40]	; (8000fd4 <NRF24_DelayMicroSeconds+0x3c>)
 8000faa:	fba2 2303 	umull	r2, r3, r2, r3
 8000fae:	0c9a      	lsrs	r2, r3, #18
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	fb02 f303 	mul.w	r3, r2, r3
 8000fb6:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 8000fb8:	bf00      	nop
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	1e5a      	subs	r2, r3, #1
 8000fbe:	60fa      	str	r2, [r7, #12]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d1fa      	bne.n	8000fba <NRF24_DelayMicroSeconds+0x22>
}
 8000fc4:	bf00      	nop
 8000fc6:	3714      	adds	r7, #20
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	20000008 	.word	0x20000008
 8000fd4:	165e9f81 	.word	0x165e9f81

08000fd8 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d008      	beq.n	8000ff8 <NRF24_csn+0x20>
 8000fe6:	4b0a      	ldr	r3, [pc, #40]	; (8001010 <NRF24_csn+0x38>)
 8000fe8:	6818      	ldr	r0, [r3, #0]
 8000fea:	4b0a      	ldr	r3, [pc, #40]	; (8001014 <NRF24_csn+0x3c>)
 8000fec:	881b      	ldrh	r3, [r3, #0]
 8000fee:	2201      	movs	r2, #1
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	f002 faab 	bl	800354c <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8000ff6:	e007      	b.n	8001008 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8000ff8:	4b05      	ldr	r3, [pc, #20]	; (8001010 <NRF24_csn+0x38>)
 8000ffa:	6818      	ldr	r0, [r3, #0]
 8000ffc:	4b05      	ldr	r3, [pc, #20]	; (8001014 <NRF24_csn+0x3c>)
 8000ffe:	881b      	ldrh	r3, [r3, #0]
 8001000:	2200      	movs	r2, #0
 8001002:	4619      	mov	r1, r3
 8001004:	f002 faa2 	bl	800354c <HAL_GPIO_WritePin>
}
 8001008:	bf00      	nop
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	20000214 	.word	0x20000214
 8001014:	2000021c 	.word	0x2000021c

08001018 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT_CE, nrf24_CE_PIN, GPIO_PIN_SET);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d008      	beq.n	8001038 <NRF24_ce+0x20>
 8001026:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <NRF24_ce+0x38>)
 8001028:	6818      	ldr	r0, [r3, #0]
 800102a:	4b0a      	ldr	r3, [pc, #40]	; (8001054 <NRF24_ce+0x3c>)
 800102c:	881b      	ldrh	r3, [r3, #0]
 800102e:	2201      	movs	r2, #1
 8001030:	4619      	mov	r1, r3
 8001032:	f002 fa8b 	bl	800354c <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT_CE, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8001036:	e007      	b.n	8001048 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT_CE, nrf24_CE_PIN, GPIO_PIN_RESET);
 8001038:	4b05      	ldr	r3, [pc, #20]	; (8001050 <NRF24_ce+0x38>)
 800103a:	6818      	ldr	r0, [r3, #0]
 800103c:	4b05      	ldr	r3, [pc, #20]	; (8001054 <NRF24_ce+0x3c>)
 800103e:	881b      	ldrh	r3, [r3, #0]
 8001040:	2200      	movs	r2, #0
 8001042:	4619      	mov	r1, r3
 8001044:	f002 fa82 	bl	800354c <HAL_GPIO_WritePin>
}
 8001048:	bf00      	nop
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20000218 	.word	0x20000218
 8001054:	2000021e 	.word	0x2000021e

08001058 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 8001062:	2000      	movs	r0, #0
 8001064:	f7ff ffb8 	bl	8000fd8 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8001068:	79fb      	ldrb	r3, [r7, #7]
 800106a:	f003 031f 	and.w	r3, r3, #31
 800106e:	b2db      	uxtb	r3, r3
 8001070:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8001072:	f107 010c 	add.w	r1, r7, #12
 8001076:	2364      	movs	r3, #100	; 0x64
 8001078:	2201      	movs	r2, #1
 800107a:	480a      	ldr	r0, [pc, #40]	; (80010a4 <NRF24_read_register+0x4c>)
 800107c:	f003 fcb4 	bl	80049e8 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8001080:	f107 030c 	add.w	r3, r7, #12
 8001084:	1c59      	adds	r1, r3, #1
 8001086:	2364      	movs	r3, #100	; 0x64
 8001088:	2201      	movs	r2, #1
 800108a:	4806      	ldr	r0, [pc, #24]	; (80010a4 <NRF24_read_register+0x4c>)
 800108c:	f003 fde0 	bl	8004c50 <HAL_SPI_Receive>
	retData = spiBuf[1];
 8001090:	7b7b      	ldrb	r3, [r7, #13]
 8001092:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 8001094:	2001      	movs	r0, #1
 8001096:	f7ff ff9f 	bl	8000fd8 <NRF24_csn>
	return retData;
 800109a:	7bfb      	ldrb	r3, [r7, #15]
}
 800109c:	4618      	mov	r0, r3
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000220 	.word	0x20000220

080010a8 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	6039      	str	r1, [r7, #0]
 80010b2:	71fb      	strb	r3, [r7, #7]
 80010b4:	4613      	mov	r3, r2
 80010b6:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80010b8:	2000      	movs	r0, #0
 80010ba:	f7ff ff8d 	bl	8000fd8 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	f003 031f 	and.w	r3, r3, #31
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80010c8:	f107 010c 	add.w	r1, r7, #12
 80010cc:	2364      	movs	r3, #100	; 0x64
 80010ce:	2201      	movs	r2, #1
 80010d0:	4808      	ldr	r0, [pc, #32]	; (80010f4 <NRF24_read_registerN+0x4c>)
 80010d2:	f003 fc89 	bl	80049e8 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 80010d6:	79bb      	ldrb	r3, [r7, #6]
 80010d8:	b29a      	uxth	r2, r3
 80010da:	2364      	movs	r3, #100	; 0x64
 80010dc:	6839      	ldr	r1, [r7, #0]
 80010de:	4805      	ldr	r0, [pc, #20]	; (80010f4 <NRF24_read_registerN+0x4c>)
 80010e0:	f003 fdb6 	bl	8004c50 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 80010e4:	2001      	movs	r0, #1
 80010e6:	f7ff ff77 	bl	8000fd8 <NRF24_csn>
}
 80010ea:	bf00      	nop
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	20000220 	.word	0x20000220

080010f8 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	460a      	mov	r2, r1
 8001102:	71fb      	strb	r3, [r7, #7]
 8001104:	4613      	mov	r3, r2
 8001106:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8001108:	2000      	movs	r0, #0
 800110a:	f7ff ff65 	bl	8000fd8 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	f043 0320 	orr.w	r3, r3, #32
 8001114:	b2db      	uxtb	r3, r3
 8001116:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8001118:	79bb      	ldrb	r3, [r7, #6]
 800111a:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 800111c:	f107 010c 	add.w	r1, r7, #12
 8001120:	2364      	movs	r3, #100	; 0x64
 8001122:	2202      	movs	r2, #2
 8001124:	4804      	ldr	r0, [pc, #16]	; (8001138 <NRF24_write_register+0x40>)
 8001126:	f003 fc5f 	bl	80049e8 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 800112a:	2001      	movs	r0, #1
 800112c:	f7ff ff54 	bl	8000fd8 <NRF24_csn>
}
 8001130:	bf00      	nop
 8001132:	3710      	adds	r7, #16
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	20000220 	.word	0x20000220

0800113c <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	6039      	str	r1, [r7, #0]
 8001146:	71fb      	strb	r3, [r7, #7]
 8001148:	4613      	mov	r3, r2
 800114a:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 800114c:	2000      	movs	r0, #0
 800114e:	f7ff ff43 	bl	8000fd8 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	f043 0320 	orr.w	r3, r3, #32
 8001158:	b2db      	uxtb	r3, r3
 800115a:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800115c:	f107 010c 	add.w	r1, r7, #12
 8001160:	2364      	movs	r3, #100	; 0x64
 8001162:	2201      	movs	r2, #1
 8001164:	4808      	ldr	r0, [pc, #32]	; (8001188 <NRF24_write_registerN+0x4c>)
 8001166:	f003 fc3f 	bl	80049e8 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 800116a:	79bb      	ldrb	r3, [r7, #6]
 800116c:	b29a      	uxth	r2, r3
 800116e:	2364      	movs	r3, #100	; 0x64
 8001170:	6839      	ldr	r1, [r7, #0]
 8001172:	4805      	ldr	r0, [pc, #20]	; (8001188 <NRF24_write_registerN+0x4c>)
 8001174:	f003 fc38 	bl	80049e8 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8001178:	2001      	movs	r0, #1
 800117a:	f7ff ff2d 	bl	8000fd8 <NRF24_csn>
}
 800117e:	bf00      	nop
 8001180:	3710      	adds	r7, #16
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	20000220 	.word	0x20000220

0800118c <NRF24_read_payload>:
	//Bring CSN high
	NRF24_csn(1);
}
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	460b      	mov	r3, r1
 8001196:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 8001198:	f000 fa0c 	bl	80015b4 <NRF24_getPayloadSize>
 800119c:	4603      	mov	r3, r0
 800119e:	461a      	mov	r2, r3
 80011a0:	78fb      	ldrb	r3, [r7, #3]
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d303      	bcc.n	80011ae <NRF24_read_payload+0x22>
 80011a6:	f000 fa05 	bl	80015b4 <NRF24_getPayloadSize>
 80011aa:	4603      	mov	r3, r0
 80011ac:	e000      	b.n	80011b0 <NRF24_read_payload+0x24>
 80011ae:	78fb      	ldrb	r3, [r7, #3]
 80011b0:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	NRF24_csn(0);
 80011b2:	2000      	movs	r0, #0
 80011b4:	f7ff ff10 	bl	8000fd8 <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 80011b8:	2361      	movs	r3, #97	; 0x61
 80011ba:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 80011bc:	f107 010e 	add.w	r1, r7, #14
 80011c0:	2364      	movs	r3, #100	; 0x64
 80011c2:	2201      	movs	r2, #1
 80011c4:	4808      	ldr	r0, [pc, #32]	; (80011e8 <NRF24_read_payload+0x5c>)
 80011c6:	f003 fc0f 	bl	80049e8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 80011ca:	7bfb      	ldrb	r3, [r7, #15]
 80011cc:	b29a      	uxth	r2, r3
 80011ce:	2364      	movs	r3, #100	; 0x64
 80011d0:	6879      	ldr	r1, [r7, #4]
 80011d2:	4805      	ldr	r0, [pc, #20]	; (80011e8 <NRF24_read_payload+0x5c>)
 80011d4:	f003 fd3c 	bl	8004c50 <HAL_SPI_Receive>
	NRF24_csn(1);
 80011d8:	2001      	movs	r0, #1
 80011da:	f7ff fefd 	bl	8000fd8 <NRF24_csn>
}
 80011de:	bf00      	nop
 80011e0:	3710      	adds	r7, #16
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	20000220 	.word	0x20000220

080011ec <NRF24_flush_tx>:

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 80011f0:	21ff      	movs	r1, #255	; 0xff
 80011f2:	20e1      	movs	r0, #225	; 0xe1
 80011f4:	f7ff ff80 	bl	80010f8 <NRF24_write_register>
}
 80011f8:	bf00      	nop
 80011fa:	bd80      	pop	{r7, pc}

080011fc <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8001200:	21ff      	movs	r1, #255	; 0xff
 8001202:	20e2      	movs	r0, #226	; 0xe2
 8001204:	f7ff ff78 	bl	80010f8 <NRF24_write_register>
}
 8001208:	bf00      	nop
 800120a:	bd80      	pop	{r7, pc}

0800120c <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 8001212:	2007      	movs	r0, #7
 8001214:	f7ff ff20 	bl	8001058 <NRF24_read_register>
 8001218:	4603      	mov	r3, r0
 800121a:	71fb      	strb	r3, [r7, #7]
	return statReg;
 800121c:	79fb      	ldrb	r3, [r7, #7]
}
 800121e:	4618      	mov	r0, r3
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
	...

08001228 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, GPIO_TypeDef *nrf24PORT_CE, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af00      	add	r7, sp, #0
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	4611      	mov	r1, r2
 8001234:	461a      	mov	r2, r3
 8001236:	460b      	mov	r3, r1
 8001238:	80fb      	strh	r3, [r7, #6]
 800123a:	4613      	mov	r3, r2
 800123c:	80bb      	strh	r3, [r7, #4]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 800123e:	4b66      	ldr	r3, [pc, #408]	; (80013d8 <NRF24_begin+0x1b0>)
 8001240:	4618      	mov	r0, r3
 8001242:	f107 0120 	add.w	r1, r7, #32
 8001246:	2358      	movs	r3, #88	; 0x58
 8001248:	461a      	mov	r2, r3
 800124a:	f004 fd93 	bl	8005d74 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 800124e:	4a63      	ldr	r2, [pc, #396]	; (80013dc <NRF24_begin+0x1b4>)
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	6013      	str	r3, [r2, #0]
	nrf24_PORT_CE = nrf24PORT_CE;
 8001254:	4a62      	ldr	r2, [pc, #392]	; (80013e0 <NRF24_begin+0x1b8>)
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 800125a:	4a62      	ldr	r2, [pc, #392]	; (80013e4 <NRF24_begin+0x1bc>)
 800125c:	88fb      	ldrh	r3, [r7, #6]
 800125e:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8001260:	4a61      	ldr	r2, [pc, #388]	; (80013e8 <NRF24_begin+0x1c0>)
 8001262:	88bb      	ldrh	r3, [r7, #4]
 8001264:	8013      	strh	r3, [r2, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 8001266:	2001      	movs	r0, #1
 8001268:	f7ff feb6 	bl	8000fd8 <NRF24_csn>
	NRF24_ce(0);
 800126c:	2000      	movs	r0, #0
 800126e:	f7ff fed3 	bl	8001018 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8001272:	2005      	movs	r0, #5
 8001274:	f001 fee0 	bl	8003038 <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8001278:	2108      	movs	r1, #8
 800127a:	2000      	movs	r0, #0
 800127c:	f7ff ff3c 	bl	80010f8 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8001280:	213f      	movs	r1, #63	; 0x3f
 8001282:	2001      	movs	r0, #1
 8001284:	f7ff ff38 	bl	80010f8 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8001288:	2103      	movs	r1, #3
 800128a:	2002      	movs	r0, #2
 800128c:	f7ff ff34 	bl	80010f8 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8001290:	2103      	movs	r1, #3
 8001292:	2003      	movs	r0, #3
 8001294:	f7ff ff30 	bl	80010f8 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8001298:	2103      	movs	r1, #3
 800129a:	2004      	movs	r0, #4
 800129c:	f7ff ff2c 	bl	80010f8 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 80012a0:	2102      	movs	r1, #2
 80012a2:	2005      	movs	r0, #5
 80012a4:	f7ff ff28 	bl	80010f8 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 80012a8:	210f      	movs	r1, #15
 80012aa:	2006      	movs	r0, #6
 80012ac:	f7ff ff24 	bl	80010f8 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 80012b0:	210e      	movs	r1, #14
 80012b2:	2007      	movs	r0, #7
 80012b4:	f7ff ff20 	bl	80010f8 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 80012b8:	2100      	movs	r1, #0
 80012ba:	2008      	movs	r0, #8
 80012bc:	f7ff ff1c 	bl	80010f8 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 80012c0:	2100      	movs	r1, #0
 80012c2:	2009      	movs	r0, #9
 80012c4:	f7ff ff18 	bl	80010f8 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 80012c8:	23e7      	movs	r3, #231	; 0xe7
 80012ca:	753b      	strb	r3, [r7, #20]
 80012cc:	23e7      	movs	r3, #231	; 0xe7
 80012ce:	74fb      	strb	r3, [r7, #19]
 80012d0:	23e7      	movs	r3, #231	; 0xe7
 80012d2:	74bb      	strb	r3, [r7, #18]
 80012d4:	23e7      	movs	r3, #231	; 0xe7
 80012d6:	747b      	strb	r3, [r7, #17]
 80012d8:	23e7      	movs	r3, #231	; 0xe7
 80012da:	743b      	strb	r3, [r7, #16]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 80012dc:	f107 0310 	add.w	r3, r7, #16
 80012e0:	2205      	movs	r2, #5
 80012e2:	4619      	mov	r1, r3
 80012e4:	200a      	movs	r0, #10
 80012e6:	f7ff ff29 	bl	800113c <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 80012ea:	23c2      	movs	r3, #194	; 0xc2
 80012ec:	753b      	strb	r3, [r7, #20]
 80012ee:	23c2      	movs	r3, #194	; 0xc2
 80012f0:	74fb      	strb	r3, [r7, #19]
 80012f2:	23c2      	movs	r3, #194	; 0xc2
 80012f4:	74bb      	strb	r3, [r7, #18]
 80012f6:	23c2      	movs	r3, #194	; 0xc2
 80012f8:	747b      	strb	r3, [r7, #17]
 80012fa:	23c2      	movs	r3, #194	; 0xc2
 80012fc:	743b      	strb	r3, [r7, #16]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 80012fe:	f107 0310 	add.w	r3, r7, #16
 8001302:	2205      	movs	r2, #5
 8001304:	4619      	mov	r1, r3
 8001306:	200b      	movs	r0, #11
 8001308:	f7ff ff18 	bl	800113c <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 800130c:	21c3      	movs	r1, #195	; 0xc3
 800130e:	200c      	movs	r0, #12
 8001310:	f7ff fef2 	bl	80010f8 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8001314:	21c4      	movs	r1, #196	; 0xc4
 8001316:	200d      	movs	r0, #13
 8001318:	f7ff feee 	bl	80010f8 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 800131c:	21c5      	movs	r1, #197	; 0xc5
 800131e:	200e      	movs	r0, #14
 8001320:	f7ff feea 	bl	80010f8 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8001324:	21c6      	movs	r1, #198	; 0xc6
 8001326:	200f      	movs	r0, #15
 8001328:	f7ff fee6 	bl	80010f8 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 800132c:	23e7      	movs	r3, #231	; 0xe7
 800132e:	753b      	strb	r3, [r7, #20]
 8001330:	23e7      	movs	r3, #231	; 0xe7
 8001332:	74fb      	strb	r3, [r7, #19]
 8001334:	23e7      	movs	r3, #231	; 0xe7
 8001336:	74bb      	strb	r3, [r7, #18]
 8001338:	23e7      	movs	r3, #231	; 0xe7
 800133a:	747b      	strb	r3, [r7, #17]
 800133c:	23e7      	movs	r3, #231	; 0xe7
 800133e:	743b      	strb	r3, [r7, #16]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8001340:	f107 0310 	add.w	r3, r7, #16
 8001344:	2205      	movs	r2, #5
 8001346:	4619      	mov	r1, r3
 8001348:	2010      	movs	r0, #16
 800134a:	f7ff fef7 	bl	800113c <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 800134e:	2100      	movs	r1, #0
 8001350:	2011      	movs	r0, #17
 8001352:	f7ff fed1 	bl	80010f8 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8001356:	2100      	movs	r1, #0
 8001358:	2012      	movs	r0, #18
 800135a:	f7ff fecd 	bl	80010f8 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 800135e:	2100      	movs	r1, #0
 8001360:	2013      	movs	r0, #19
 8001362:	f7ff fec9 	bl	80010f8 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8001366:	2100      	movs	r1, #0
 8001368:	2014      	movs	r0, #20
 800136a:	f7ff fec5 	bl	80010f8 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 800136e:	2100      	movs	r1, #0
 8001370:	2015      	movs	r0, #21
 8001372:	f7ff fec1 	bl	80010f8 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8001376:	2100      	movs	r1, #0
 8001378:	2016      	movs	r0, #22
 800137a:	f7ff febd 	bl	80010f8 <NRF24_write_register>
	
	NRF24_ACTIVATE_cmd();
 800137e:	f000 faa9 	bl	80018d4 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8001382:	2100      	movs	r1, #0
 8001384:	201c      	movs	r0, #28
 8001386:	f7ff feb7 	bl	80010f8 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 800138a:	2100      	movs	r1, #0
 800138c:	201d      	movs	r0, #29
 800138e:	f7ff feb3 	bl	80010f8 <NRF24_write_register>
	printRadioSettings();
 8001392:	f000 fab9 	bl	8001908 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8001396:	210f      	movs	r1, #15
 8001398:	200f      	movs	r0, #15
 800139a:	f000 f8c3 	bl	8001524 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 800139e:	2003      	movs	r0, #3
 80013a0:	f000 f9a9 	bl	80016f6 <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 80013a4:	2001      	movs	r0, #1
 80013a6:	f000 f9df 	bl	8001768 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 80013aa:	2002      	movs	r0, #2
 80013ac:	f000 fa22 	bl	80017f4 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 80013b0:	f000 f974 	bl	800169c <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 80013b4:	2020      	movs	r0, #32
 80013b6:	f000 f8e5 	bl	8001584 <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 80013ba:	f000 fa82 	bl	80018c2 <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 80013be:	204c      	movs	r0, #76	; 0x4c
 80013c0:	f000 f8cb 	bl	800155a <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 80013c4:	f7ff ff12 	bl	80011ec <NRF24_flush_tx>
	NRF24_flush_rx();
 80013c8:	f7ff ff18 	bl	80011fc <NRF24_flush_rx>
	
	NRF24_powerDown();
 80013cc:	f000 fa3a 	bl	8001844 <NRF24_powerDown>
	
}
 80013d0:	bf00      	nop
 80013d2:	3718      	adds	r7, #24
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	20000220 	.word	0x20000220
 80013dc:	20000214 	.word	0x20000214
 80013e0:	20000218 	.word	0x20000218
 80013e4:	2000021c 	.word	0x2000021c
 80013e8:	2000021e 	.word	0x2000021e

080013ec <NRF24_startListening>:
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 80013ec:	b598      	push	{r3, r4, r7, lr}
 80013ee:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 80013f0:	2000      	movs	r0, #0
 80013f2:	f7ff fe31 	bl	8001058 <NRF24_read_register>
 80013f6:	4603      	mov	r3, r0
 80013f8:	f043 0303 	orr.w	r3, r3, #3
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	4619      	mov	r1, r3
 8001400:	2000      	movs	r0, #0
 8001402:	f7ff fe79 	bl	80010f8 <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 8001406:	4b0b      	ldr	r3, [pc, #44]	; (8001434 <NRF24_startListening+0x48>)
 8001408:	e9d3 3400 	ldrd	r3, r4, [r3]
 800140c:	4323      	orrs	r3, r4
 800140e:	d004      	beq.n	800141a <NRF24_startListening+0x2e>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 8001410:	2205      	movs	r2, #5
 8001412:	4908      	ldr	r1, [pc, #32]	; (8001434 <NRF24_startListening+0x48>)
 8001414:	200a      	movs	r0, #10
 8001416:	f7ff fe91 	bl	800113c <NRF24_write_registerN>
	
	//Flush buffers
	NRF24_flush_tx();
 800141a:	f7ff fee7 	bl	80011ec <NRF24_flush_tx>
	NRF24_flush_rx();
 800141e:	f7ff feed 	bl	80011fc <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 8001422:	2001      	movs	r0, #1
 8001424:	f7ff fdf8 	bl	8001018 <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 8001428:	2096      	movs	r0, #150	; 0x96
 800142a:	f7ff fdb5 	bl	8000f98 <NRF24_DelayMicroSeconds>
}
 800142e:	bf00      	nop
 8001430:	bd98      	pop	{r3, r4, r7, pc}
 8001432:	bf00      	nop
 8001434:	20000208 	.word	0x20000208

08001438 <NRF24_available>:
	NRF24_flush_tx();
	return retStatus;
}
//16. Check for available data to read
bool NRF24_available(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 800143c:	2000      	movs	r0, #0
 800143e:	f000 fa10 	bl	8001862 <NRF24_availablePipe>
 8001442:	4603      	mov	r3, r0
}
 8001444:	4618      	mov	r0, r3
 8001446:	bd80      	pop	{r7, pc}

08001448 <NRF24_read>:
//17. Read received data
bool NRF24_read( void* buf, uint8_t len )
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	460b      	mov	r3, r1
 8001452:	70fb      	strb	r3, [r7, #3]
	NRF24_read_payload( buf, len );
 8001454:	78fb      	ldrb	r3, [r7, #3]
 8001456:	4619      	mov	r1, r3
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f7ff fe97 	bl	800118c <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 800145e:	2017      	movs	r0, #23
 8001460:	f7ff fdfa 	bl	8001058 <NRF24_read_register>
 8001464:	4603      	mov	r3, r0
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	73fb      	strb	r3, [r7, #15]
	NRF24_flush_rx();
 800146c:	f7ff fec6 	bl	80011fc <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 8001470:	f000 f8ac 	bl	80015cc <NRF24_getDynamicPayloadSize>
	return rxStatus;
 8001474:	7bfb      	ldrb	r3, [r7, #15]
 8001476:	2b00      	cmp	r3, #0
 8001478:	bf14      	ite	ne
 800147a:	2301      	movne	r3, #1
 800147c:	2300      	moveq	r3, #0
 800147e:	b2db      	uxtb	r3, r3
}
 8001480:	4618      	mov	r0, r3
 8001482:	3710      	adds	r7, #16
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}

08001488 <NRF24_openReadingPipe>:
	const uint8_t max_payload_size = 32;
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
}
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 8001488:	b590      	push	{r4, r7, lr}
 800148a:	b085      	sub	sp, #20
 800148c:	af00      	add	r7, sp, #0
 800148e:	4601      	mov	r1, r0
 8001490:	e9c7 2300 	strd	r2, r3, [r7]
 8001494:	460b      	mov	r3, r1
 8001496:	73fb      	strb	r3, [r7, #15]
	if (number == 0)
 8001498:	7bfb      	ldrb	r3, [r7, #15]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d104      	bne.n	80014a8 <NRF24_openReadingPipe+0x20>
    pipe0_reading_address = address;
 800149e:	e9d7 3400 	ldrd	r3, r4, [r7]
 80014a2:	4a1c      	ldr	r2, [pc, #112]	; (8001514 <NRF24_openReadingPipe+0x8c>)
 80014a4:	e9c2 3400 	strd	r3, r4, [r2]
	
	if(number <= 6)
 80014a8:	7bfb      	ldrb	r3, [r7, #15]
 80014aa:	2b06      	cmp	r3, #6
 80014ac:	d82d      	bhi.n	800150a <NRF24_openReadingPipe+0x82>
	{
		if(number < 2)
 80014ae:	7bfb      	ldrb	r3, [r7, #15]
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d808      	bhi.n	80014c6 <NRF24_openReadingPipe+0x3e>
		{
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 80014b4:	7bfb      	ldrb	r3, [r7, #15]
 80014b6:	4a18      	ldr	r2, [pc, #96]	; (8001518 <NRF24_openReadingPipe+0x90>)
 80014b8:	5cd3      	ldrb	r3, [r2, r3]
 80014ba:	4639      	mov	r1, r7
 80014bc:	2205      	movs	r2, #5
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff fe3c 	bl	800113c <NRF24_write_registerN>
 80014c4:	e007      	b.n	80014d6 <NRF24_openReadingPipe+0x4e>
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 80014c6:	7bfb      	ldrb	r3, [r7, #15]
 80014c8:	4a13      	ldr	r2, [pc, #76]	; (8001518 <NRF24_openReadingPipe+0x90>)
 80014ca:	5cd3      	ldrb	r3, [r2, r3]
 80014cc:	4639      	mov	r1, r7
 80014ce:	2201      	movs	r2, #1
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff fe33 	bl	800113c <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 80014d6:	7bfb      	ldrb	r3, [r7, #15]
 80014d8:	4a10      	ldr	r2, [pc, #64]	; (800151c <NRF24_openReadingPipe+0x94>)
 80014da:	5cd2      	ldrb	r2, [r2, r3]
 80014dc:	4b10      	ldr	r3, [pc, #64]	; (8001520 <NRF24_openReadingPipe+0x98>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	4619      	mov	r1, r3
 80014e2:	4610      	mov	r0, r2
 80014e4:	f7ff fe08 	bl	80010f8 <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 80014e8:	2002      	movs	r0, #2
 80014ea:	f7ff fdb5 	bl	8001058 <NRF24_read_register>
 80014ee:	4603      	mov	r3, r0
 80014f0:	b25a      	sxtb	r2, r3
 80014f2:	7bfb      	ldrb	r3, [r7, #15]
 80014f4:	2101      	movs	r1, #1
 80014f6:	fa01 f303 	lsl.w	r3, r1, r3
 80014fa:	b25b      	sxtb	r3, r3
 80014fc:	4313      	orrs	r3, r2
 80014fe:	b25b      	sxtb	r3, r3
 8001500:	b2db      	uxtb	r3, r3
 8001502:	4619      	mov	r1, r3
 8001504:	2002      	movs	r0, #2
 8001506:	f7ff fdf7 	bl	80010f8 <NRF24_write_register>
	}
	
}
 800150a:	bf00      	nop
 800150c:	3714      	adds	r7, #20
 800150e:	46bd      	mov	sp, r7
 8001510:	bd90      	pop	{r4, r7, pc}
 8001512:	bf00      	nop
 8001514:	20000208 	.word	0x20000208
 8001518:	0800a634 	.word	0x0800a634
 800151c:	0800a63c 	.word	0x0800a63c
 8001520:	20000210 	.word	0x20000210

08001524 <NRF24_setRetries>:
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	460a      	mov	r2, r1
 800152e:	71fb      	strb	r3, [r7, #7]
 8001530:	4613      	mov	r3, r2
 8001532:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8001534:	79fb      	ldrb	r3, [r7, #7]
 8001536:	011b      	lsls	r3, r3, #4
 8001538:	b25a      	sxtb	r2, r3
 800153a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800153e:	f003 030f 	and.w	r3, r3, #15
 8001542:	b25b      	sxtb	r3, r3
 8001544:	4313      	orrs	r3, r2
 8001546:	b25b      	sxtb	r3, r3
 8001548:	b2db      	uxtb	r3, r3
 800154a:	4619      	mov	r1, r3
 800154c:	2004      	movs	r0, #4
 800154e:	f7ff fdd3 	bl	80010f8 <NRF24_write_register>
}
 8001552:	bf00      	nop
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b084      	sub	sp, #16
 800155e:	af00      	add	r7, sp, #0
 8001560:	4603      	mov	r3, r0
 8001562:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8001564:	237f      	movs	r3, #127	; 0x7f
 8001566:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8001568:	7bfa      	ldrb	r2, [r7, #15]
 800156a:	79fb      	ldrb	r3, [r7, #7]
 800156c:	4293      	cmp	r3, r2
 800156e:	bf28      	it	cs
 8001570:	4613      	movcs	r3, r2
 8001572:	b2db      	uxtb	r3, r3
 8001574:	4619      	mov	r1, r3
 8001576:	2005      	movs	r0, #5
 8001578:	f7ff fdbe 	bl	80010f8 <NRF24_write_register>
}
 800157c:	bf00      	nop
 800157e:	3710      	adds	r7, #16
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8001584:	b480      	push	{r7}
 8001586:	b085      	sub	sp, #20
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 800158e:	2320      	movs	r3, #32
 8001590:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8001592:	7bfa      	ldrb	r2, [r7, #15]
 8001594:	79fb      	ldrb	r3, [r7, #7]
 8001596:	4293      	cmp	r3, r2
 8001598:	bf28      	it	cs
 800159a:	4613      	movcs	r3, r2
 800159c:	b2da      	uxtb	r2, r3
 800159e:	4b04      	ldr	r3, [pc, #16]	; (80015b0 <NRF24_setPayloadSize+0x2c>)
 80015a0:	701a      	strb	r2, [r3, #0]
}
 80015a2:	bf00      	nop
 80015a4:	3714      	adds	r7, #20
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	20000210 	.word	0x20000210

080015b4 <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
	return payload_size;
 80015b8:	4b03      	ldr	r3, [pc, #12]	; (80015c8 <NRF24_getPayloadSize+0x14>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
}
 80015bc:	4618      	mov	r0, r3
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	20000210 	.word	0x20000210

080015cc <NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 80015d0:	2060      	movs	r0, #96	; 0x60
 80015d2:	f7ff fd41 	bl	8001058 <NRF24_read_register>
 80015d6:	4603      	mov	r3, r0
}
 80015d8:	4618      	mov	r0, r3
 80015da:	bd80      	pop	{r7, pc}

080015dc <NRF24_enableAckPayload>:
//25. Enable payload on Ackknowledge packet
void NRF24_enableAckPayload(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
	//Need to enable dynamic payload and Ack payload together
	 NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 80015e0:	201d      	movs	r0, #29
 80015e2:	f7ff fd39 	bl	8001058 <NRF24_read_register>
 80015e6:	4603      	mov	r3, r0
 80015e8:	f043 0306 	orr.w	r3, r3, #6
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	4619      	mov	r1, r3
 80015f0:	201d      	movs	r0, #29
 80015f2:	f7ff fd81 	bl	80010f8 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 80015f6:	201d      	movs	r0, #29
 80015f8:	f7ff fd2e 	bl	8001058 <NRF24_read_register>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d10c      	bne.n	800161c <NRF24_enableAckPayload+0x40>
	{
		NRF24_ACTIVATE_cmd();
 8001602:	f000 f967 	bl	80018d4 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8001606:	201d      	movs	r0, #29
 8001608:	f7ff fd26 	bl	8001058 <NRF24_read_register>
 800160c:	4603      	mov	r3, r0
 800160e:	f043 0306 	orr.w	r3, r3, #6
 8001612:	b2db      	uxtb	r3, r3
 8001614:	4619      	mov	r1, r3
 8001616:	201d      	movs	r0, #29
 8001618:	f7ff fd6e 	bl	80010f8 <NRF24_write_register>
	}
	// Enable dynamic payload on pipes 0 & 1
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 800161c:	201c      	movs	r0, #28
 800161e:	f7ff fd1b 	bl	8001058 <NRF24_read_register>
 8001622:	4603      	mov	r3, r0
 8001624:	f043 0303 	orr.w	r3, r3, #3
 8001628:	b2db      	uxtb	r3, r3
 800162a:	4619      	mov	r1, r3
 800162c:	201c      	movs	r0, #28
 800162e:	f7ff fd63 	bl	80010f8 <NRF24_write_register>
}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
	...

08001638 <NRF24_enableDynamicPayloads>:
//26. Enable dynamic payloads
void NRF24_enableDynamicPayloads(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
	//Enable dynamic payload through FEATURE register
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 800163c:	201d      	movs	r0, #29
 800163e:	f7ff fd0b 	bl	8001058 <NRF24_read_register>
 8001642:	4603      	mov	r3, r0
 8001644:	f043 0304 	orr.w	r3, r3, #4
 8001648:	b2db      	uxtb	r3, r3
 800164a:	4619      	mov	r1, r3
 800164c:	201d      	movs	r0, #29
 800164e:	f7ff fd53 	bl	80010f8 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8001652:	201d      	movs	r0, #29
 8001654:	f7ff fd00 	bl	8001058 <NRF24_read_register>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d10c      	bne.n	8001678 <NRF24_enableDynamicPayloads+0x40>
	{
		NRF24_ACTIVATE_cmd();
 800165e:	f000 f939 	bl	80018d4 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8001662:	201d      	movs	r0, #29
 8001664:	f7ff fcf8 	bl	8001058 <NRF24_read_register>
 8001668:	4603      	mov	r3, r0
 800166a:	f043 0304 	orr.w	r3, r3, #4
 800166e:	b2db      	uxtb	r3, r3
 8001670:	4619      	mov	r1, r3
 8001672:	201d      	movs	r0, #29
 8001674:	f7ff fd40 	bl	80010f8 <NRF24_write_register>
	}
	//Enable Dynamic payload on all pipes
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8001678:	201c      	movs	r0, #28
 800167a:	f7ff fced 	bl	8001058 <NRF24_read_register>
 800167e:	4603      	mov	r3, r0
 8001680:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8001684:	b2db      	uxtb	r3, r3
 8001686:	4619      	mov	r1, r3
 8001688:	201c      	movs	r0, #28
 800168a:	f7ff fd35 	bl	80010f8 <NRF24_write_register>
  dynamic_payloads_enabled = true;
 800168e:	4b02      	ldr	r3, [pc, #8]	; (8001698 <NRF24_enableDynamicPayloads+0x60>)
 8001690:	2201      	movs	r2, #1
 8001692:	701a      	strb	r2, [r3, #0]
	
}
 8001694:	bf00      	nop
 8001696:	bd80      	pop	{r7, pc}
 8001698:	20000211 	.word	0x20000211

0800169c <NRF24_disableDynamicPayloads>:
void NRF24_disableDynamicPayloads(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 80016a0:	201d      	movs	r0, #29
 80016a2:	f7ff fcd9 	bl	8001058 <NRF24_read_register>
 80016a6:	4603      	mov	r3, r0
 80016a8:	f023 0304 	bic.w	r3, r3, #4
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	4619      	mov	r1, r3
 80016b0:	201d      	movs	r0, #29
 80016b2:	f7ff fd21 	bl	80010f8 <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 80016b6:	2100      	movs	r1, #0
 80016b8:	201c      	movs	r0, #28
 80016ba:	f7ff fd1d 	bl	80010f8 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 80016be:	4b02      	ldr	r3, [pc, #8]	; (80016c8 <NRF24_disableDynamicPayloads+0x2c>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	701a      	strb	r2, [r3, #0]
}
 80016c4:	bf00      	nop
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	20000211 	.word	0x20000211

080016cc <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 80016d6:	79fb      	ldrb	r3, [r7, #7]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d004      	beq.n	80016e6 <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 80016dc:	213f      	movs	r1, #63	; 0x3f
 80016de:	2001      	movs	r0, #1
 80016e0:	f7ff fd0a 	bl	80010f8 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 80016e4:	e003      	b.n	80016ee <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 80016e6:	2100      	movs	r1, #0
 80016e8:	2001      	movs	r0, #1
 80016ea:	f7ff fd05 	bl	80010f8 <NRF24_write_register>
}
 80016ee:	bf00      	nop
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b084      	sub	sp, #16
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	4603      	mov	r3, r0
 80016fe:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8001700:	2006      	movs	r0, #6
 8001702:	f7ff fca9 	bl	8001058 <NRF24_read_register>
 8001706:	4603      	mov	r3, r0
 8001708:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 800170a:	7bfb      	ldrb	r3, [r7, #15]
 800170c:	f023 0306 	bic.w	r3, r3, #6
 8001710:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8001712:	79fb      	ldrb	r3, [r7, #7]
 8001714:	2b03      	cmp	r3, #3
 8001716:	d104      	bne.n	8001722 <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8001718:	7bfb      	ldrb	r3, [r7, #15]
 800171a:	f043 0306 	orr.w	r3, r3, #6
 800171e:	73fb      	strb	r3, [r7, #15]
 8001720:	e019      	b.n	8001756 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8001722:	79fb      	ldrb	r3, [r7, #7]
 8001724:	2b02      	cmp	r3, #2
 8001726:	d104      	bne.n	8001732 <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8001728:	7bfb      	ldrb	r3, [r7, #15]
 800172a:	f043 0304 	orr.w	r3, r3, #4
 800172e:	73fb      	strb	r3, [r7, #15]
 8001730:	e011      	b.n	8001756 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8001732:	79fb      	ldrb	r3, [r7, #7]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d104      	bne.n	8001742 <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8001738:	7bfb      	ldrb	r3, [r7, #15]
 800173a:	f043 0302 	orr.w	r3, r3, #2
 800173e:	73fb      	strb	r3, [r7, #15]
 8001740:	e009      	b.n	8001756 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8001742:	79fb      	ldrb	r3, [r7, #7]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d006      	beq.n	8001756 <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8001748:	79fb      	ldrb	r3, [r7, #7]
 800174a:	2b04      	cmp	r3, #4
 800174c:	d103      	bne.n	8001756 <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 800174e:	7bfb      	ldrb	r3, [r7, #15]
 8001750:	f043 0306 	orr.w	r3, r3, #6
 8001754:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8001756:	7bfb      	ldrb	r3, [r7, #15]
 8001758:	4619      	mov	r1, r3
 800175a:	2006      	movs	r0, #6
 800175c:	f7ff fccc 	bl	80010f8 <NRF24_write_register>
}
 8001760:	bf00      	nop
 8001762:	3710      	adds	r7, #16
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}

08001768 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	4603      	mov	r3, r0
 8001770:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8001772:	2300      	movs	r3, #0
 8001774:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8001776:	2006      	movs	r0, #6
 8001778:	f7ff fc6e 	bl	8001058 <NRF24_read_register>
 800177c:	4603      	mov	r3, r0
 800177e:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8001780:	4b1b      	ldr	r3, [pc, #108]	; (80017f0 <NRF24_setDataRate+0x88>)
 8001782:	2200      	movs	r2, #0
 8001784:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8001786:	7bbb      	ldrb	r3, [r7, #14]
 8001788:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 800178c:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 800178e:	79fb      	ldrb	r3, [r7, #7]
 8001790:	2b02      	cmp	r3, #2
 8001792:	d107      	bne.n	80017a4 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8001794:	4b16      	ldr	r3, [pc, #88]	; (80017f0 <NRF24_setDataRate+0x88>)
 8001796:	2200      	movs	r2, #0
 8001798:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 800179a:	7bbb      	ldrb	r3, [r7, #14]
 800179c:	f043 0320 	orr.w	r3, r3, #32
 80017a0:	73bb      	strb	r3, [r7, #14]
 80017a2:	e00d      	b.n	80017c0 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 80017a4:	79fb      	ldrb	r3, [r7, #7]
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d107      	bne.n	80017ba <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 80017aa:	4b11      	ldr	r3, [pc, #68]	; (80017f0 <NRF24_setDataRate+0x88>)
 80017ac:	2201      	movs	r2, #1
 80017ae:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 80017b0:	7bbb      	ldrb	r3, [r7, #14]
 80017b2:	f043 0308 	orr.w	r3, r3, #8
 80017b6:	73bb      	strb	r3, [r7, #14]
 80017b8:	e002      	b.n	80017c0 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 80017ba:	4b0d      	ldr	r3, [pc, #52]	; (80017f0 <NRF24_setDataRate+0x88>)
 80017bc:	2200      	movs	r2, #0
 80017be:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 80017c0:	7bbb      	ldrb	r3, [r7, #14]
 80017c2:	4619      	mov	r1, r3
 80017c4:	2006      	movs	r0, #6
 80017c6:	f7ff fc97 	bl	80010f8 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 80017ca:	2006      	movs	r0, #6
 80017cc:	f7ff fc44 	bl	8001058 <NRF24_read_register>
 80017d0:	4603      	mov	r3, r0
 80017d2:	461a      	mov	r2, r3
 80017d4:	7bbb      	ldrb	r3, [r7, #14]
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d102      	bne.n	80017e0 <NRF24_setDataRate+0x78>
  {
    result = true;
 80017da:	2301      	movs	r3, #1
 80017dc:	73fb      	strb	r3, [r7, #15]
 80017de:	e002      	b.n	80017e6 <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 80017e0:	4b03      	ldr	r3, [pc, #12]	; (80017f0 <NRF24_setDataRate+0x88>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	701a      	strb	r2, [r3, #0]
  }

  return result;
 80017e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3710      	adds	r7, #16
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	20000212 	.word	0x20000212

080017f4 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4603      	mov	r3, r0
 80017fc:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 80017fe:	2000      	movs	r0, #0
 8001800:	f7ff fc2a 	bl	8001058 <NRF24_read_register>
 8001804:	4603      	mov	r3, r0
 8001806:	f023 030c 	bic.w	r3, r3, #12
 800180a:	73fb      	strb	r3, [r7, #15]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 800180c:	79fb      	ldrb	r3, [r7, #7]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d00f      	beq.n	8001832 <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 8001812:	79fb      	ldrb	r3, [r7, #7]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d104      	bne.n	8001822 <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8001818:	7bfb      	ldrb	r3, [r7, #15]
 800181a:	f043 0308 	orr.w	r3, r3, #8
 800181e:	73fb      	strb	r3, [r7, #15]
 8001820:	e007      	b.n	8001832 <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8001822:	7bfb      	ldrb	r3, [r7, #15]
 8001824:	f043 0308 	orr.w	r3, r3, #8
 8001828:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 800182a:	7bfb      	ldrb	r3, [r7, #15]
 800182c:	f043 0304 	orr.w	r3, r3, #4
 8001830:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8001832:	7bfb      	ldrb	r3, [r7, #15]
 8001834:	4619      	mov	r1, r3
 8001836:	2000      	movs	r0, #0
 8001838:	f7ff fc5e 	bl	80010f8 <NRF24_write_register>
}
 800183c:	bf00      	nop
 800183e:	3710      	adds	r7, #16
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}

08001844 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8001848:	2000      	movs	r0, #0
 800184a:	f7ff fc05 	bl	8001058 <NRF24_read_register>
 800184e:	4603      	mov	r3, r0
 8001850:	f023 0302 	bic.w	r3, r3, #2
 8001854:	b2db      	uxtb	r3, r3
 8001856:	4619      	mov	r1, r3
 8001858:	2000      	movs	r0, #0
 800185a:	f7ff fc4d 	bl	80010f8 <NRF24_write_register>
}
 800185e:	bf00      	nop
 8001860:	bd80      	pop	{r7, pc}

08001862 <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b084      	sub	sp, #16
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 800186a:	f7ff fccf 	bl	800120c <NRF24_get_status>
 800186e:	4603      	mov	r3, r0
 8001870:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 8001872:	7bfb      	ldrb	r3, [r7, #15]
 8001874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001878:	2b00      	cmp	r3, #0
 800187a:	bf14      	ite	ne
 800187c:	2301      	movne	r3, #1
 800187e:	2300      	moveq	r3, #0
 8001880:	73bb      	strb	r3, [r7, #14]

  if (result)
 8001882:	7bbb      	ldrb	r3, [r7, #14]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d017      	beq.n	80018b8 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d007      	beq.n	800189e <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 800188e:	7bfb      	ldrb	r3, [r7, #15]
 8001890:	085b      	lsrs	r3, r3, #1
 8001892:	b2db      	uxtb	r3, r3
 8001894:	f003 0307 	and.w	r3, r3, #7
 8001898:	b2da      	uxtb	r2, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 800189e:	2140      	movs	r1, #64	; 0x40
 80018a0:	2007      	movs	r0, #7
 80018a2:	f7ff fc29 	bl	80010f8 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 80018a6:	7bfb      	ldrb	r3, [r7, #15]
 80018a8:	f003 0320 	and.w	r3, r3, #32
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d003      	beq.n	80018b8 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 80018b0:	2120      	movs	r1, #32
 80018b2:	2007      	movs	r0, #7
 80018b4:	f7ff fc20 	bl	80010f8 <NRF24_write_register>
    }
  }
  return result;
 80018b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3710      	adds	r7, #16
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 80018c6:	2170      	movs	r1, #112	; 0x70
 80018c8:	2007      	movs	r0, #7
 80018ca:	f7ff fc15 	bl	80010f8 <NRF24_write_register>
}
 80018ce:	bf00      	nop
 80018d0:	bd80      	pop	{r7, pc}
	...

080018d4 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 80018da:	2000      	movs	r0, #0
 80018dc:	f7ff fb7c 	bl	8000fd8 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 80018e0:	2350      	movs	r3, #80	; 0x50
 80018e2:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 80018e4:	2373      	movs	r3, #115	; 0x73
 80018e6:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 80018e8:	1d39      	adds	r1, r7, #4
 80018ea:	2364      	movs	r3, #100	; 0x64
 80018ec:	2202      	movs	r2, #2
 80018ee:	4805      	ldr	r0, [pc, #20]	; (8001904 <NRF24_ACTIVATE_cmd+0x30>)
 80018f0:	f003 f87a 	bl	80049e8 <HAL_SPI_Transmit>
	NRF24_csn(1);
 80018f4:	2001      	movs	r0, #1
 80018f6:	f7ff fb6f 	bl	8000fd8 <NRF24_csn>
}
 80018fa:	bf00      	nop
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	20000220 	.word	0x20000220

08001908 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8001908:	b5f0      	push	{r4, r5, r6, r7, lr}
 800190a:	b0a1      	sub	sp, #132	; 0x84
 800190c:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 800190e:	f107 0308 	add.w	r3, r7, #8
 8001912:	4ab6      	ldr	r2, [pc, #728]	; (8001bec <printRadioSettings+0x2e4>)
 8001914:	461c      	mov	r4, r3
 8001916:	4615      	mov	r5, r2
 8001918:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800191a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800191c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800191e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001920:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001922:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001924:	682b      	ldr	r3, [r5, #0]
 8001926:	461a      	mov	r2, r3
 8001928:	8022      	strh	r2, [r4, #0]
 800192a:	3402      	adds	r4, #2
 800192c:	0c1b      	lsrs	r3, r3, #16
 800192e:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001930:	f107 0308 	add.w	r3, r7, #8
 8001934:	4618      	mov	r0, r3
 8001936:	f7fe fc53 	bl	80001e0 <strlen>
 800193a:	4603      	mov	r3, r0
 800193c:	b29a      	uxth	r2, r3
 800193e:	f107 0108 	add.w	r1, r7, #8
 8001942:	230a      	movs	r3, #10
 8001944:	48aa      	ldr	r0, [pc, #680]	; (8001bf0 <printRadioSettings+0x2e8>)
 8001946:	f003 fd8c 	bl	8005462 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 800194a:	2000      	movs	r0, #0
 800194c:	f7ff fb84 	bl	8001058 <NRF24_read_register>
 8001950:	4603      	mov	r3, r0
 8001952:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 8001956:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800195a:	f003 0308 	and.w	r3, r3, #8
 800195e:	2b00      	cmp	r3, #0
 8001960:	d020      	beq.n	80019a4 <printRadioSettings+0x9c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8001962:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001966:	f003 0304 	and.w	r3, r3, #4
 800196a:	2b00      	cmp	r3, #0
 800196c:	d00b      	beq.n	8001986 <printRadioSettings+0x7e>
 800196e:	f107 0308 	add.w	r3, r7, #8
 8001972:	4aa0      	ldr	r2, [pc, #640]	; (8001bf4 <printRadioSettings+0x2ec>)
 8001974:	461c      	mov	r4, r3
 8001976:	4615      	mov	r5, r2
 8001978:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800197a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800197c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001980:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001984:	e017      	b.n	80019b6 <printRadioSettings+0xae>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");	
 8001986:	f107 0308 	add.w	r3, r7, #8
 800198a:	4a9b      	ldr	r2, [pc, #620]	; (8001bf8 <printRadioSettings+0x2f0>)
 800198c:	461c      	mov	r4, r3
 800198e:	4615      	mov	r5, r2
 8001990:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001992:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001994:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001998:	c403      	stmia	r4!, {r0, r1}
 800199a:	8022      	strh	r2, [r4, #0]
 800199c:	3402      	adds	r4, #2
 800199e:	0c13      	lsrs	r3, r2, #16
 80019a0:	7023      	strb	r3, [r4, #0]
 80019a2:	e008      	b.n	80019b6 <printRadioSettings+0xae>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 80019a4:	f107 0308 	add.w	r3, r7, #8
 80019a8:	4a94      	ldr	r2, [pc, #592]	; (8001bfc <printRadioSettings+0x2f4>)
 80019aa:	461c      	mov	r4, r3
 80019ac:	4615      	mov	r5, r2
 80019ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019b2:	682b      	ldr	r3, [r5, #0]
 80019b4:	6023      	str	r3, [r4, #0]
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80019b6:	f107 0308 	add.w	r3, r7, #8
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7fe fc10 	bl	80001e0 <strlen>
 80019c0:	4603      	mov	r3, r0
 80019c2:	b29a      	uxth	r2, r3
 80019c4:	f107 0108 	add.w	r1, r7, #8
 80019c8:	230a      	movs	r3, #10
 80019ca:	4889      	ldr	r0, [pc, #548]	; (8001bf0 <printRadioSettings+0x2e8>)
 80019cc:	f003 fd49 	bl	8005462 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 80019d0:	2001      	movs	r0, #1
 80019d2:	f7ff fb41 	bl	8001058 <NRF24_read_register>
 80019d6:	4603      	mov	r3, r0
 80019d8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80019dc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80019e0:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	bfcc      	ite	gt
 80019e8:	2301      	movgt	r3, #1
 80019ea:	2300      	movle	r3, #0
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80019f0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80019f4:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	bfcc      	ite	gt
 80019fc:	2301      	movgt	r3, #1
 80019fe:	2300      	movle	r3, #0
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001a04:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001a08:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	bfcc      	ite	gt
 8001a10:	2301      	movgt	r3, #1
 8001a12:	2300      	movle	r3, #0
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001a18:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001a1c:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	bfcc      	ite	gt
 8001a24:	2301      	movgt	r3, #1
 8001a26:	2300      	movle	r3, #0
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001a2c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001a30:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	bfcc      	ite	gt
 8001a38:	2301      	movgt	r3, #1
 8001a3a:	2300      	movle	r3, #0
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001a40:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001a44:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	bfcc      	ite	gt
 8001a4c:	2301      	movgt	r3, #1
 8001a4e:	2300      	movle	r3, #0
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	f107 0008 	add.w	r0, r7, #8
 8001a56:	9303      	str	r3, [sp, #12]
 8001a58:	9402      	str	r4, [sp, #8]
 8001a5a:	9101      	str	r1, [sp, #4]
 8001a5c:	9200      	str	r2, [sp, #0]
 8001a5e:	4633      	mov	r3, r6
 8001a60:	462a      	mov	r2, r5
 8001a62:	4967      	ldr	r1, [pc, #412]	; (8001c00 <printRadioSettings+0x2f8>)
 8001a64:	f004 ffde 	bl	8006a24 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001a68:	f107 0308 	add.w	r3, r7, #8
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7fe fbb7 	bl	80001e0 <strlen>
 8001a72:	4603      	mov	r3, r0
 8001a74:	b29a      	uxth	r2, r3
 8001a76:	f107 0108 	add.w	r1, r7, #8
 8001a7a:	230a      	movs	r3, #10
 8001a7c:	485c      	ldr	r0, [pc, #368]	; (8001bf0 <printRadioSettings+0x2e8>)
 8001a7e:	f003 fcf0 	bl	8005462 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8001a82:	2002      	movs	r0, #2
 8001a84:	f7ff fae8 	bl	8001058 <NRF24_read_register>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001a8e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001a92:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	bfcc      	ite	gt
 8001a9a:	2301      	movgt	r3, #1
 8001a9c:	2300      	movle	r3, #0
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001aa2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001aa6:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	bfcc      	ite	gt
 8001aae:	2301      	movgt	r3, #1
 8001ab0:	2300      	movle	r3, #0
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001ab6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001aba:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	bfcc      	ite	gt
 8001ac2:	2301      	movgt	r3, #1
 8001ac4:	2300      	movle	r3, #0
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001aca:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001ace:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	bfcc      	ite	gt
 8001ad6:	2301      	movgt	r3, #1
 8001ad8:	2300      	movle	r3, #0
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001ade:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001ae2:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	bfcc      	ite	gt
 8001aea:	2301      	movgt	r3, #1
 8001aec:	2300      	movle	r3, #0
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001af2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001af6:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	bfcc      	ite	gt
 8001afe:	2301      	movgt	r3, #1
 8001b00:	2300      	movle	r3, #0
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	f107 0008 	add.w	r0, r7, #8
 8001b08:	9303      	str	r3, [sp, #12]
 8001b0a:	9402      	str	r4, [sp, #8]
 8001b0c:	9101      	str	r1, [sp, #4]
 8001b0e:	9200      	str	r2, [sp, #0]
 8001b10:	4633      	mov	r3, r6
 8001b12:	462a      	mov	r2, r5
 8001b14:	493b      	ldr	r1, [pc, #236]	; (8001c04 <printRadioSettings+0x2fc>)
 8001b16:	f004 ff85 	bl	8006a24 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001b1a:	f107 0308 	add.w	r3, r7, #8
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7fe fb5e 	bl	80001e0 <strlen>
 8001b24:	4603      	mov	r3, r0
 8001b26:	b29a      	uxth	r2, r3
 8001b28:	f107 0108 	add.w	r1, r7, #8
 8001b2c:	230a      	movs	r3, #10
 8001b2e:	4830      	ldr	r0, [pc, #192]	; (8001bf0 <printRadioSettings+0x2e8>)
 8001b30:	f003 fc97 	bl	8005462 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 8001b34:	2003      	movs	r0, #3
 8001b36:	f7ff fa8f 	bl	8001058 <NRF24_read_register>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	f003 0303 	and.w	r3, r3, #3
 8001b40:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 8001b44:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001b48:	3302      	adds	r3, #2
 8001b4a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 8001b4e:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8001b52:	f107 0308 	add.w	r3, r7, #8
 8001b56:	492c      	ldr	r1, [pc, #176]	; (8001c08 <printRadioSettings+0x300>)
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f004 ff63 	bl	8006a24 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001b5e:	f107 0308 	add.w	r3, r7, #8
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7fe fb3c 	bl	80001e0 <strlen>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	b29a      	uxth	r2, r3
 8001b6c:	f107 0108 	add.w	r1, r7, #8
 8001b70:	230a      	movs	r3, #10
 8001b72:	481f      	ldr	r0, [pc, #124]	; (8001bf0 <printRadioSettings+0x2e8>)
 8001b74:	f003 fc75 	bl	8005462 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 8001b78:	2005      	movs	r0, #5
 8001b7a:	f7ff fa6d 	bl	8001058 <NRF24_read_register>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 8001b84:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001b88:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001b8c:	f107 0308 	add.w	r3, r7, #8
 8001b90:	491e      	ldr	r1, [pc, #120]	; (8001c0c <printRadioSettings+0x304>)
 8001b92:	4618      	mov	r0, r3
 8001b94:	f004 ff46 	bl	8006a24 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001b98:	f107 0308 	add.w	r3, r7, #8
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7fe fb1f 	bl	80001e0 <strlen>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	b29a      	uxth	r2, r3
 8001ba6:	f107 0108 	add.w	r1, r7, #8
 8001baa:	230a      	movs	r3, #10
 8001bac:	4810      	ldr	r0, [pc, #64]	; (8001bf0 <printRadioSettings+0x2e8>)
 8001bae:	f003 fc58 	bl	8005462 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8001bb2:	2006      	movs	r0, #6
 8001bb4:	f7ff fa50 	bl	8001058 <NRF24_read_register>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8001bbe:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001bc2:	f003 0308 	and.w	r3, r3, #8
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d024      	beq.n	8001c14 <printRadioSettings+0x30c>
 8001bca:	f107 0308 	add.w	r3, r7, #8
 8001bce:	4a10      	ldr	r2, [pc, #64]	; (8001c10 <printRadioSettings+0x308>)
 8001bd0:	461c      	mov	r4, r3
 8001bd2:	4615      	mov	r5, r2
 8001bd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bd8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001bdc:	6020      	str	r0, [r4, #0]
 8001bde:	3404      	adds	r4, #4
 8001be0:	8021      	strh	r1, [r4, #0]
 8001be2:	3402      	adds	r4, #2
 8001be4:	0c0b      	lsrs	r3, r1, #16
 8001be6:	7023      	strb	r3, [r4, #0]
 8001be8:	e023      	b.n	8001c32 <printRadioSettings+0x32a>
 8001bea:	bf00      	nop
 8001bec:	0800a078 	.word	0x0800a078
 8001bf0:	20000278 	.word	0x20000278
 8001bf4:	0800a0ac 	.word	0x0800a0ac
 8001bf8:	0800a0c8 	.word	0x0800a0c8
 8001bfc:	0800a0e4 	.word	0x0800a0e4
 8001c00:	0800a0f8 	.word	0x0800a0f8
 8001c04:	0800a13c 	.word	0x0800a13c
 8001c08:	0800a188 	.word	0x0800a188
 8001c0c:	0800a1a4 	.word	0x0800a1a4
 8001c10:	0800a1b8 	.word	0x0800a1b8
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 8001c14:	f107 0308 	add.w	r3, r7, #8
 8001c18:	4a29      	ldr	r2, [pc, #164]	; (8001cc0 <printRadioSettings+0x3b8>)
 8001c1a:	461c      	mov	r4, r3
 8001c1c:	4615      	mov	r5, r2
 8001c1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c22:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001c26:	6020      	str	r0, [r4, #0]
 8001c28:	3404      	adds	r4, #4
 8001c2a:	8021      	strh	r1, [r4, #0]
 8001c2c:	3402      	adds	r4, #2
 8001c2e:	0c0b      	lsrs	r3, r1, #16
 8001c30:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001c32:	f107 0308 	add.w	r3, r7, #8
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7fe fad2 	bl	80001e0 <strlen>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	b29a      	uxth	r2, r3
 8001c40:	f107 0108 	add.w	r1, r7, #8
 8001c44:	230a      	movs	r3, #10
 8001c46:	481f      	ldr	r0, [pc, #124]	; (8001cc4 <printRadioSettings+0x3bc>)
 8001c48:	f003 fc0b 	bl	8005462 <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 8001c4c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001c50:	f003 0306 	and.w	r3, r3, #6
 8001c54:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 8001c58:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001c5c:	085b      	lsrs	r3, r3, #1
 8001c5e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 8001c62:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d109      	bne.n	8001c7e <printRadioSettings+0x376>
 8001c6a:	f107 0308 	add.w	r3, r7, #8
 8001c6e:	4a16      	ldr	r2, [pc, #88]	; (8001cc8 <printRadioSettings+0x3c0>)
 8001c70:	461c      	mov	r4, r3
 8001c72:	4615      	mov	r5, r2
 8001c74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c78:	682b      	ldr	r3, [r5, #0]
 8001c7a:	6023      	str	r3, [r4, #0]
 8001c7c:	e037      	b.n	8001cee <printRadioSettings+0x3e6>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8001c7e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d109      	bne.n	8001c9a <printRadioSettings+0x392>
 8001c86:	f107 0308 	add.w	r3, r7, #8
 8001c8a:	4a10      	ldr	r2, [pc, #64]	; (8001ccc <printRadioSettings+0x3c4>)
 8001c8c:	461c      	mov	r4, r3
 8001c8e:	4615      	mov	r5, r2
 8001c90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c94:	682b      	ldr	r3, [r5, #0]
 8001c96:	6023      	str	r3, [r4, #0]
 8001c98:	e029      	b.n	8001cee <printRadioSettings+0x3e6>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 8001c9a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d118      	bne.n	8001cd4 <printRadioSettings+0x3cc>
 8001ca2:	f107 0308 	add.w	r3, r7, #8
 8001ca6:	4a0a      	ldr	r2, [pc, #40]	; (8001cd0 <printRadioSettings+0x3c8>)
 8001ca8:	461c      	mov	r4, r3
 8001caa:	4615      	mov	r5, r2
 8001cac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cb0:	682b      	ldr	r3, [r5, #0]
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	8022      	strh	r2, [r4, #0]
 8001cb6:	3402      	adds	r4, #2
 8001cb8:	0c1b      	lsrs	r3, r3, #16
 8001cba:	7023      	strb	r3, [r4, #0]
 8001cbc:	e017      	b.n	8001cee <printRadioSettings+0x3e6>
 8001cbe:	bf00      	nop
 8001cc0:	0800a1d0 	.word	0x0800a1d0
 8001cc4:	20000278 	.word	0x20000278
 8001cc8:	0800a1e8 	.word	0x0800a1e8
 8001ccc:	0800a1fc 	.word	0x0800a1fc
 8001cd0:	0800a210 	.word	0x0800a210
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8001cd4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001cd8:	2b03      	cmp	r3, #3
 8001cda:	d108      	bne.n	8001cee <printRadioSettings+0x3e6>
 8001cdc:	f107 0308 	add.w	r3, r7, #8
 8001ce0:	4ad7      	ldr	r2, [pc, #860]	; (8002040 <printRadioSettings+0x738>)
 8001ce2:	461c      	mov	r4, r3
 8001ce4:	4615      	mov	r5, r2
 8001ce6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ce8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cea:	682b      	ldr	r3, [r5, #0]
 8001cec:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001cee:	f107 0308 	add.w	r3, r7, #8
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7fe fa74 	bl	80001e0 <strlen>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	b29a      	uxth	r2, r3
 8001cfc:	f107 0108 	add.w	r1, r7, #8
 8001d00:	230a      	movs	r3, #10
 8001d02:	48d0      	ldr	r0, [pc, #832]	; (8002044 <printRadioSettings+0x73c>)
 8001d04:	f003 fbad 	bl	8005462 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8001d08:	463b      	mov	r3, r7
 8001d0a:	2205      	movs	r2, #5
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	200a      	movs	r0, #10
 8001d10:	f7ff f9ca 	bl	80010a8 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001d14:	793b      	ldrb	r3, [r7, #4]
 8001d16:	461c      	mov	r4, r3
 8001d18:	78fb      	ldrb	r3, [r7, #3]
 8001d1a:	461d      	mov	r5, r3
 8001d1c:	78bb      	ldrb	r3, [r7, #2]
 8001d1e:	787a      	ldrb	r2, [r7, #1]
 8001d20:	7839      	ldrb	r1, [r7, #0]
 8001d22:	f107 0008 	add.w	r0, r7, #8
 8001d26:	9102      	str	r1, [sp, #8]
 8001d28:	9201      	str	r2, [sp, #4]
 8001d2a:	9300      	str	r3, [sp, #0]
 8001d2c:	462b      	mov	r3, r5
 8001d2e:	4622      	mov	r2, r4
 8001d30:	49c5      	ldr	r1, [pc, #788]	; (8002048 <printRadioSettings+0x740>)
 8001d32:	f004 fe77 	bl	8006a24 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001d36:	f107 0308 	add.w	r3, r7, #8
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7fe fa50 	bl	80001e0 <strlen>
 8001d40:	4603      	mov	r3, r0
 8001d42:	b29a      	uxth	r2, r3
 8001d44:	f107 0108 	add.w	r1, r7, #8
 8001d48:	230a      	movs	r3, #10
 8001d4a:	48be      	ldr	r0, [pc, #760]	; (8002044 <printRadioSettings+0x73c>)
 8001d4c:	f003 fb89 	bl	8005462 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 8001d50:	463b      	mov	r3, r7
 8001d52:	2205      	movs	r2, #5
 8001d54:	4619      	mov	r1, r3
 8001d56:	200b      	movs	r0, #11
 8001d58:	f7ff f9a6 	bl	80010a8 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001d5c:	793b      	ldrb	r3, [r7, #4]
 8001d5e:	461c      	mov	r4, r3
 8001d60:	78fb      	ldrb	r3, [r7, #3]
 8001d62:	461d      	mov	r5, r3
 8001d64:	78bb      	ldrb	r3, [r7, #2]
 8001d66:	787a      	ldrb	r2, [r7, #1]
 8001d68:	7839      	ldrb	r1, [r7, #0]
 8001d6a:	f107 0008 	add.w	r0, r7, #8
 8001d6e:	9102      	str	r1, [sp, #8]
 8001d70:	9201      	str	r2, [sp, #4]
 8001d72:	9300      	str	r3, [sp, #0]
 8001d74:	462b      	mov	r3, r5
 8001d76:	4622      	mov	r2, r4
 8001d78:	49b4      	ldr	r1, [pc, #720]	; (800204c <printRadioSettings+0x744>)
 8001d7a:	f004 fe53 	bl	8006a24 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001d7e:	f107 0308 	add.w	r3, r7, #8
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7fe fa2c 	bl	80001e0 <strlen>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	b29a      	uxth	r2, r3
 8001d8c:	f107 0108 	add.w	r1, r7, #8
 8001d90:	230a      	movs	r3, #10
 8001d92:	48ac      	ldr	r0, [pc, #688]	; (8002044 <printRadioSettings+0x73c>)
 8001d94:	f003 fb65 	bl	8005462 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 8001d98:	463b      	mov	r3, r7
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	200c      	movs	r0, #12
 8001da0:	f7ff f982 	bl	80010a8 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001da4:	783b      	ldrb	r3, [r7, #0]
 8001da6:	461a      	mov	r2, r3
 8001da8:	f107 0308 	add.w	r3, r7, #8
 8001dac:	49a8      	ldr	r1, [pc, #672]	; (8002050 <printRadioSettings+0x748>)
 8001dae:	4618      	mov	r0, r3
 8001db0:	f004 fe38 	bl	8006a24 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001db4:	f107 0308 	add.w	r3, r7, #8
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7fe fa11 	bl	80001e0 <strlen>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	b29a      	uxth	r2, r3
 8001dc2:	f107 0108 	add.w	r1, r7, #8
 8001dc6:	230a      	movs	r3, #10
 8001dc8:	489e      	ldr	r0, [pc, #632]	; (8002044 <printRadioSettings+0x73c>)
 8001dca:	f003 fb4a 	bl	8005462 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 8001dce:	463b      	mov	r3, r7
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	200d      	movs	r0, #13
 8001dd6:	f7ff f967 	bl	80010a8 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001dda:	783b      	ldrb	r3, [r7, #0]
 8001ddc:	461a      	mov	r2, r3
 8001dde:	f107 0308 	add.w	r3, r7, #8
 8001de2:	499c      	ldr	r1, [pc, #624]	; (8002054 <printRadioSettings+0x74c>)
 8001de4:	4618      	mov	r0, r3
 8001de6:	f004 fe1d 	bl	8006a24 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001dea:	f107 0308 	add.w	r3, r7, #8
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7fe f9f6 	bl	80001e0 <strlen>
 8001df4:	4603      	mov	r3, r0
 8001df6:	b29a      	uxth	r2, r3
 8001df8:	f107 0108 	add.w	r1, r7, #8
 8001dfc:	230a      	movs	r3, #10
 8001dfe:	4891      	ldr	r0, [pc, #580]	; (8002044 <printRadioSettings+0x73c>)
 8001e00:	f003 fb2f 	bl	8005462 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 8001e04:	463b      	mov	r3, r7
 8001e06:	2201      	movs	r2, #1
 8001e08:	4619      	mov	r1, r3
 8001e0a:	200e      	movs	r0, #14
 8001e0c:	f7ff f94c 	bl	80010a8 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001e10:	783b      	ldrb	r3, [r7, #0]
 8001e12:	461a      	mov	r2, r3
 8001e14:	f107 0308 	add.w	r3, r7, #8
 8001e18:	498f      	ldr	r1, [pc, #572]	; (8002058 <printRadioSettings+0x750>)
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f004 fe02 	bl	8006a24 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001e20:	f107 0308 	add.w	r3, r7, #8
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7fe f9db 	bl	80001e0 <strlen>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	b29a      	uxth	r2, r3
 8001e2e:	f107 0108 	add.w	r1, r7, #8
 8001e32:	230a      	movs	r3, #10
 8001e34:	4883      	ldr	r0, [pc, #524]	; (8002044 <printRadioSettings+0x73c>)
 8001e36:	f003 fb14 	bl	8005462 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 8001e3a:	463b      	mov	r3, r7
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	4619      	mov	r1, r3
 8001e40:	200f      	movs	r0, #15
 8001e42:	f7ff f931 	bl	80010a8 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001e46:	783b      	ldrb	r3, [r7, #0]
 8001e48:	461a      	mov	r2, r3
 8001e4a:	f107 0308 	add.w	r3, r7, #8
 8001e4e:	4983      	ldr	r1, [pc, #524]	; (800205c <printRadioSettings+0x754>)
 8001e50:	4618      	mov	r0, r3
 8001e52:	f004 fde7 	bl	8006a24 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001e56:	f107 0308 	add.w	r3, r7, #8
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7fe f9c0 	bl	80001e0 <strlen>
 8001e60:	4603      	mov	r3, r0
 8001e62:	b29a      	uxth	r2, r3
 8001e64:	f107 0108 	add.w	r1, r7, #8
 8001e68:	230a      	movs	r3, #10
 8001e6a:	4876      	ldr	r0, [pc, #472]	; (8002044 <printRadioSettings+0x73c>)
 8001e6c:	f003 faf9 	bl	8005462 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 8001e70:	463b      	mov	r3, r7
 8001e72:	2205      	movs	r2, #5
 8001e74:	4619      	mov	r1, r3
 8001e76:	2010      	movs	r0, #16
 8001e78:	f7ff f916 	bl	80010a8 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001e7c:	793b      	ldrb	r3, [r7, #4]
 8001e7e:	461c      	mov	r4, r3
 8001e80:	78fb      	ldrb	r3, [r7, #3]
 8001e82:	461d      	mov	r5, r3
 8001e84:	78bb      	ldrb	r3, [r7, #2]
 8001e86:	787a      	ldrb	r2, [r7, #1]
 8001e88:	7839      	ldrb	r1, [r7, #0]
 8001e8a:	f107 0008 	add.w	r0, r7, #8
 8001e8e:	9102      	str	r1, [sp, #8]
 8001e90:	9201      	str	r2, [sp, #4]
 8001e92:	9300      	str	r3, [sp, #0]
 8001e94:	462b      	mov	r3, r5
 8001e96:	4622      	mov	r2, r4
 8001e98:	4971      	ldr	r1, [pc, #452]	; (8002060 <printRadioSettings+0x758>)
 8001e9a:	f004 fdc3 	bl	8006a24 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001e9e:	f107 0308 	add.w	r3, r7, #8
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7fe f99c 	bl	80001e0 <strlen>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	b29a      	uxth	r2, r3
 8001eac:	f107 0108 	add.w	r1, r7, #8
 8001eb0:	230a      	movs	r3, #10
 8001eb2:	4864      	ldr	r0, [pc, #400]	; (8002044 <printRadioSettings+0x73c>)
 8001eb4:	f003 fad5 	bl	8005462 <HAL_UART_Transmit>
	
	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 8001eb8:	2011      	movs	r0, #17
 8001eba:	f7ff f8cd 	bl	8001058 <NRF24_read_register>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001ec4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001ec8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ecc:	f107 0308 	add.w	r3, r7, #8
 8001ed0:	4964      	ldr	r1, [pc, #400]	; (8002064 <printRadioSettings+0x75c>)
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f004 fda6 	bl	8006a24 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001ed8:	f107 0308 	add.w	r3, r7, #8
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7fe f97f 	bl	80001e0 <strlen>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	b29a      	uxth	r2, r3
 8001ee6:	f107 0108 	add.w	r1, r7, #8
 8001eea:	230a      	movs	r3, #10
 8001eec:	4855      	ldr	r0, [pc, #340]	; (8002044 <printRadioSettings+0x73c>)
 8001eee:	f003 fab8 	bl	8005462 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+1);
 8001ef2:	2012      	movs	r0, #18
 8001ef4:	f7ff f8b0 	bl	8001058 <NRF24_read_register>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001efe:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001f02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f06:	f107 0308 	add.w	r3, r7, #8
 8001f0a:	4957      	ldr	r1, [pc, #348]	; (8002068 <printRadioSettings+0x760>)
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f004 fd89 	bl	8006a24 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001f12:	f107 0308 	add.w	r3, r7, #8
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7fe f962 	bl	80001e0 <strlen>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	f107 0108 	add.w	r1, r7, #8
 8001f24:	230a      	movs	r3, #10
 8001f26:	4847      	ldr	r0, [pc, #284]	; (8002044 <printRadioSettings+0x73c>)
 8001f28:	f003 fa9b 	bl	8005462 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+2);
 8001f2c:	2013      	movs	r0, #19
 8001f2e:	f7ff f893 	bl	8001058 <NRF24_read_register>
 8001f32:	4603      	mov	r3, r0
 8001f34:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001f38:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001f3c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f40:	f107 0308 	add.w	r3, r7, #8
 8001f44:	4949      	ldr	r1, [pc, #292]	; (800206c <printRadioSettings+0x764>)
 8001f46:	4618      	mov	r0, r3
 8001f48:	f004 fd6c 	bl	8006a24 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001f4c:	f107 0308 	add.w	r3, r7, #8
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7fe f945 	bl	80001e0 <strlen>
 8001f56:	4603      	mov	r3, r0
 8001f58:	b29a      	uxth	r2, r3
 8001f5a:	f107 0108 	add.w	r1, r7, #8
 8001f5e:	230a      	movs	r3, #10
 8001f60:	4838      	ldr	r0, [pc, #224]	; (8002044 <printRadioSettings+0x73c>)
 8001f62:	f003 fa7e 	bl	8005462 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+3);
 8001f66:	2014      	movs	r0, #20
 8001f68:	f7ff f876 	bl	8001058 <NRF24_read_register>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001f72:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001f76:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f7a:	f107 0308 	add.w	r3, r7, #8
 8001f7e:	493c      	ldr	r1, [pc, #240]	; (8002070 <printRadioSettings+0x768>)
 8001f80:	4618      	mov	r0, r3
 8001f82:	f004 fd4f 	bl	8006a24 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001f86:	f107 0308 	add.w	r3, r7, #8
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7fe f928 	bl	80001e0 <strlen>
 8001f90:	4603      	mov	r3, r0
 8001f92:	b29a      	uxth	r2, r3
 8001f94:	f107 0108 	add.w	r1, r7, #8
 8001f98:	230a      	movs	r3, #10
 8001f9a:	482a      	ldr	r0, [pc, #168]	; (8002044 <printRadioSettings+0x73c>)
 8001f9c:	f003 fa61 	bl	8005462 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+4);
 8001fa0:	2015      	movs	r0, #21
 8001fa2:	f7ff f859 	bl	8001058 <NRF24_read_register>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001fac:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001fb0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001fb4:	f107 0308 	add.w	r3, r7, #8
 8001fb8:	492e      	ldr	r1, [pc, #184]	; (8002074 <printRadioSettings+0x76c>)
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f004 fd32 	bl	8006a24 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001fc0:	f107 0308 	add.w	r3, r7, #8
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7fe f90b 	bl	80001e0 <strlen>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	b29a      	uxth	r2, r3
 8001fce:	f107 0108 	add.w	r1, r7, #8
 8001fd2:	230a      	movs	r3, #10
 8001fd4:	481b      	ldr	r0, [pc, #108]	; (8002044 <printRadioSettings+0x73c>)
 8001fd6:	f003 fa44 	bl	8005462 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+5);
 8001fda:	2016      	movs	r0, #22
 8001fdc:	f7ff f83c 	bl	8001058 <NRF24_read_register>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001fe6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001fea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001fee:	f107 0308 	add.w	r3, r7, #8
 8001ff2:	4921      	ldr	r1, [pc, #132]	; (8002078 <printRadioSettings+0x770>)
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f004 fd15 	bl	8006a24 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001ffa:	f107 0308 	add.w	r3, r7, #8
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7fe f8ee 	bl	80001e0 <strlen>
 8002004:	4603      	mov	r3, r0
 8002006:	b29a      	uxth	r2, r3
 8002008:	f107 0108 	add.w	r1, r7, #8
 800200c:	230a      	movs	r3, #10
 800200e:	480d      	ldr	r0, [pc, #52]	; (8002044 <printRadioSettings+0x73c>)
 8002010:	f003 fa27 	bl	8005462 <HAL_UART_Transmit>
	
	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 8002014:	201c      	movs	r0, #28
 8002016:	f7ff f81f 	bl	8001058 <NRF24_read_register>
 800201a:	4603      	mov	r3, r0
 800201c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8002020:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002024:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002028:	2b00      	cmp	r3, #0
 800202a:	bfcc      	ite	gt
 800202c:	2301      	movgt	r3, #1
 800202e:	2300      	movle	r3, #0
 8002030:	b2db      	uxtb	r3, r3
 8002032:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8002034:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002038:	f003 0302 	and.w	r3, r3, #2
 800203c:	e01e      	b.n	800207c <printRadioSettings+0x774>
 800203e:	bf00      	nop
 8002040:	0800a224 	.word	0x0800a224
 8002044:	20000278 	.word	0x20000278
 8002048:	0800a238 	.word	0x0800a238
 800204c:	0800a268 	.word	0x0800a268
 8002050:	0800a298 	.word	0x0800a298
 8002054:	0800a2c0 	.word	0x0800a2c0
 8002058:	0800a2e8 	.word	0x0800a2e8
 800205c:	0800a310 	.word	0x0800a310
 8002060:	0800a338 	.word	0x0800a338
 8002064:	0800a364 	.word	0x0800a364
 8002068:	0800a380 	.word	0x0800a380
 800206c:	0800a39c 	.word	0x0800a39c
 8002070:	0800a3b8 	.word	0x0800a3b8
 8002074:	0800a3d4 	.word	0x0800a3d4
 8002078:	0800a3f0 	.word	0x0800a3f0
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800207c:	2b00      	cmp	r3, #0
 800207e:	bfcc      	ite	gt
 8002080:	2301      	movgt	r3, #1
 8002082:	2300      	movle	r3, #0
 8002084:	b2db      	uxtb	r3, r3
 8002086:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8002088:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800208c:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002090:	2b00      	cmp	r3, #0
 8002092:	bfcc      	ite	gt
 8002094:	2301      	movgt	r3, #1
 8002096:	2300      	movle	r3, #0
 8002098:	b2db      	uxtb	r3, r3
 800209a:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800209c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80020a0:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	bfcc      	ite	gt
 80020a8:	2301      	movgt	r3, #1
 80020aa:	2300      	movle	r3, #0
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80020b0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80020b4:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	bfcc      	ite	gt
 80020bc:	2301      	movgt	r3, #1
 80020be:	2300      	movle	r3, #0
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80020c4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80020c8:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	bfcc      	ite	gt
 80020d0:	2301      	movgt	r3, #1
 80020d2:	2300      	movle	r3, #0
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	f107 0008 	add.w	r0, r7, #8
 80020da:	9303      	str	r3, [sp, #12]
 80020dc:	9402      	str	r4, [sp, #8]
 80020de:	9101      	str	r1, [sp, #4]
 80020e0:	9200      	str	r2, [sp, #0]
 80020e2:	4633      	mov	r3, r6
 80020e4:	462a      	mov	r2, r5
 80020e6:	494a      	ldr	r1, [pc, #296]	; (8002210 <printRadioSettings+0x908>)
 80020e8:	f004 fc9c 	bl	8006a24 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80020ec:	f107 0308 	add.w	r3, r7, #8
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7fe f875 	bl	80001e0 <strlen>
 80020f6:	4603      	mov	r3, r0
 80020f8:	b29a      	uxth	r2, r3
 80020fa:	f107 0108 	add.w	r1, r7, #8
 80020fe:	230a      	movs	r3, #10
 8002100:	4844      	ldr	r0, [pc, #272]	; (8002214 <printRadioSettings+0x90c>)
 8002102:	f003 f9ae 	bl	8005462 <HAL_UART_Transmit>
	
	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 8002106:	201d      	movs	r0, #29
 8002108:	f7fe ffa6 	bl	8001058 <NRF24_read_register>
 800210c:	4603      	mov	r3, r0
 800210e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 8002112:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002116:	f003 0304 	and.w	r3, r3, #4
 800211a:	2b00      	cmp	r3, #0
 800211c:	d00c      	beq.n	8002138 <printRadioSettings+0x830>
 800211e:	f107 0308 	add.w	r3, r7, #8
 8002122:	4a3d      	ldr	r2, [pc, #244]	; (8002218 <printRadioSettings+0x910>)
 8002124:	461c      	mov	r4, r3
 8002126:	4615      	mov	r5, r2
 8002128:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800212a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800212c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002130:	6020      	str	r0, [r4, #0]
 8002132:	3404      	adds	r4, #4
 8002134:	8021      	strh	r1, [r4, #0]
 8002136:	e00e      	b.n	8002156 <printRadioSettings+0x84e>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8002138:	f107 0308 	add.w	r3, r7, #8
 800213c:	4a37      	ldr	r2, [pc, #220]	; (800221c <printRadioSettings+0x914>)
 800213e:	461c      	mov	r4, r3
 8002140:	4615      	mov	r5, r2
 8002142:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002144:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002146:	e895 0003 	ldmia.w	r5, {r0, r1}
 800214a:	6020      	str	r0, [r4, #0]
 800214c:	3404      	adds	r4, #4
 800214e:	8021      	strh	r1, [r4, #0]
 8002150:	3402      	adds	r4, #2
 8002152:	0c0b      	lsrs	r3, r1, #16
 8002154:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002156:	f107 0308 	add.w	r3, r7, #8
 800215a:	4618      	mov	r0, r3
 800215c:	f7fe f840 	bl	80001e0 <strlen>
 8002160:	4603      	mov	r3, r0
 8002162:	b29a      	uxth	r2, r3
 8002164:	f107 0108 	add.w	r1, r7, #8
 8002168:	230a      	movs	r3, #10
 800216a:	482a      	ldr	r0, [pc, #168]	; (8002214 <printRadioSettings+0x90c>)
 800216c:	f003 f979 	bl	8005462 <HAL_UART_Transmit>
	
	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8002170:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002174:	f003 0302 	and.w	r3, r3, #2
 8002178:	2b00      	cmp	r3, #0
 800217a:	d00b      	beq.n	8002194 <printRadioSettings+0x88c>
 800217c:	f107 0308 	add.w	r3, r7, #8
 8002180:	4a27      	ldr	r2, [pc, #156]	; (8002220 <printRadioSettings+0x918>)
 8002182:	461c      	mov	r4, r3
 8002184:	4615      	mov	r5, r2
 8002186:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002188:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800218a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800218e:	c403      	stmia	r4!, {r0, r1}
 8002190:	8022      	strh	r2, [r4, #0]
 8002192:	e00d      	b.n	80021b0 <printRadioSettings+0x8a8>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8002194:	f107 0308 	add.w	r3, r7, #8
 8002198:	4a22      	ldr	r2, [pc, #136]	; (8002224 <printRadioSettings+0x91c>)
 800219a:	461c      	mov	r4, r3
 800219c:	4615      	mov	r5, r2
 800219e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021a2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80021a6:	c403      	stmia	r4!, {r0, r1}
 80021a8:	8022      	strh	r2, [r4, #0]
 80021aa:	3402      	adds	r4, #2
 80021ac:	0c13      	lsrs	r3, r2, #16
 80021ae:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80021b0:	f107 0308 	add.w	r3, r7, #8
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7fe f813 	bl	80001e0 <strlen>
 80021ba:	4603      	mov	r3, r0
 80021bc:	b29a      	uxth	r2, r3
 80021be:	f107 0108 	add.w	r1, r7, #8
 80021c2:	230a      	movs	r3, #10
 80021c4:	4813      	ldr	r0, [pc, #76]	; (8002214 <printRadioSettings+0x90c>)
 80021c6:	f003 f94c 	bl	8005462 <HAL_UART_Transmit>
	
	
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 80021ca:	f107 0308 	add.w	r3, r7, #8
 80021ce:	4a16      	ldr	r2, [pc, #88]	; (8002228 <printRadioSettings+0x920>)
 80021d0:	461c      	mov	r4, r3
 80021d2:	4615      	mov	r5, r2
 80021d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021e0:	682b      	ldr	r3, [r5, #0]
 80021e2:	461a      	mov	r2, r3
 80021e4:	8022      	strh	r2, [r4, #0]
 80021e6:	3402      	adds	r4, #2
 80021e8:	0c1b      	lsrs	r3, r3, #16
 80021ea:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80021ec:	f107 0308 	add.w	r3, r7, #8
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7fd fff5 	bl	80001e0 <strlen>
 80021f6:	4603      	mov	r3, r0
 80021f8:	b29a      	uxth	r2, r3
 80021fa:	f107 0108 	add.w	r1, r7, #8
 80021fe:	230a      	movs	r3, #10
 8002200:	4804      	ldr	r0, [pc, #16]	; (8002214 <printRadioSettings+0x90c>)
 8002202:	f003 f92e 	bl	8005462 <HAL_UART_Transmit>
}
 8002206:	bf00      	nop
 8002208:	3774      	adds	r7, #116	; 0x74
 800220a:	46bd      	mov	sp, r7
 800220c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800220e:	bf00      	nop
 8002210:	0800a40c 	.word	0x0800a40c
 8002214:	20000278 	.word	0x20000278
 8002218:	0800a458 	.word	0x0800a458
 800221c:	0800a470 	.word	0x0800a470
 8002220:	0800a488 	.word	0x0800a488
 8002224:	0800a4a4 	.word	0x0800a4a4
 8002228:	0800a078 	.word	0x0800a078

0800222c <DWT_Delay_Init>:
 * @brief  Initializes DWT_Clock_Cycle_Count for DWT_Delay_us function
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8002230:	4b14      	ldr	r3, [pc, #80]	; (8002284 <DWT_Delay_Init+0x58>)
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	4a13      	ldr	r2, [pc, #76]	; (8002284 <DWT_Delay_Init+0x58>)
 8002236:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800223a:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 800223c:	4b11      	ldr	r3, [pc, #68]	; (8002284 <DWT_Delay_Init+0x58>)
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	4a10      	ldr	r2, [pc, #64]	; (8002284 <DWT_Delay_Init+0x58>)
 8002242:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002246:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8002248:	4b0f      	ldr	r3, [pc, #60]	; (8002288 <DWT_Delay_Init+0x5c>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a0e      	ldr	r2, [pc, #56]	; (8002288 <DWT_Delay_Init+0x5c>)
 800224e:	f023 0301 	bic.w	r3, r3, #1
 8002252:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8002254:	4b0c      	ldr	r3, [pc, #48]	; (8002288 <DWT_Delay_Init+0x5c>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a0b      	ldr	r2, [pc, #44]	; (8002288 <DWT_Delay_Init+0x5c>)
 800225a:	f043 0301 	orr.w	r3, r3, #1
 800225e:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8002260:	4b09      	ldr	r3, [pc, #36]	; (8002288 <DWT_Delay_Init+0x5c>)
 8002262:	2200      	movs	r2, #0
 8002264:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8002266:	bf00      	nop
     __ASM volatile ("NOP");
 8002268:	bf00      	nop
  __ASM volatile ("NOP");
 800226a:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 800226c:	4b06      	ldr	r3, [pc, #24]	; (8002288 <DWT_Delay_Init+0x5c>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8002274:	2300      	movs	r3, #0
 8002276:	e000      	b.n	800227a <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8002278:	2301      	movs	r3, #1
  }
}
 800227a:	4618      	mov	r0, r3
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr
 8002284:	e000edf0 	.word	0xe000edf0
 8002288:	e0001000 	.word	0xe0001000

0800228c <DWT_Delay_us>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8002294:	4b0c      	ldr	r3, [pc, #48]	; (80022c8 <DWT_Delay_us+0x3c>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 800229a:	f002 fb0d 	bl	80048b8 <HAL_RCC_GetHCLKFreq>
 800229e:	4602      	mov	r2, r0
 80022a0:	4b0a      	ldr	r3, [pc, #40]	; (80022cc <DWT_Delay_us+0x40>)
 80022a2:	fba3 2302 	umull	r2, r3, r3, r2
 80022a6:	0c9b      	lsrs	r3, r3, #18
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	fb02 f303 	mul.w	r3, r2, r3
 80022ae:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 80022b0:	bf00      	nop
 80022b2:	4b05      	ldr	r3, [pc, #20]	; (80022c8 <DWT_Delay_us+0x3c>)
 80022b4:	685a      	ldr	r2, [r3, #4]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	1ad2      	subs	r2, r2, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d3f8      	bcc.n	80022b2 <DWT_Delay_us+0x26>
}
 80022c0:	bf00      	nop
 80022c2:	3710      	adds	r7, #16
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	e0001000 	.word	0xe0001000
 80022cc:	431bde83 	.word	0x431bde83

080022d0 <en_high>:
#include "i2c_lcd.h"

static void en_high(i2c_lcd* dev){
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af02      	add	r7, sp, #8
 80022d6:	6078      	str	r0, [r7, #4]
	dev->universal[0] |= (1<<LCD_EN);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	7c1b      	ldrb	r3, [r3, #16]
 80022dc:	f043 0304 	orr.w	r3, r3, #4
 80022e0:	b2da      	uxtb	r2, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	741a      	strb	r2, [r3, #16]
	HAL_I2C_Master_Transmit(dev->config.i2c, (dev->config.addres)<<1, dev->universal, 1, dev->config.timeout);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	68d8      	ldr	r0, [r3, #12]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	b299      	uxth	r1, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f103 0210 	add.w	r2, r3, #16
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	9300      	str	r3, [sp, #0]
 8002300:	2301      	movs	r3, #1
 8002302:	f001 fa75 	bl	80037f0 <HAL_I2C_Master_Transmit>
}
 8002306:	bf00      	nop
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <en_low>:

static void en_low(i2c_lcd* dev){
 800230e:	b580      	push	{r7, lr}
 8002310:	b084      	sub	sp, #16
 8002312:	af02      	add	r7, sp, #8
 8002314:	6078      	str	r0, [r7, #4]
	dev->universal[0] &= ~(1<<LCD_EN);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	7c1b      	ldrb	r3, [r3, #16]
 800231a:	f023 0304 	bic.w	r3, r3, #4
 800231e:	b2da      	uxtb	r2, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	741a      	strb	r2, [r3, #16]
	HAL_I2C_Master_Transmit(dev->config.i2c, (dev->config.addres)<<1, dev->universal, 1, dev->config.timeout);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	68d8      	ldr	r0, [r3, #12]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	b29b      	uxth	r3, r3
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	b299      	uxth	r1, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f103 0210 	add.w	r2, r3, #16
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	9300      	str	r3, [sp, #0]
 800233e:	2301      	movs	r3, #1
 8002340:	f001 fa56 	bl	80037f0 <HAL_I2C_Master_Transmit>

}
 8002344:	bf00      	nop
 8002346:	3708      	adds	r7, #8
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <pulse_en>:
static void rs_low(i2c_lcd* dev){
	dev->universal[0] &= ~(1<<LCD_RS);
	HAL_I2C_Master_Transmit(dev->config.i2c, (dev->config.addres)<<1, dev->universal, 1, dev->config.timeout);
}

static void pulse_en(i2c_lcd* dev){
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]

	en_high(dev);
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f7ff ffbb 	bl	80022d0 <en_high>
	DWT_Delay_us(1000);
 800235a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800235e:	f7ff ff95 	bl	800228c <DWT_Delay_us>
	en_low(dev);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f7ff ffd3 	bl	800230e <en_low>
	DWT_Delay_us(1000);
 8002368:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800236c:	f7ff ff8e 	bl	800228c <DWT_Delay_us>

}
 8002370:	bf00      	nop
 8002372:	3708      	adds	r7, #8
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <write>:

static void write(i2c_lcd* dev, uint8_t data){
 8002378:	b580      	push	{r7, lr}
 800237a:	b086      	sub	sp, #24
 800237c:	af02      	add	r7, sp, #8
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	460b      	mov	r3, r1
 8002382:	70fb      	strb	r3, [r7, #3]

	uint8_t mask = 0b00001111;
 8002384:	230f      	movs	r3, #15
 8002386:	73fb      	strb	r3, [r7, #15]
	dev->universal[0] &= mask;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	7c1a      	ldrb	r2, [r3, #16]
 800238c:	7bfb      	ldrb	r3, [r7, #15]
 800238e:	4013      	ands	r3, r2
 8002390:	b2da      	uxtb	r2, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	741a      	strb	r2, [r3, #16]
	dev->universal[0] |= (data<<4);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	7c1b      	ldrb	r3, [r3, #16]
 800239a:	b25a      	sxtb	r2, r3
 800239c:	78fb      	ldrb	r3, [r7, #3]
 800239e:	011b      	lsls	r3, r3, #4
 80023a0:	b25b      	sxtb	r3, r3
 80023a2:	4313      	orrs	r3, r2
 80023a4:	b25b      	sxtb	r3, r3
 80023a6:	b2da      	uxtb	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	741a      	strb	r2, [r3, #16]
	HAL_I2C_Master_Transmit(dev->config.i2c, (dev->config.addres)<<1, dev->universal, 1, dev->config.timeout);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	68d8      	ldr	r0, [r3, #12]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	005b      	lsls	r3, r3, #1
 80023b8:	b299      	uxth	r1, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f103 0210 	add.w	r2, r3, #16
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	9300      	str	r3, [sp, #0]
 80023c6:	2301      	movs	r3, #1
 80023c8:	f001 fa12 	bl	80037f0 <HAL_I2C_Master_Transmit>

	pulse_en(dev);
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f7ff ffbd 	bl	800234c <pulse_en>

}
 80023d2:	bf00      	nop
 80023d4:	3710      	adds	r7, #16
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <i2c_lcd_cmd>:
	
	rs_low(dev);
		
}

static void i2c_lcd_cmd(i2c_lcd* dev, uint8_t cmd){
 80023da:	b580      	push	{r7, lr}
 80023dc:	b082      	sub	sp, #8
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
 80023e2:	460b      	mov	r3, r1
 80023e4:	70fb      	strb	r3, [r7, #3]

	write(dev, cmd>>4);
 80023e6:	78fb      	ldrb	r3, [r7, #3]
 80023e8:	091b      	lsrs	r3, r3, #4
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	4619      	mov	r1, r3
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f7ff ffc2 	bl	8002378 <write>
	write(dev, cmd);
 80023f4:	78fb      	ldrb	r3, [r7, #3]
 80023f6:	4619      	mov	r1, r3
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f7ff ffbd 	bl	8002378 <write>

}
 80023fe:	bf00      	nop
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <i2c_lcd_init>:

LCD_STATE i2c_lcd_init(i2c_lcd* dev, i2c_lcd_config* config){
 8002406:	b590      	push	{r4, r7, lr}
 8002408:	b087      	sub	sp, #28
 800240a:	af02      	add	r7, sp, #8
 800240c:	6078      	str	r0, [r7, #4]
 800240e:	6039      	str	r1, [r7, #0]
	
	dev->config = *config;
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	4614      	mov	r4, r2
 8002416:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002418:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	LCD_STATE state = LCD_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	73fb      	strb	r3, [r7, #15]

	if (HAL_I2C_IsDeviceReady(dev->config.i2c, (dev->config.addres)<<1, 10, dev->config.timeout) == HAL_OK){
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	68d8      	ldr	r0, [r3, #12]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	b29b      	uxth	r3, r3
 800242a:	005b      	lsls	r3, r3, #1
 800242c:	b299      	uxth	r1, r3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	220a      	movs	r2, #10
 8002434:	f001 fada 	bl	80039ec <HAL_I2C_IsDeviceReady>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d101      	bne.n	8002442 <i2c_lcd_init+0x3c>
		state = LCD_OK;
 800243e:	2300      	movs	r3, #0
 8002440:	73fb      	strb	r3, [r7, #15]
	}

	dev->universal[0] = 0x00;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	741a      	strb	r2, [r3, #16]
	dev->display_control[0] = 0x0F;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	220f      	movs	r2, #15
 800244c:	749a      	strb	r2, [r3, #18]
	dev->entry_mode[0] = 0x05;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2205      	movs	r2, #5
 8002452:	745a      	strb	r2, [r3, #17]
	dev->function_set[0] = 0x20;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2220      	movs	r2, #32
 8002458:	74da      	strb	r2, [r3, #19]

	if (dev->config.mode==0){
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	78db      	ldrb	r3, [r3, #3]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d110      	bne.n	8002484 <i2c_lcd_init+0x7e>
		dev->config.row_offsets[0] = 0x00;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	711a      	strb	r2, [r3, #4]
		dev->config.row_offsets[1] = 0x40;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2240      	movs	r2, #64	; 0x40
 800246c:	715a      	strb	r2, [r3, #5]
		dev->config.row_offsets[2] = 0x00 + dev->config.rows;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	789a      	ldrb	r2, [r3, #2]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	719a      	strb	r2, [r3, #6]
		dev->config.row_offsets[3] = 0x40 + dev->config.rows;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	789b      	ldrb	r3, [r3, #2]
 800247a:	3340      	adds	r3, #64	; 0x40
 800247c:	b2da      	uxtb	r2, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	71da      	strb	r2, [r3, #7]
 8002482:	e00b      	b.n	800249c <i2c_lcd_init+0x96>
	}
	else{
		dev->config.row_offsets[0] = 0x00;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	711a      	strb	r2, [r3, #4]
		dev->config.row_offsets[1] = 0x90;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2290      	movs	r2, #144	; 0x90
 800248e:	715a      	strb	r2, [r3, #5]
		dev->config.row_offsets[2] = 0x88;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2288      	movs	r2, #136	; 0x88
 8002494:	719a      	strb	r2, [r3, #6]
		dev->config.row_offsets[3] = 0x98;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2298      	movs	r2, #152	; 0x98
 800249a:	71da      	strb	r2, [r3, #7]
	}


	HAL_I2C_Master_Transmit(dev->config.i2c, (dev->config.addres)<<1, dev->universal, 1, dev->config.timeout);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	68d8      	ldr	r0, [r3, #12]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	b299      	uxth	r1, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f103 0210 	add.w	r2, r3, #16
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	9300      	str	r3, [sp, #0]
 80024b6:	2301      	movs	r3, #1
 80024b8:	f001 f99a 	bl	80037f0 <HAL_I2C_Master_Transmit>

	DWT_Delay_Init();
 80024bc:	f7ff feb6 	bl	800222c <DWT_Delay_Init>

	HAL_Delay(50);
 80024c0:	2032      	movs	r0, #50	; 0x32
 80024c2:	f000 fdb9 	bl	8003038 <HAL_Delay>

	i2c_lcd_bl(dev, true);
 80024c6:	2101      	movs	r1, #1
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f000 f843 	bl	8002554 <i2c_lcd_bl>

	write(dev, 0x03);
 80024ce:	2103      	movs	r1, #3
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f7ff ff51 	bl	8002378 <write>
	HAL_Delay(5);
 80024d6:	2005      	movs	r0, #5
 80024d8:	f000 fdae 	bl	8003038 <HAL_Delay>
	write(dev, 0x03);
 80024dc:	2103      	movs	r1, #3
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f7ff ff4a 	bl	8002378 <write>
	HAL_Delay(5);
 80024e4:	2005      	movs	r0, #5
 80024e6:	f000 fda7 	bl	8003038 <HAL_Delay>
	write(dev, 0x03);
 80024ea:	2103      	movs	r1, #3
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f7ff ff43 	bl	8002378 <write>
	HAL_Delay(1);
 80024f2:	2001      	movs	r0, #1
 80024f4:	f000 fda0 	bl	8003038 <HAL_Delay>
	write(dev, 0x02);
 80024f8:	2102      	movs	r1, #2
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f7ff ff3c 	bl	8002378 <write>

	if (dev->config.rows>1){
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	789b      	ldrb	r3, [r3, #2]
 8002504:	2b01      	cmp	r3, #1
 8002506:	d90c      	bls.n	8002522 <i2c_lcd_init+0x11c>
		dev->function_set[0] |= (1<<3);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	7cdb      	ldrb	r3, [r3, #19]
 800250c:	f043 0308 	orr.w	r3, r3, #8
 8002510:	b2da      	uxtb	r2, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	74da      	strb	r2, [r3, #19]
		i2c_lcd_cmd(dev, *dev->function_set);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	7cdb      	ldrb	r3, [r3, #19]
 800251a:	4619      	mov	r1, r3
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f7ff ff5c 	bl	80023da <i2c_lcd_cmd>
	}
	i2c_lcd_display(dev, true);
 8002522:	2101      	movs	r1, #1
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f000 f891 	bl	800264c <i2c_lcd_display>
	i2c_lcd_cursor(dev, false);
 800252a:	2100      	movs	r1, #0
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f000 f86b 	bl	8002608 <i2c_lcd_cursor>
	i2c_lcd_bk(dev, false);
 8002532:	2100      	movs	r1, #0
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f000 f845 	bl	80025c4 <i2c_lcd_bk>
	i2c_lcd_home(dev);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f000 f836 	bl	80025ac <i2c_lcd_home>
	i2c_lcd_setCursor(dev, 0, 0);
 8002540:	2200      	movs	r2, #0
 8002542:	2100      	movs	r1, #0
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f000 f8a3 	bl	8002690 <i2c_lcd_setCursor>

	return state;
 800254a:	7bfb      	ldrb	r3, [r7, #15]

}
 800254c:	4618      	mov	r0, r3
 800254e:	3714      	adds	r7, #20
 8002550:	46bd      	mov	sp, r7
 8002552:	bd90      	pop	{r4, r7, pc}

08002554 <i2c_lcd_bl>:
		size--;
	}

}

void i2c_lcd_bl(i2c_lcd* dev, bool state){
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af02      	add	r7, sp, #8
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	460b      	mov	r3, r1
 800255e:	70fb      	strb	r3, [r7, #3]

	if (state){
 8002560:	78fb      	ldrb	r3, [r7, #3]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d007      	beq.n	8002576 <i2c_lcd_bl+0x22>
		dev->universal[0] |= (1<<LCD_K);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	7c1b      	ldrb	r3, [r3, #16]
 800256a:	f043 0308 	orr.w	r3, r3, #8
 800256e:	b2da      	uxtb	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	741a      	strb	r2, [r3, #16]
 8002574:	e006      	b.n	8002584 <i2c_lcd_bl+0x30>
	}
	else{
		dev->universal[0] &= ~(1<<LCD_K);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	7c1b      	ldrb	r3, [r3, #16]
 800257a:	f023 0308 	bic.w	r3, r3, #8
 800257e:	b2da      	uxtb	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	741a      	strb	r2, [r3, #16]
	}
	HAL_I2C_Master_Transmit(dev->config.i2c, (dev->config.addres)<<1, dev->universal, 1, dev->config.timeout);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	68d8      	ldr	r0, [r3, #12]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	b29b      	uxth	r3, r3
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	b299      	uxth	r1, r3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	f103 0210 	add.w	r2, r3, #16
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	9300      	str	r3, [sp, #0]
 800259e:	2301      	movs	r3, #1
 80025a0:	f001 f926 	bl	80037f0 <HAL_I2C_Master_Transmit>

}
 80025a4:	bf00      	nop
 80025a6:	3708      	adds	r7, #8
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <i2c_lcd_home>:

void i2c_lcd_home(i2c_lcd* dev){
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
	i2c_lcd_cmd(dev, 1);
 80025b4:	2101      	movs	r1, #1
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f7ff ff0f 	bl	80023da <i2c_lcd_cmd>
}
 80025bc:	bf00      	nop
 80025be:	3708      	adds	r7, #8
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <i2c_lcd_bk>:
void i2c_lcd_return(i2c_lcd* dev){
	uint8_t cmd = 0x02;
	i2c_lcd_cmd(dev, cmd);
}

void i2c_lcd_bk(i2c_lcd* dev, bool state){
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	460b      	mov	r3, r1
 80025ce:	70fb      	strb	r3, [r7, #3]
	if (state){
 80025d0:	78fb      	ldrb	r3, [r7, #3]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d007      	beq.n	80025e6 <i2c_lcd_bk+0x22>
		dev->display_control[0] |= 1;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	7c9b      	ldrb	r3, [r3, #18]
 80025da:	f043 0301 	orr.w	r3, r3, #1
 80025de:	b2da      	uxtb	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	749a      	strb	r2, [r3, #18]
 80025e4:	e006      	b.n	80025f4 <i2c_lcd_bk+0x30>
	}
	else{
		dev->display_control[0] &= ~1;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	7c9b      	ldrb	r3, [r3, #18]
 80025ea:	f023 0301 	bic.w	r3, r3, #1
 80025ee:	b2da      	uxtb	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	749a      	strb	r2, [r3, #18]
	}
	i2c_lcd_cmd(dev, *dev->display_control);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	7c9b      	ldrb	r3, [r3, #18]
 80025f8:	4619      	mov	r1, r3
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f7ff feed 	bl	80023da <i2c_lcd_cmd>
}
 8002600:	bf00      	nop
 8002602:	3708      	adds	r7, #8
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <i2c_lcd_cursor>:

void i2c_lcd_cursor(i2c_lcd* dev, bool state){
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	460b      	mov	r3, r1
 8002612:	70fb      	strb	r3, [r7, #3]
	if (state){
 8002614:	78fb      	ldrb	r3, [r7, #3]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d007      	beq.n	800262a <i2c_lcd_cursor+0x22>
		dev->display_control[0] |= (1<<1);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	7c9b      	ldrb	r3, [r3, #18]
 800261e:	f043 0302 	orr.w	r3, r3, #2
 8002622:	b2da      	uxtb	r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	749a      	strb	r2, [r3, #18]
 8002628:	e006      	b.n	8002638 <i2c_lcd_cursor+0x30>
	}
	else{
		dev->display_control[0] &= ~(1<<1);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	7c9b      	ldrb	r3, [r3, #18]
 800262e:	f023 0302 	bic.w	r3, r3, #2
 8002632:	b2da      	uxtb	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	749a      	strb	r2, [r3, #18]
	}
	i2c_lcd_cmd(dev, *dev->display_control);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	7c9b      	ldrb	r3, [r3, #18]
 800263c:	4619      	mov	r1, r3
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f7ff fecb 	bl	80023da <i2c_lcd_cmd>
}
 8002644:	bf00      	nop
 8002646:	3708      	adds	r7, #8
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <i2c_lcd_display>:

void i2c_lcd_display(i2c_lcd* dev, bool state){
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	460b      	mov	r3, r1
 8002656:	70fb      	strb	r3, [r7, #3]
	if (state){
 8002658:	78fb      	ldrb	r3, [r7, #3]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d007      	beq.n	800266e <i2c_lcd_display+0x22>
		dev->display_control[0] |= (1<<2);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	7c9b      	ldrb	r3, [r3, #18]
 8002662:	f043 0304 	orr.w	r3, r3, #4
 8002666:	b2da      	uxtb	r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	749a      	strb	r2, [r3, #18]
 800266c:	e006      	b.n	800267c <i2c_lcd_display+0x30>
	}
	else{
		dev->display_control[0] &= ~(1<<2);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	7c9b      	ldrb	r3, [r3, #18]
 8002672:	f023 0304 	bic.w	r3, r3, #4
 8002676:	b2da      	uxtb	r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	749a      	strb	r2, [r3, #18]
	}
	i2c_lcd_cmd(dev, *dev->display_control);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	7c9b      	ldrb	r3, [r3, #18]
 8002680:	4619      	mov	r1, r3
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f7ff fea9 	bl	80023da <i2c_lcd_cmd>
}
 8002688:	bf00      	nop
 800268a:	3708      	adds	r7, #8
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <i2c_lcd_setCursor>:
		dev->entry_mode[0] &= ~(1<<0);
	}
	i2c_lcd_cmd(dev, *dev->entry_mode);
}

void i2c_lcd_setCursor(i2c_lcd* dev, uint8_t col, uint8_t row){
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	460b      	mov	r3, r1
 800269a:	70fb      	strb	r3, [r7, #3]
 800269c:	4613      	mov	r3, r2
 800269e:	70bb      	strb	r3, [r7, #2]
	const size_t max_lines = sizeof(dev->config.row_offsets) / sizeof(*dev->config.row_offsets);
 80026a0:	2304      	movs	r3, #4
 80026a2:	60fb      	str	r3, [r7, #12]
	if (row >= max_lines) {
 80026a4:	78bb      	ldrb	r3, [r7, #2]
 80026a6:	68fa      	ldr	r2, [r7, #12]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d803      	bhi.n	80026b4 <i2c_lcd_setCursor+0x24>
	row = max_lines - 1;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	3b01      	subs	r3, #1
 80026b2:	70bb      	strb	r3, [r7, #2]
	}
	if (row >= dev->config.rows) {
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	789b      	ldrb	r3, [r3, #2]
 80026b8:	78ba      	ldrb	r2, [r7, #2]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d303      	bcc.n	80026c6 <i2c_lcd_setCursor+0x36>
	row = dev->config.rows - 1;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	789b      	ldrb	r3, [r3, #2]
 80026c2:	3b01      	subs	r3, #1
 80026c4:	70bb      	strb	r3, [r7, #2]
	}
	i2c_lcd_cmd(dev, 0x80 | (col + dev->config.row_offsets[row]));
 80026c6:	78bb      	ldrb	r3, [r7, #2]
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	4413      	add	r3, r2
 80026cc:	791a      	ldrb	r2, [r3, #4]
 80026ce:	78fb      	ldrb	r3, [r7, #3]
 80026d0:	4413      	add	r3, r2
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	b25b      	sxtb	r3, r3
 80026d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80026da:	b25b      	sxtb	r3, r3
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	4619      	mov	r1, r3
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f7ff fe7a 	bl	80023da <i2c_lcd_cmd>
}
 80026e6:	bf00      	nop
 80026e8:	3710      	adds	r7, #16
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
	...

080026f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80026f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026f2:	b0ad      	sub	sp, #180	; 0xb4
 80026f4:	af16      	add	r7, sp, #88	; 0x58
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80026f6:	f000 fc2d 	bl	8002f54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80026fa:	f000 f8ed 	bl	80028d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80026fe:	f000 f9e5 	bl	8002acc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002702:	f000 f9b9 	bl	8002a78 <MX_USART2_UART_Init>
  MX_I2C3_Init();
 8002706:	f000 f953 	bl	80029b0 <MX_I2C3_Init>
  MX_SPI1_Init();
 800270a:	f000 f97f 	bl	8002a0c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  NRF24_begin(CSN_GPIO_Port, CE_GPIO_Port, CSN_Pin, CE_Pin, hspi1);
 800270e:	4b66      	ldr	r3, [pc, #408]	; (80028a8 <main+0x1b8>)
 8002710:	4668      	mov	r0, sp
 8002712:	4619      	mov	r1, r3
 8002714:	2358      	movs	r3, #88	; 0x58
 8002716:	461a      	mov	r2, r3
 8002718:	f003 fb2c 	bl	8005d74 <memcpy>
 800271c:	2340      	movs	r3, #64	; 0x40
 800271e:	2280      	movs	r2, #128	; 0x80
 8002720:	4962      	ldr	r1, [pc, #392]	; (80028ac <main+0x1bc>)
 8002722:	4863      	ldr	r0, [pc, #396]	; (80028b0 <main+0x1c0>)
 8002724:	f7fe fd80 	bl	8001228 <NRF24_begin>

  NRF24_setAutoAck(true);
 8002728:	2001      	movs	r0, #1
 800272a:	f7fe ffcf 	bl	80016cc <NRF24_setAutoAck>
  NRF24_setChannel(52);
 800272e:	2034      	movs	r0, #52	; 0x34
 8002730:	f7fe ff13 	bl	800155a <NRF24_setChannel>
  NRF24_setPayloadSize(32);
 8002734:	2020      	movs	r0, #32
 8002736:	f7fe ff25 	bl	8001584 <NRF24_setPayloadSize>
  NRF24_openReadingPipe(1, DireccionRecepcion);
 800273a:	4b5e      	ldr	r3, [pc, #376]	; (80028b4 <main+0x1c4>)
 800273c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002740:	461a      	mov	r2, r3
 8002742:	4623      	mov	r3, r4
 8002744:	2001      	movs	r0, #1
 8002746:	f7fe fe9f 	bl	8001488 <NRF24_openReadingPipe>
  NRF24_enableDynamicPayloads();
 800274a:	f7fe ff75 	bl	8001638 <NRF24_enableDynamicPayloads>
  NRF24_enableAckPayload();
 800274e:	f7fe ff45 	bl	80015dc <NRF24_enableAckPayload>
  NRF24_setDataRate(RF24_250KBPS);
 8002752:	2002      	movs	r0, #2
 8002754:	f7ff f808 	bl	8001768 <NRF24_setDataRate>

  NRF24_startListening();
 8002758:	f7fe fe48 	bl	80013ec <NRF24_startListening>

  i2c_lcd lcd;
  i2c_lcd_config config;
  {
  	  config.addres = 0x27;
 800275c:	2327      	movs	r3, #39	; 0x27
 800275e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  	  config.cols = 16;
 8002762:	2310      	movs	r3, #16
 8002764:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  	  config.rows = 2;
 8002768:	2302      	movs	r3, #2
 800276a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  	  config.timeout = 100;
 800276e:	2364      	movs	r3, #100	; 0x64
 8002770:	63fb      	str	r3, [r7, #60]	; 0x3c
  	  config.i2c = &hi2c3;
 8002772:	4b51      	ldr	r3, [pc, #324]	; (80028b8 <main+0x1c8>)
 8002774:	643b      	str	r3, [r7, #64]	; 0x40
  	  config.mode = 0;
 8002776:	2300      	movs	r3, #0
 8002778:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

  i2c_lcd_init(&lcd, &config);
 800277c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002780:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002784:	4611      	mov	r1, r2
 8002786:	4618      	mov	r0, r3
 8002788:	f7ff fe3d 	bl	8002406 <i2c_lcd_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(NRF24_available())
 800278c:	f7fe fe54 	bl	8001438 <NRF24_available>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d0fa      	beq.n	800278c <main+0x9c>
	  {
	  	  memset(mensaje, 0, sizeof(mensaje));
 8002796:	2232      	movs	r2, #50	; 0x32
 8002798:	2100      	movs	r1, #0
 800279a:	4848      	ldr	r0, [pc, #288]	; (80028bc <main+0x1cc>)
 800279c:	f003 faf5 	bl	8005d8a <memset>
	  	  NRF24_read(mensaje, 32);
 80027a0:	2120      	movs	r1, #32
 80027a2:	4846      	ldr	r0, [pc, #280]	; (80028bc <main+0x1cc>)
 80027a4:	f7fe fe50 	bl	8001448 <NRF24_read>
	  	  size = sscanf(mensaje, "%d,%d,%d,%d,%d,%d,%d,%d", &allData.heart, &allData.pitch, &allData.roll,
 80027a8:	f107 030c 	add.w	r3, r7, #12
 80027ac:	1d19      	adds	r1, r3, #4
 80027ae:	f107 020c 	add.w	r2, r7, #12
 80027b2:	f107 030c 	add.w	r3, r7, #12
 80027b6:	3314      	adds	r3, #20
 80027b8:	9305      	str	r3, [sp, #20]
 80027ba:	f107 030c 	add.w	r3, r7, #12
 80027be:	3310      	adds	r3, #16
 80027c0:	9304      	str	r3, [sp, #16]
 80027c2:	f107 030c 	add.w	r3, r7, #12
 80027c6:	331c      	adds	r3, #28
 80027c8:	9303      	str	r3, [sp, #12]
 80027ca:	f107 030c 	add.w	r3, r7, #12
 80027ce:	3318      	adds	r3, #24
 80027d0:	9302      	str	r3, [sp, #8]
 80027d2:	f107 030c 	add.w	r3, r7, #12
 80027d6:	330c      	adds	r3, #12
 80027d8:	9301      	str	r3, [sp, #4]
 80027da:	f107 030c 	add.w	r3, r7, #12
 80027de:	3308      	adds	r3, #8
 80027e0:	9300      	str	r3, [sp, #0]
 80027e2:	460b      	mov	r3, r1
 80027e4:	4936      	ldr	r1, [pc, #216]	; (80028c0 <main+0x1d0>)
 80027e6:	4835      	ldr	r0, [pc, #212]	; (80028bc <main+0x1cc>)
 80027e8:	f004 f93c 	bl	8006a64 <siscanf>
 80027ec:	4603      	mov	r3, r0
 80027ee:	b2da      	uxtb	r2, r3
 80027f0:	4b34      	ldr	r3, [pc, #208]	; (80028c4 <main+0x1d4>)
 80027f2:	701a      	strb	r2, [r3, #0]
	  			  	  	  	  	  	  	  	  	  	  	  	&allData.temperature, &allData.pressure, &allData.humidity,
															&allData.altitude, &allData.velocity);

	  	  sscanf(mensaje, "$%f,%f", &allData.latitude, &allData.longitude);
 80027f4:	f107 030c 	add.w	r3, r7, #12
 80027f8:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80027fc:	f107 030c 	add.w	r3, r7, #12
 8002800:	f103 0220 	add.w	r2, r3, #32
 8002804:	460b      	mov	r3, r1
 8002806:	4930      	ldr	r1, [pc, #192]	; (80028c8 <main+0x1d8>)
 8002808:	482c      	ldr	r0, [pc, #176]	; (80028bc <main+0x1cc>)
 800280a:	f004 f92b 	bl	8006a64 <siscanf>

	  	  if (size > 0){
 800280e:	4b2d      	ldr	r3, [pc, #180]	; (80028c4 <main+0x1d4>)
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d019      	beq.n	800284a <main+0x15a>
			  size = sprintf(mensaje, "1 H*%d* P*%d* R*%d* T*%d* X*%d* Y*%d* A*%d* V*%d*", allData.heart, allData.pitch, allData.roll,
 8002816:	68fe      	ldr	r6, [r7, #12]
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	607b      	str	r3, [r7, #4]
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	69ba      	ldr	r2, [r7, #24]
 8002820:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002822:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002824:	69fc      	ldr	r4, [r7, #28]
 8002826:	6a3d      	ldr	r5, [r7, #32]
 8002828:	9505      	str	r5, [sp, #20]
 800282a:	9404      	str	r4, [sp, #16]
 800282c:	9003      	str	r0, [sp, #12]
 800282e:	9102      	str	r1, [sp, #8]
 8002830:	9201      	str	r2, [sp, #4]
 8002832:	9300      	str	r3, [sp, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	4632      	mov	r2, r6
 8002838:	4924      	ldr	r1, [pc, #144]	; (80028cc <main+0x1dc>)
 800283a:	4820      	ldr	r0, [pc, #128]	; (80028bc <main+0x1cc>)
 800283c:	f004 f8f2 	bl	8006a24 <siprintf>
 8002840:	4603      	mov	r3, r0
 8002842:	b2da      	uxtb	r2, r3
 8002844:	4b1f      	ldr	r3, [pc, #124]	; (80028c4 <main+0x1d4>)
 8002846:	701a      	strb	r2, [r3, #0]
 8002848:	e017      	b.n	800287a <main+0x18a>
														   allData.temperature, allData.pressure, allData.humidity,
														   allData.altitude, allData.velocity);
	  	  }
	  	  else{
	  		  size = sprintf(mensaje, "2 G*%3.11f* J*%3.11f*", allData.latitude, allData.longitude);
 800284a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800284c:	4618      	mov	r0, r3
 800284e:	f7fd fe83 	bl	8000558 <__aeabi_f2d>
 8002852:	4605      	mov	r5, r0
 8002854:	460e      	mov	r6, r1
 8002856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002858:	4618      	mov	r0, r3
 800285a:	f7fd fe7d 	bl	8000558 <__aeabi_f2d>
 800285e:	4603      	mov	r3, r0
 8002860:	460c      	mov	r4, r1
 8002862:	e9cd 3400 	strd	r3, r4, [sp]
 8002866:	462a      	mov	r2, r5
 8002868:	4633      	mov	r3, r6
 800286a:	4919      	ldr	r1, [pc, #100]	; (80028d0 <main+0x1e0>)
 800286c:	4813      	ldr	r0, [pc, #76]	; (80028bc <main+0x1cc>)
 800286e:	f004 f8d9 	bl	8006a24 <siprintf>
 8002872:	4603      	mov	r3, r0
 8002874:	b2da      	uxtb	r2, r3
 8002876:	4b13      	ldr	r3, [pc, #76]	; (80028c4 <main+0x1d4>)
 8002878:	701a      	strb	r2, [r3, #0]
	  	  }


	  	  mensaje[size] = '\r';
 800287a:	4b12      	ldr	r3, [pc, #72]	; (80028c4 <main+0x1d4>)
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	461a      	mov	r2, r3
 8002880:	4b0e      	ldr	r3, [pc, #56]	; (80028bc <main+0x1cc>)
 8002882:	210d      	movs	r1, #13
 8002884:	5499      	strb	r1, [r3, r2]
	  	  mensaje[size + 1] = '\n';
 8002886:	4b0f      	ldr	r3, [pc, #60]	; (80028c4 <main+0x1d4>)
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	3301      	adds	r3, #1
 800288c:	4a0b      	ldr	r2, [pc, #44]	; (80028bc <main+0x1cc>)
 800288e:	210a      	movs	r1, #10
 8002890:	54d1      	strb	r1, [r2, r3]
	  	  HAL_UART_Transmit(&huart2, (uint8_t*) mensaje, size + 2, 100);
 8002892:	4b0c      	ldr	r3, [pc, #48]	; (80028c4 <main+0x1d4>)
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	b29b      	uxth	r3, r3
 8002898:	3302      	adds	r3, #2
 800289a:	b29a      	uxth	r2, r3
 800289c:	2364      	movs	r3, #100	; 0x64
 800289e:	4907      	ldr	r1, [pc, #28]	; (80028bc <main+0x1cc>)
 80028a0:	480c      	ldr	r0, [pc, #48]	; (80028d4 <main+0x1e4>)
 80028a2:	f002 fdde 	bl	8005462 <HAL_UART_Transmit>
	  if(NRF24_available())
 80028a6:	e771      	b.n	800278c <main+0x9c>
 80028a8:	20000350 	.word	0x20000350
 80028ac:	40020400 	.word	0x40020400
 80028b0:	40020800 	.word	0x40020800
 80028b4:	20000000 	.word	0x20000000
 80028b8:	200002fc 	.word	0x200002fc
 80028bc:	200002c8 	.word	0x200002c8
 80028c0:	0800a5bc 	.word	0x0800a5bc
 80028c4:	200002b8 	.word	0x200002b8
 80028c8:	0800a5d4 	.word	0x0800a5d4
 80028cc:	0800a5dc 	.word	0x0800a5dc
 80028d0:	0800a610 	.word	0x0800a610
 80028d4:	200003a8 	.word	0x200003a8

080028d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b094      	sub	sp, #80	; 0x50
 80028dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028de:	f107 0320 	add.w	r3, r7, #32
 80028e2:	2230      	movs	r2, #48	; 0x30
 80028e4:	2100      	movs	r1, #0
 80028e6:	4618      	mov	r0, r3
 80028e8:	f003 fa4f 	bl	8005d8a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80028ec:	f107 030c 	add.w	r3, r7, #12
 80028f0:	2200      	movs	r2, #0
 80028f2:	601a      	str	r2, [r3, #0]
 80028f4:	605a      	str	r2, [r3, #4]
 80028f6:	609a      	str	r2, [r3, #8]
 80028f8:	60da      	str	r2, [r3, #12]
 80028fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80028fc:	2300      	movs	r3, #0
 80028fe:	60bb      	str	r3, [r7, #8]
 8002900:	4b29      	ldr	r3, [pc, #164]	; (80029a8 <SystemClock_Config+0xd0>)
 8002902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002904:	4a28      	ldr	r2, [pc, #160]	; (80029a8 <SystemClock_Config+0xd0>)
 8002906:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800290a:	6413      	str	r3, [r2, #64]	; 0x40
 800290c:	4b26      	ldr	r3, [pc, #152]	; (80029a8 <SystemClock_Config+0xd0>)
 800290e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002910:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002914:	60bb      	str	r3, [r7, #8]
 8002916:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002918:	2300      	movs	r3, #0
 800291a:	607b      	str	r3, [r7, #4]
 800291c:	4b23      	ldr	r3, [pc, #140]	; (80029ac <SystemClock_Config+0xd4>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002924:	4a21      	ldr	r2, [pc, #132]	; (80029ac <SystemClock_Config+0xd4>)
 8002926:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800292a:	6013      	str	r3, [r2, #0]
 800292c:	4b1f      	ldr	r3, [pc, #124]	; (80029ac <SystemClock_Config+0xd4>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002934:	607b      	str	r3, [r7, #4]
 8002936:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002938:	2302      	movs	r3, #2
 800293a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800293c:	2301      	movs	r3, #1
 800293e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002940:	2310      	movs	r3, #16
 8002942:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002944:	2302      	movs	r3, #2
 8002946:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002948:	2300      	movs	r3, #0
 800294a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800294c:	2310      	movs	r3, #16
 800294e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002950:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002954:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002956:	2304      	movs	r3, #4
 8002958:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800295a:	2307      	movs	r3, #7
 800295c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800295e:	f107 0320 	add.w	r3, r7, #32
 8002962:	4618      	mov	r0, r3
 8002964:	f001 fb7a 	bl	800405c <HAL_RCC_OscConfig>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800296e:	f000 f92f 	bl	8002bd0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002972:	230f      	movs	r3, #15
 8002974:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002976:	2302      	movs	r3, #2
 8002978:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800297a:	2300      	movs	r3, #0
 800297c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800297e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002982:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002984:	2300      	movs	r3, #0
 8002986:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002988:	f107 030c 	add.w	r3, r7, #12
 800298c:	2102      	movs	r1, #2
 800298e:	4618      	mov	r0, r3
 8002990:	f001 fdd4 	bl	800453c <HAL_RCC_ClockConfig>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800299a:	f000 f919 	bl	8002bd0 <Error_Handler>
  }
}
 800299e:	bf00      	nop
 80029a0:	3750      	adds	r7, #80	; 0x50
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	40023800 	.word	0x40023800
 80029ac:	40007000 	.word	0x40007000

080029b0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80029b4:	4b12      	ldr	r3, [pc, #72]	; (8002a00 <MX_I2C3_Init+0x50>)
 80029b6:	4a13      	ldr	r2, [pc, #76]	; (8002a04 <MX_I2C3_Init+0x54>)
 80029b8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 80029ba:	4b11      	ldr	r3, [pc, #68]	; (8002a00 <MX_I2C3_Init+0x50>)
 80029bc:	4a12      	ldr	r2, [pc, #72]	; (8002a08 <MX_I2C3_Init+0x58>)
 80029be:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80029c0:	4b0f      	ldr	r3, [pc, #60]	; (8002a00 <MX_I2C3_Init+0x50>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80029c6:	4b0e      	ldr	r3, [pc, #56]	; (8002a00 <MX_I2C3_Init+0x50>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80029cc:	4b0c      	ldr	r3, [pc, #48]	; (8002a00 <MX_I2C3_Init+0x50>)
 80029ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80029d2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80029d4:	4b0a      	ldr	r3, [pc, #40]	; (8002a00 <MX_I2C3_Init+0x50>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80029da:	4b09      	ldr	r3, [pc, #36]	; (8002a00 <MX_I2C3_Init+0x50>)
 80029dc:	2200      	movs	r2, #0
 80029de:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80029e0:	4b07      	ldr	r3, [pc, #28]	; (8002a00 <MX_I2C3_Init+0x50>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80029e6:	4b06      	ldr	r3, [pc, #24]	; (8002a00 <MX_I2C3_Init+0x50>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80029ec:	4804      	ldr	r0, [pc, #16]	; (8002a00 <MX_I2C3_Init+0x50>)
 80029ee:	f000 fdc7 	bl	8003580 <HAL_I2C_Init>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d001      	beq.n	80029fc <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80029f8:	f000 f8ea 	bl	8002bd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80029fc:	bf00      	nop
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	200002fc 	.word	0x200002fc
 8002a04:	40005c00 	.word	0x40005c00
 8002a08:	00061a80 	.word	0x00061a80

08002a0c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002a10:	4b17      	ldr	r3, [pc, #92]	; (8002a70 <MX_SPI1_Init+0x64>)
 8002a12:	4a18      	ldr	r2, [pc, #96]	; (8002a74 <MX_SPI1_Init+0x68>)
 8002a14:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002a16:	4b16      	ldr	r3, [pc, #88]	; (8002a70 <MX_SPI1_Init+0x64>)
 8002a18:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002a1c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002a1e:	4b14      	ldr	r3, [pc, #80]	; (8002a70 <MX_SPI1_Init+0x64>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a24:	4b12      	ldr	r3, [pc, #72]	; (8002a70 <MX_SPI1_Init+0x64>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a2a:	4b11      	ldr	r3, [pc, #68]	; (8002a70 <MX_SPI1_Init+0x64>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a30:	4b0f      	ldr	r3, [pc, #60]	; (8002a70 <MX_SPI1_Init+0x64>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002a36:	4b0e      	ldr	r3, [pc, #56]	; (8002a70 <MX_SPI1_Init+0x64>)
 8002a38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a3c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002a3e:	4b0c      	ldr	r3, [pc, #48]	; (8002a70 <MX_SPI1_Init+0x64>)
 8002a40:	2218      	movs	r2, #24
 8002a42:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a44:	4b0a      	ldr	r3, [pc, #40]	; (8002a70 <MX_SPI1_Init+0x64>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a4a:	4b09      	ldr	r3, [pc, #36]	; (8002a70 <MX_SPI1_Init+0x64>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a50:	4b07      	ldr	r3, [pc, #28]	; (8002a70 <MX_SPI1_Init+0x64>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002a56:	4b06      	ldr	r3, [pc, #24]	; (8002a70 <MX_SPI1_Init+0x64>)
 8002a58:	220a      	movs	r2, #10
 8002a5a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002a5c:	4804      	ldr	r0, [pc, #16]	; (8002a70 <MX_SPI1_Init+0x64>)
 8002a5e:	f001 ff5f 	bl	8004920 <HAL_SPI_Init>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002a68:	f000 f8b2 	bl	8002bd0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002a6c:	bf00      	nop
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	20000350 	.word	0x20000350
 8002a74:	40013000 	.word	0x40013000

08002a78 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002a7c:	4b11      	ldr	r3, [pc, #68]	; (8002ac4 <MX_USART2_UART_Init+0x4c>)
 8002a7e:	4a12      	ldr	r2, [pc, #72]	; (8002ac8 <MX_USART2_UART_Init+0x50>)
 8002a80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002a82:	4b10      	ldr	r3, [pc, #64]	; (8002ac4 <MX_USART2_UART_Init+0x4c>)
 8002a84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002a8a:	4b0e      	ldr	r3, [pc, #56]	; (8002ac4 <MX_USART2_UART_Init+0x4c>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002a90:	4b0c      	ldr	r3, [pc, #48]	; (8002ac4 <MX_USART2_UART_Init+0x4c>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002a96:	4b0b      	ldr	r3, [pc, #44]	; (8002ac4 <MX_USART2_UART_Init+0x4c>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002a9c:	4b09      	ldr	r3, [pc, #36]	; (8002ac4 <MX_USART2_UART_Init+0x4c>)
 8002a9e:	220c      	movs	r2, #12
 8002aa0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002aa2:	4b08      	ldr	r3, [pc, #32]	; (8002ac4 <MX_USART2_UART_Init+0x4c>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002aa8:	4b06      	ldr	r3, [pc, #24]	; (8002ac4 <MX_USART2_UART_Init+0x4c>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002aae:	4805      	ldr	r0, [pc, #20]	; (8002ac4 <MX_USART2_UART_Init+0x4c>)
 8002ab0:	f002 fc8a 	bl	80053c8 <HAL_UART_Init>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002aba:	f000 f889 	bl	8002bd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002abe:	bf00      	nop
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	200003a8 	.word	0x200003a8
 8002ac8:	40004400 	.word	0x40004400

08002acc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b08a      	sub	sp, #40	; 0x28
 8002ad0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ad2:	f107 0314 	add.w	r3, r7, #20
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	601a      	str	r2, [r3, #0]
 8002ada:	605a      	str	r2, [r3, #4]
 8002adc:	609a      	str	r2, [r3, #8]
 8002ade:	60da      	str	r2, [r3, #12]
 8002ae0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	613b      	str	r3, [r7, #16]
 8002ae6:	4b36      	ldr	r3, [pc, #216]	; (8002bc0 <MX_GPIO_Init+0xf4>)
 8002ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aea:	4a35      	ldr	r2, [pc, #212]	; (8002bc0 <MX_GPIO_Init+0xf4>)
 8002aec:	f043 0304 	orr.w	r3, r3, #4
 8002af0:	6313      	str	r3, [r2, #48]	; 0x30
 8002af2:	4b33      	ldr	r3, [pc, #204]	; (8002bc0 <MX_GPIO_Init+0xf4>)
 8002af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af6:	f003 0304 	and.w	r3, r3, #4
 8002afa:	613b      	str	r3, [r7, #16]
 8002afc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002afe:	2300      	movs	r3, #0
 8002b00:	60fb      	str	r3, [r7, #12]
 8002b02:	4b2f      	ldr	r3, [pc, #188]	; (8002bc0 <MX_GPIO_Init+0xf4>)
 8002b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b06:	4a2e      	ldr	r2, [pc, #184]	; (8002bc0 <MX_GPIO_Init+0xf4>)
 8002b08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b0e:	4b2c      	ldr	r3, [pc, #176]	; (8002bc0 <MX_GPIO_Init+0xf4>)
 8002b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b16:	60fb      	str	r3, [r7, #12]
 8002b18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	60bb      	str	r3, [r7, #8]
 8002b1e:	4b28      	ldr	r3, [pc, #160]	; (8002bc0 <MX_GPIO_Init+0xf4>)
 8002b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b22:	4a27      	ldr	r2, [pc, #156]	; (8002bc0 <MX_GPIO_Init+0xf4>)
 8002b24:	f043 0301 	orr.w	r3, r3, #1
 8002b28:	6313      	str	r3, [r2, #48]	; 0x30
 8002b2a:	4b25      	ldr	r3, [pc, #148]	; (8002bc0 <MX_GPIO_Init+0xf4>)
 8002b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2e:	f003 0301 	and.w	r3, r3, #1
 8002b32:	60bb      	str	r3, [r7, #8]
 8002b34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b36:	2300      	movs	r3, #0
 8002b38:	607b      	str	r3, [r7, #4]
 8002b3a:	4b21      	ldr	r3, [pc, #132]	; (8002bc0 <MX_GPIO_Init+0xf4>)
 8002b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3e:	4a20      	ldr	r2, [pc, #128]	; (8002bc0 <MX_GPIO_Init+0xf4>)
 8002b40:	f043 0302 	orr.w	r3, r3, #2
 8002b44:	6313      	str	r3, [r2, #48]	; 0x30
 8002b46:	4b1e      	ldr	r3, [pc, #120]	; (8002bc0 <MX_GPIO_Init+0xf4>)
 8002b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	607b      	str	r3, [r7, #4]
 8002b50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_RESET);
 8002b52:	2200      	movs	r2, #0
 8002b54:	2180      	movs	r1, #128	; 0x80
 8002b56:	481b      	ldr	r0, [pc, #108]	; (8002bc4 <MX_GPIO_Init+0xf8>)
 8002b58:	f000 fcf8 	bl	800354c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	2140      	movs	r1, #64	; 0x40
 8002b60:	4819      	ldr	r0, [pc, #100]	; (8002bc8 <MX_GPIO_Init+0xfc>)
 8002b62:	f000 fcf3 	bl	800354c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002b66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002b6c:	4b17      	ldr	r3, [pc, #92]	; (8002bcc <MX_GPIO_Init+0x100>)
 8002b6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b70:	2300      	movs	r3, #0
 8002b72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002b74:	f107 0314 	add.w	r3, r7, #20
 8002b78:	4619      	mov	r1, r3
 8002b7a:	4812      	ldr	r0, [pc, #72]	; (8002bc4 <MX_GPIO_Init+0xf8>)
 8002b7c:	f000 fb64 	bl	8003248 <HAL_GPIO_Init>

  /*Configure GPIO pin : CSN_Pin */
  GPIO_InitStruct.Pin = CSN_Pin;
 8002b80:	2380      	movs	r3, #128	; 0x80
 8002b82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b84:	2301      	movs	r3, #1
 8002b86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CSN_GPIO_Port, &GPIO_InitStruct);
 8002b90:	f107 0314 	add.w	r3, r7, #20
 8002b94:	4619      	mov	r1, r3
 8002b96:	480b      	ldr	r0, [pc, #44]	; (8002bc4 <MX_GPIO_Init+0xf8>)
 8002b98:	f000 fb56 	bl	8003248 <HAL_GPIO_Init>

  /*Configure GPIO pin : CE_Pin */
  GPIO_InitStruct.Pin = CE_Pin;
 8002b9c:	2340      	movs	r3, #64	; 0x40
 8002b9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CE_GPIO_Port, &GPIO_InitStruct);
 8002bac:	f107 0314 	add.w	r3, r7, #20
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	4805      	ldr	r0, [pc, #20]	; (8002bc8 <MX_GPIO_Init+0xfc>)
 8002bb4:	f000 fb48 	bl	8003248 <HAL_GPIO_Init>

}
 8002bb8:	bf00      	nop
 8002bba:	3728      	adds	r7, #40	; 0x28
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	40023800 	.word	0x40023800
 8002bc4:	40020800 	.word	0x40020800
 8002bc8:	40020400 	.word	0x40020400
 8002bcc:	10210000 	.word	0x10210000

08002bd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002bd4:	bf00      	nop
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
	...

08002be0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002be6:	2300      	movs	r3, #0
 8002be8:	607b      	str	r3, [r7, #4]
 8002bea:	4b10      	ldr	r3, [pc, #64]	; (8002c2c <HAL_MspInit+0x4c>)
 8002bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bee:	4a0f      	ldr	r2, [pc, #60]	; (8002c2c <HAL_MspInit+0x4c>)
 8002bf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bf4:	6453      	str	r3, [r2, #68]	; 0x44
 8002bf6:	4b0d      	ldr	r3, [pc, #52]	; (8002c2c <HAL_MspInit+0x4c>)
 8002bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bfe:	607b      	str	r3, [r7, #4]
 8002c00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c02:	2300      	movs	r3, #0
 8002c04:	603b      	str	r3, [r7, #0]
 8002c06:	4b09      	ldr	r3, [pc, #36]	; (8002c2c <HAL_MspInit+0x4c>)
 8002c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0a:	4a08      	ldr	r2, [pc, #32]	; (8002c2c <HAL_MspInit+0x4c>)
 8002c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c10:	6413      	str	r3, [r2, #64]	; 0x40
 8002c12:	4b06      	ldr	r3, [pc, #24]	; (8002c2c <HAL_MspInit+0x4c>)
 8002c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c1a:	603b      	str	r3, [r7, #0]
 8002c1c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002c1e:	2007      	movs	r0, #7
 8002c20:	f000 fade 	bl	80031e0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c24:	bf00      	nop
 8002c26:	3708      	adds	r7, #8
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	40023800 	.word	0x40023800

08002c30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b08a      	sub	sp, #40	; 0x28
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c38:	f107 0314 	add.w	r3, r7, #20
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	601a      	str	r2, [r3, #0]
 8002c40:	605a      	str	r2, [r3, #4]
 8002c42:	609a      	str	r2, [r3, #8]
 8002c44:	60da      	str	r2, [r3, #12]
 8002c46:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a28      	ldr	r2, [pc, #160]	; (8002cf0 <HAL_I2C_MspInit+0xc0>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d14a      	bne.n	8002ce8 <HAL_I2C_MspInit+0xb8>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c52:	2300      	movs	r3, #0
 8002c54:	613b      	str	r3, [r7, #16]
 8002c56:	4b27      	ldr	r3, [pc, #156]	; (8002cf4 <HAL_I2C_MspInit+0xc4>)
 8002c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5a:	4a26      	ldr	r2, [pc, #152]	; (8002cf4 <HAL_I2C_MspInit+0xc4>)
 8002c5c:	f043 0301 	orr.w	r3, r3, #1
 8002c60:	6313      	str	r3, [r2, #48]	; 0x30
 8002c62:	4b24      	ldr	r3, [pc, #144]	; (8002cf4 <HAL_I2C_MspInit+0xc4>)
 8002c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c66:	f003 0301 	and.w	r3, r3, #1
 8002c6a:	613b      	str	r3, [r7, #16]
 8002c6c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c6e:	2300      	movs	r3, #0
 8002c70:	60fb      	str	r3, [r7, #12]
 8002c72:	4b20      	ldr	r3, [pc, #128]	; (8002cf4 <HAL_I2C_MspInit+0xc4>)
 8002c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c76:	4a1f      	ldr	r2, [pc, #124]	; (8002cf4 <HAL_I2C_MspInit+0xc4>)
 8002c78:	f043 0302 	orr.w	r3, r3, #2
 8002c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c7e:	4b1d      	ldr	r3, [pc, #116]	; (8002cf4 <HAL_I2C_MspInit+0xc4>)
 8002c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	60fb      	str	r3, [r7, #12]
 8002c88:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration    
    PA8     ------> I2C3_SCL
    PB4     ------> I2C3_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002c8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c90:	2312      	movs	r3, #18
 8002c92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c94:	2301      	movs	r3, #1
 8002c96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002c9c:	2304      	movs	r3, #4
 8002c9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ca0:	f107 0314 	add.w	r3, r7, #20
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	4814      	ldr	r0, [pc, #80]	; (8002cf8 <HAL_I2C_MspInit+0xc8>)
 8002ca8:	f000 face 	bl	8003248 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002cac:	2310      	movs	r3, #16
 8002cae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cb0:	2312      	movs	r3, #18
 8002cb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8002cbc:	2309      	movs	r3, #9
 8002cbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cc0:	f107 0314 	add.w	r3, r7, #20
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	480d      	ldr	r0, [pc, #52]	; (8002cfc <HAL_I2C_MspInit+0xcc>)
 8002cc8:	f000 fabe 	bl	8003248 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002ccc:	2300      	movs	r3, #0
 8002cce:	60bb      	str	r3, [r7, #8]
 8002cd0:	4b08      	ldr	r3, [pc, #32]	; (8002cf4 <HAL_I2C_MspInit+0xc4>)
 8002cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd4:	4a07      	ldr	r2, [pc, #28]	; (8002cf4 <HAL_I2C_MspInit+0xc4>)
 8002cd6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002cda:	6413      	str	r3, [r2, #64]	; 0x40
 8002cdc:	4b05      	ldr	r3, [pc, #20]	; (8002cf4 <HAL_I2C_MspInit+0xc4>)
 8002cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ce4:	60bb      	str	r3, [r7, #8]
 8002ce6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002ce8:	bf00      	nop
 8002cea:	3728      	adds	r7, #40	; 0x28
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	40005c00 	.word	0x40005c00
 8002cf4:	40023800 	.word	0x40023800
 8002cf8:	40020000 	.word	0x40020000
 8002cfc:	40020400 	.word	0x40020400

08002d00 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b08a      	sub	sp, #40	; 0x28
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d08:	f107 0314 	add.w	r3, r7, #20
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	601a      	str	r2, [r3, #0]
 8002d10:	605a      	str	r2, [r3, #4]
 8002d12:	609a      	str	r2, [r3, #8]
 8002d14:	60da      	str	r2, [r3, #12]
 8002d16:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a19      	ldr	r2, [pc, #100]	; (8002d84 <HAL_SPI_MspInit+0x84>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d12b      	bne.n	8002d7a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d22:	2300      	movs	r3, #0
 8002d24:	613b      	str	r3, [r7, #16]
 8002d26:	4b18      	ldr	r3, [pc, #96]	; (8002d88 <HAL_SPI_MspInit+0x88>)
 8002d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2a:	4a17      	ldr	r2, [pc, #92]	; (8002d88 <HAL_SPI_MspInit+0x88>)
 8002d2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d30:	6453      	str	r3, [r2, #68]	; 0x44
 8002d32:	4b15      	ldr	r3, [pc, #84]	; (8002d88 <HAL_SPI_MspInit+0x88>)
 8002d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d3a:	613b      	str	r3, [r7, #16]
 8002d3c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d3e:	2300      	movs	r3, #0
 8002d40:	60fb      	str	r3, [r7, #12]
 8002d42:	4b11      	ldr	r3, [pc, #68]	; (8002d88 <HAL_SPI_MspInit+0x88>)
 8002d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d46:	4a10      	ldr	r2, [pc, #64]	; (8002d88 <HAL_SPI_MspInit+0x88>)
 8002d48:	f043 0301 	orr.w	r3, r3, #1
 8002d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d4e:	4b0e      	ldr	r3, [pc, #56]	; (8002d88 <HAL_SPI_MspInit+0x88>)
 8002d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d52:	f003 0301 	and.w	r3, r3, #1
 8002d56:	60fb      	str	r3, [r7, #12]
 8002d58:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002d5a:	23e0      	movs	r3, #224	; 0xe0
 8002d5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d5e:	2302      	movs	r3, #2
 8002d60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d62:	2300      	movs	r3, #0
 8002d64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d66:	2303      	movs	r3, #3
 8002d68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002d6a:	2305      	movs	r3, #5
 8002d6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d6e:	f107 0314 	add.w	r3, r7, #20
 8002d72:	4619      	mov	r1, r3
 8002d74:	4805      	ldr	r0, [pc, #20]	; (8002d8c <HAL_SPI_MspInit+0x8c>)
 8002d76:	f000 fa67 	bl	8003248 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002d7a:	bf00      	nop
 8002d7c:	3728      	adds	r7, #40	; 0x28
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	40013000 	.word	0x40013000
 8002d88:	40023800 	.word	0x40023800
 8002d8c:	40020000 	.word	0x40020000

08002d90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b08a      	sub	sp, #40	; 0x28
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d98:	f107 0314 	add.w	r3, r7, #20
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	601a      	str	r2, [r3, #0]
 8002da0:	605a      	str	r2, [r3, #4]
 8002da2:	609a      	str	r2, [r3, #8]
 8002da4:	60da      	str	r2, [r3, #12]
 8002da6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a19      	ldr	r2, [pc, #100]	; (8002e14 <HAL_UART_MspInit+0x84>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d12b      	bne.n	8002e0a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002db2:	2300      	movs	r3, #0
 8002db4:	613b      	str	r3, [r7, #16]
 8002db6:	4b18      	ldr	r3, [pc, #96]	; (8002e18 <HAL_UART_MspInit+0x88>)
 8002db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dba:	4a17      	ldr	r2, [pc, #92]	; (8002e18 <HAL_UART_MspInit+0x88>)
 8002dbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dc0:	6413      	str	r3, [r2, #64]	; 0x40
 8002dc2:	4b15      	ldr	r3, [pc, #84]	; (8002e18 <HAL_UART_MspInit+0x88>)
 8002dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dca:	613b      	str	r3, [r7, #16]
 8002dcc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dce:	2300      	movs	r3, #0
 8002dd0:	60fb      	str	r3, [r7, #12]
 8002dd2:	4b11      	ldr	r3, [pc, #68]	; (8002e18 <HAL_UART_MspInit+0x88>)
 8002dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd6:	4a10      	ldr	r2, [pc, #64]	; (8002e18 <HAL_UART_MspInit+0x88>)
 8002dd8:	f043 0301 	orr.w	r3, r3, #1
 8002ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8002dde:	4b0e      	ldr	r3, [pc, #56]	; (8002e18 <HAL_UART_MspInit+0x88>)
 8002de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	60fb      	str	r3, [r7, #12]
 8002de8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002dea:	230c      	movs	r3, #12
 8002dec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dee:	2302      	movs	r3, #2
 8002df0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df2:	2300      	movs	r3, #0
 8002df4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002df6:	2300      	movs	r3, #0
 8002df8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002dfa:	2307      	movs	r3, #7
 8002dfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dfe:	f107 0314 	add.w	r3, r7, #20
 8002e02:	4619      	mov	r1, r3
 8002e04:	4805      	ldr	r0, [pc, #20]	; (8002e1c <HAL_UART_MspInit+0x8c>)
 8002e06:	f000 fa1f 	bl	8003248 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002e0a:	bf00      	nop
 8002e0c:	3728      	adds	r7, #40	; 0x28
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	40004400 	.word	0x40004400
 8002e18:	40023800 	.word	0x40023800
 8002e1c:	40020000 	.word	0x40020000

08002e20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002e24:	bf00      	nop
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr

08002e2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e2e:	b480      	push	{r7}
 8002e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e32:	e7fe      	b.n	8002e32 <HardFault_Handler+0x4>

08002e34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e38:	e7fe      	b.n	8002e38 <MemManage_Handler+0x4>

08002e3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e3e:	e7fe      	b.n	8002e3e <BusFault_Handler+0x4>

08002e40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e40:	b480      	push	{r7}
 8002e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e44:	e7fe      	b.n	8002e44 <UsageFault_Handler+0x4>

08002e46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e46:	b480      	push	{r7}
 8002e48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e4a:	bf00      	nop
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e54:	b480      	push	{r7}
 8002e56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e58:	bf00      	nop
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr

08002e62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e62:	b480      	push	{r7}
 8002e64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e66:	bf00      	nop
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr

08002e70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e74:	f000 f8c0 	bl	8002ff8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e78:	bf00      	nop
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002e84:	4b11      	ldr	r3, [pc, #68]	; (8002ecc <_sbrk+0x50>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d102      	bne.n	8002e92 <_sbrk+0x16>
		heap_end = &end;
 8002e8c:	4b0f      	ldr	r3, [pc, #60]	; (8002ecc <_sbrk+0x50>)
 8002e8e:	4a10      	ldr	r2, [pc, #64]	; (8002ed0 <_sbrk+0x54>)
 8002e90:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002e92:	4b0e      	ldr	r3, [pc, #56]	; (8002ecc <_sbrk+0x50>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002e98:	4b0c      	ldr	r3, [pc, #48]	; (8002ecc <_sbrk+0x50>)
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	466a      	mov	r2, sp
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d907      	bls.n	8002eb6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002ea6:	f002 ff3b 	bl	8005d20 <__errno>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	230c      	movs	r3, #12
 8002eae:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002eb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002eb4:	e006      	b.n	8002ec4 <_sbrk+0x48>
	}

	heap_end += incr;
 8002eb6:	4b05      	ldr	r3, [pc, #20]	; (8002ecc <_sbrk+0x50>)
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4413      	add	r3, r2
 8002ebe:	4a03      	ldr	r2, [pc, #12]	; (8002ecc <_sbrk+0x50>)
 8002ec0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3710      	adds	r7, #16
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	200002bc 	.word	0x200002bc
 8002ed0:	200003f0 	.word	0x200003f0

08002ed4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ed8:	4b08      	ldr	r3, [pc, #32]	; (8002efc <SystemInit+0x28>)
 8002eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ede:	4a07      	ldr	r2, [pc, #28]	; (8002efc <SystemInit+0x28>)
 8002ee0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ee4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002ee8:	4b04      	ldr	r3, [pc, #16]	; (8002efc <SystemInit+0x28>)
 8002eea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002eee:	609a      	str	r2, [r3, #8]
#endif
}
 8002ef0:	bf00      	nop
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	e000ed00 	.word	0xe000ed00

08002f00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002f00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f38 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002f04:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002f06:	e003      	b.n	8002f10 <LoopCopyDataInit>

08002f08 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002f08:	4b0c      	ldr	r3, [pc, #48]	; (8002f3c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002f0a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002f0c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002f0e:	3104      	adds	r1, #4

08002f10 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002f10:	480b      	ldr	r0, [pc, #44]	; (8002f40 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002f12:	4b0c      	ldr	r3, [pc, #48]	; (8002f44 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002f14:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002f16:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002f18:	d3f6      	bcc.n	8002f08 <CopyDataInit>
  ldr  r2, =_sbss
 8002f1a:	4a0b      	ldr	r2, [pc, #44]	; (8002f48 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002f1c:	e002      	b.n	8002f24 <LoopFillZerobss>

08002f1e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002f1e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002f20:	f842 3b04 	str.w	r3, [r2], #4

08002f24 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002f24:	4b09      	ldr	r3, [pc, #36]	; (8002f4c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002f26:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002f28:	d3f9      	bcc.n	8002f1e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002f2a:	f7ff ffd3 	bl	8002ed4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f2e:	f002 fefd 	bl	8005d2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f32:	f7ff fbdd 	bl	80026f0 <main>
  bx  lr    
 8002f36:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002f38:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8002f3c:	0800a99c 	.word	0x0800a99c
  ldr  r0, =_sdata
 8002f40:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002f44:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8002f48:	200001e8 	.word	0x200001e8
  ldr  r3, = _ebss
 8002f4c:	200003f0 	.word	0x200003f0

08002f50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f50:	e7fe      	b.n	8002f50 <ADC_IRQHandler>
	...

08002f54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f58:	4b0e      	ldr	r3, [pc, #56]	; (8002f94 <HAL_Init+0x40>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a0d      	ldr	r2, [pc, #52]	; (8002f94 <HAL_Init+0x40>)
 8002f5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f64:	4b0b      	ldr	r3, [pc, #44]	; (8002f94 <HAL_Init+0x40>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a0a      	ldr	r2, [pc, #40]	; (8002f94 <HAL_Init+0x40>)
 8002f6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f70:	4b08      	ldr	r3, [pc, #32]	; (8002f94 <HAL_Init+0x40>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a07      	ldr	r2, [pc, #28]	; (8002f94 <HAL_Init+0x40>)
 8002f76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f7c:	2003      	movs	r0, #3
 8002f7e:	f000 f92f 	bl	80031e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f82:	2000      	movs	r0, #0
 8002f84:	f000 f808 	bl	8002f98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f88:	f7ff fe2a 	bl	8002be0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	40023c00 	.word	0x40023c00

08002f98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002fa0:	4b12      	ldr	r3, [pc, #72]	; (8002fec <HAL_InitTick+0x54>)
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	4b12      	ldr	r3, [pc, #72]	; (8002ff0 <HAL_InitTick+0x58>)
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	4619      	mov	r1, r3
 8002faa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fae:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f000 f939 	bl	800322e <HAL_SYSTICK_Config>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d001      	beq.n	8002fc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e00e      	b.n	8002fe4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2b0f      	cmp	r3, #15
 8002fca:	d80a      	bhi.n	8002fe2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fcc:	2200      	movs	r2, #0
 8002fce:	6879      	ldr	r1, [r7, #4]
 8002fd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002fd4:	f000 f90f 	bl	80031f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002fd8:	4a06      	ldr	r2, [pc, #24]	; (8002ff4 <HAL_InitTick+0x5c>)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	e000      	b.n	8002fe4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3708      	adds	r7, #8
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	20000008 	.word	0x20000008
 8002ff0:	20000010 	.word	0x20000010
 8002ff4:	2000000c 	.word	0x2000000c

08002ff8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ffc:	4b06      	ldr	r3, [pc, #24]	; (8003018 <HAL_IncTick+0x20>)
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	461a      	mov	r2, r3
 8003002:	4b06      	ldr	r3, [pc, #24]	; (800301c <HAL_IncTick+0x24>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4413      	add	r3, r2
 8003008:	4a04      	ldr	r2, [pc, #16]	; (800301c <HAL_IncTick+0x24>)
 800300a:	6013      	str	r3, [r2, #0]
}
 800300c:	bf00      	nop
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	20000010 	.word	0x20000010
 800301c:	200003e8 	.word	0x200003e8

08003020 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0
  return uwTick;
 8003024:	4b03      	ldr	r3, [pc, #12]	; (8003034 <HAL_GetTick+0x14>)
 8003026:	681b      	ldr	r3, [r3, #0]
}
 8003028:	4618      	mov	r0, r3
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	200003e8 	.word	0x200003e8

08003038 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003040:	f7ff ffee 	bl	8003020 <HAL_GetTick>
 8003044:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003050:	d005      	beq.n	800305e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003052:	4b09      	ldr	r3, [pc, #36]	; (8003078 <HAL_Delay+0x40>)
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	461a      	mov	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	4413      	add	r3, r2
 800305c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800305e:	bf00      	nop
 8003060:	f7ff ffde 	bl	8003020 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	68fa      	ldr	r2, [r7, #12]
 800306c:	429a      	cmp	r2, r3
 800306e:	d8f7      	bhi.n	8003060 <HAL_Delay+0x28>
  {
  }
}
 8003070:	bf00      	nop
 8003072:	3710      	adds	r7, #16
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	20000010 	.word	0x20000010

0800307c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800307c:	b480      	push	{r7}
 800307e:	b085      	sub	sp, #20
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f003 0307 	and.w	r3, r3, #7
 800308a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800308c:	4b0c      	ldr	r3, [pc, #48]	; (80030c0 <__NVIC_SetPriorityGrouping+0x44>)
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003092:	68ba      	ldr	r2, [r7, #8]
 8003094:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003098:	4013      	ands	r3, r2
 800309a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030ae:	4a04      	ldr	r2, [pc, #16]	; (80030c0 <__NVIC_SetPriorityGrouping+0x44>)
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	60d3      	str	r3, [r2, #12]
}
 80030b4:	bf00      	nop
 80030b6:	3714      	adds	r7, #20
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr
 80030c0:	e000ed00 	.word	0xe000ed00

080030c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030c8:	4b04      	ldr	r3, [pc, #16]	; (80030dc <__NVIC_GetPriorityGrouping+0x18>)
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	0a1b      	lsrs	r3, r3, #8
 80030ce:	f003 0307 	and.w	r3, r3, #7
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr
 80030dc:	e000ed00 	.word	0xe000ed00

080030e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	4603      	mov	r3, r0
 80030e8:	6039      	str	r1, [r7, #0]
 80030ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	db0a      	blt.n	800310a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	b2da      	uxtb	r2, r3
 80030f8:	490c      	ldr	r1, [pc, #48]	; (800312c <__NVIC_SetPriority+0x4c>)
 80030fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030fe:	0112      	lsls	r2, r2, #4
 8003100:	b2d2      	uxtb	r2, r2
 8003102:	440b      	add	r3, r1
 8003104:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003108:	e00a      	b.n	8003120 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	b2da      	uxtb	r2, r3
 800310e:	4908      	ldr	r1, [pc, #32]	; (8003130 <__NVIC_SetPriority+0x50>)
 8003110:	79fb      	ldrb	r3, [r7, #7]
 8003112:	f003 030f 	and.w	r3, r3, #15
 8003116:	3b04      	subs	r3, #4
 8003118:	0112      	lsls	r2, r2, #4
 800311a:	b2d2      	uxtb	r2, r2
 800311c:	440b      	add	r3, r1
 800311e:	761a      	strb	r2, [r3, #24]
}
 8003120:	bf00      	nop
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr
 800312c:	e000e100 	.word	0xe000e100
 8003130:	e000ed00 	.word	0xe000ed00

08003134 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003134:	b480      	push	{r7}
 8003136:	b089      	sub	sp, #36	; 0x24
 8003138:	af00      	add	r7, sp, #0
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	60b9      	str	r1, [r7, #8]
 800313e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f003 0307 	and.w	r3, r3, #7
 8003146:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	f1c3 0307 	rsb	r3, r3, #7
 800314e:	2b04      	cmp	r3, #4
 8003150:	bf28      	it	cs
 8003152:	2304      	movcs	r3, #4
 8003154:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	3304      	adds	r3, #4
 800315a:	2b06      	cmp	r3, #6
 800315c:	d902      	bls.n	8003164 <NVIC_EncodePriority+0x30>
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	3b03      	subs	r3, #3
 8003162:	e000      	b.n	8003166 <NVIC_EncodePriority+0x32>
 8003164:	2300      	movs	r3, #0
 8003166:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003168:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	fa02 f303 	lsl.w	r3, r2, r3
 8003172:	43da      	mvns	r2, r3
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	401a      	ands	r2, r3
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800317c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	fa01 f303 	lsl.w	r3, r1, r3
 8003186:	43d9      	mvns	r1, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800318c:	4313      	orrs	r3, r2
         );
}
 800318e:	4618      	mov	r0, r3
 8003190:	3724      	adds	r7, #36	; 0x24
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
	...

0800319c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	3b01      	subs	r3, #1
 80031a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031ac:	d301      	bcc.n	80031b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031ae:	2301      	movs	r3, #1
 80031b0:	e00f      	b.n	80031d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031b2:	4a0a      	ldr	r2, [pc, #40]	; (80031dc <SysTick_Config+0x40>)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	3b01      	subs	r3, #1
 80031b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031ba:	210f      	movs	r1, #15
 80031bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80031c0:	f7ff ff8e 	bl	80030e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031c4:	4b05      	ldr	r3, [pc, #20]	; (80031dc <SysTick_Config+0x40>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031ca:	4b04      	ldr	r3, [pc, #16]	; (80031dc <SysTick_Config+0x40>)
 80031cc:	2207      	movs	r2, #7
 80031ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3708      	adds	r7, #8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	e000e010 	.word	0xe000e010

080031e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f7ff ff47 	bl	800307c <__NVIC_SetPriorityGrouping>
}
 80031ee:	bf00      	nop
 80031f0:	3708      	adds	r7, #8
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}

080031f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031f6:	b580      	push	{r7, lr}
 80031f8:	b086      	sub	sp, #24
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	4603      	mov	r3, r0
 80031fe:	60b9      	str	r1, [r7, #8]
 8003200:	607a      	str	r2, [r7, #4]
 8003202:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003204:	2300      	movs	r3, #0
 8003206:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003208:	f7ff ff5c 	bl	80030c4 <__NVIC_GetPriorityGrouping>
 800320c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	68b9      	ldr	r1, [r7, #8]
 8003212:	6978      	ldr	r0, [r7, #20]
 8003214:	f7ff ff8e 	bl	8003134 <NVIC_EncodePriority>
 8003218:	4602      	mov	r2, r0
 800321a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800321e:	4611      	mov	r1, r2
 8003220:	4618      	mov	r0, r3
 8003222:	f7ff ff5d 	bl	80030e0 <__NVIC_SetPriority>
}
 8003226:	bf00      	nop
 8003228:	3718      	adds	r7, #24
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}

0800322e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800322e:	b580      	push	{r7, lr}
 8003230:	b082      	sub	sp, #8
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f7ff ffb0 	bl	800319c <SysTick_Config>
 800323c:	4603      	mov	r3, r0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3708      	adds	r7, #8
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
	...

08003248 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003248:	b480      	push	{r7}
 800324a:	b089      	sub	sp, #36	; 0x24
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003252:	2300      	movs	r3, #0
 8003254:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003256:	2300      	movs	r3, #0
 8003258:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800325a:	2300      	movs	r3, #0
 800325c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800325e:	2300      	movs	r3, #0
 8003260:	61fb      	str	r3, [r7, #28]
 8003262:	e159      	b.n	8003518 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003264:	2201      	movs	r2, #1
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	fa02 f303 	lsl.w	r3, r2, r3
 800326c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	4013      	ands	r3, r2
 8003276:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003278:	693a      	ldr	r2, [r7, #16]
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	429a      	cmp	r2, r3
 800327e:	f040 8148 	bne.w	8003512 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	2b01      	cmp	r3, #1
 8003288:	d00b      	beq.n	80032a2 <HAL_GPIO_Init+0x5a>
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	2b02      	cmp	r3, #2
 8003290:	d007      	beq.n	80032a2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003296:	2b11      	cmp	r3, #17
 8003298:	d003      	beq.n	80032a2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	2b12      	cmp	r3, #18
 80032a0:	d130      	bne.n	8003304 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	005b      	lsls	r3, r3, #1
 80032ac:	2203      	movs	r2, #3
 80032ae:	fa02 f303 	lsl.w	r3, r2, r3
 80032b2:	43db      	mvns	r3, r3
 80032b4:	69ba      	ldr	r2, [r7, #24]
 80032b6:	4013      	ands	r3, r2
 80032b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	68da      	ldr	r2, [r3, #12]
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	fa02 f303 	lsl.w	r3, r2, r3
 80032c6:	69ba      	ldr	r2, [r7, #24]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	69ba      	ldr	r2, [r7, #24]
 80032d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032d8:	2201      	movs	r2, #1
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	fa02 f303 	lsl.w	r3, r2, r3
 80032e0:	43db      	mvns	r3, r3
 80032e2:	69ba      	ldr	r2, [r7, #24]
 80032e4:	4013      	ands	r3, r2
 80032e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	091b      	lsrs	r3, r3, #4
 80032ee:	f003 0201 	and.w	r2, r3, #1
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	fa02 f303 	lsl.w	r3, r2, r3
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	69ba      	ldr	r2, [r7, #24]
 8003302:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	005b      	lsls	r3, r3, #1
 800330e:	2203      	movs	r2, #3
 8003310:	fa02 f303 	lsl.w	r3, r2, r3
 8003314:	43db      	mvns	r3, r3
 8003316:	69ba      	ldr	r2, [r7, #24]
 8003318:	4013      	ands	r3, r2
 800331a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	689a      	ldr	r2, [r3, #8]
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	005b      	lsls	r3, r3, #1
 8003324:	fa02 f303 	lsl.w	r3, r2, r3
 8003328:	69ba      	ldr	r2, [r7, #24]
 800332a:	4313      	orrs	r3, r2
 800332c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	69ba      	ldr	r2, [r7, #24]
 8003332:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	2b02      	cmp	r3, #2
 800333a:	d003      	beq.n	8003344 <HAL_GPIO_Init+0xfc>
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	2b12      	cmp	r3, #18
 8003342:	d123      	bne.n	800338c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	08da      	lsrs	r2, r3, #3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	3208      	adds	r2, #8
 800334c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003350:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	f003 0307 	and.w	r3, r3, #7
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	220f      	movs	r2, #15
 800335c:	fa02 f303 	lsl.w	r3, r2, r3
 8003360:	43db      	mvns	r3, r3
 8003362:	69ba      	ldr	r2, [r7, #24]
 8003364:	4013      	ands	r3, r2
 8003366:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	691a      	ldr	r2, [r3, #16]
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	f003 0307 	and.w	r3, r3, #7
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	fa02 f303 	lsl.w	r3, r2, r3
 8003378:	69ba      	ldr	r2, [r7, #24]
 800337a:	4313      	orrs	r3, r2
 800337c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	08da      	lsrs	r2, r3, #3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	3208      	adds	r2, #8
 8003386:	69b9      	ldr	r1, [r7, #24]
 8003388:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	005b      	lsls	r3, r3, #1
 8003396:	2203      	movs	r2, #3
 8003398:	fa02 f303 	lsl.w	r3, r2, r3
 800339c:	43db      	mvns	r3, r3
 800339e:	69ba      	ldr	r2, [r7, #24]
 80033a0:	4013      	ands	r3, r2
 80033a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f003 0203 	and.w	r2, r3, #3
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	005b      	lsls	r3, r3, #1
 80033b0:	fa02 f303 	lsl.w	r3, r2, r3
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	69ba      	ldr	r2, [r7, #24]
 80033be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	f000 80a2 	beq.w	8003512 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033ce:	2300      	movs	r3, #0
 80033d0:	60fb      	str	r3, [r7, #12]
 80033d2:	4b56      	ldr	r3, [pc, #344]	; (800352c <HAL_GPIO_Init+0x2e4>)
 80033d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d6:	4a55      	ldr	r2, [pc, #340]	; (800352c <HAL_GPIO_Init+0x2e4>)
 80033d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033dc:	6453      	str	r3, [r2, #68]	; 0x44
 80033de:	4b53      	ldr	r3, [pc, #332]	; (800352c <HAL_GPIO_Init+0x2e4>)
 80033e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033e6:	60fb      	str	r3, [r7, #12]
 80033e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033ea:	4a51      	ldr	r2, [pc, #324]	; (8003530 <HAL_GPIO_Init+0x2e8>)
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	089b      	lsrs	r3, r3, #2
 80033f0:	3302      	adds	r3, #2
 80033f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	f003 0303 	and.w	r3, r3, #3
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	220f      	movs	r2, #15
 8003402:	fa02 f303 	lsl.w	r3, r2, r3
 8003406:	43db      	mvns	r3, r3
 8003408:	69ba      	ldr	r2, [r7, #24]
 800340a:	4013      	ands	r3, r2
 800340c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a48      	ldr	r2, [pc, #288]	; (8003534 <HAL_GPIO_Init+0x2ec>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d019      	beq.n	800344a <HAL_GPIO_Init+0x202>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a47      	ldr	r2, [pc, #284]	; (8003538 <HAL_GPIO_Init+0x2f0>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d013      	beq.n	8003446 <HAL_GPIO_Init+0x1fe>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a46      	ldr	r2, [pc, #280]	; (800353c <HAL_GPIO_Init+0x2f4>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d00d      	beq.n	8003442 <HAL_GPIO_Init+0x1fa>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a45      	ldr	r2, [pc, #276]	; (8003540 <HAL_GPIO_Init+0x2f8>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d007      	beq.n	800343e <HAL_GPIO_Init+0x1f6>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a44      	ldr	r2, [pc, #272]	; (8003544 <HAL_GPIO_Init+0x2fc>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d101      	bne.n	800343a <HAL_GPIO_Init+0x1f2>
 8003436:	2304      	movs	r3, #4
 8003438:	e008      	b.n	800344c <HAL_GPIO_Init+0x204>
 800343a:	2307      	movs	r3, #7
 800343c:	e006      	b.n	800344c <HAL_GPIO_Init+0x204>
 800343e:	2303      	movs	r3, #3
 8003440:	e004      	b.n	800344c <HAL_GPIO_Init+0x204>
 8003442:	2302      	movs	r3, #2
 8003444:	e002      	b.n	800344c <HAL_GPIO_Init+0x204>
 8003446:	2301      	movs	r3, #1
 8003448:	e000      	b.n	800344c <HAL_GPIO_Init+0x204>
 800344a:	2300      	movs	r3, #0
 800344c:	69fa      	ldr	r2, [r7, #28]
 800344e:	f002 0203 	and.w	r2, r2, #3
 8003452:	0092      	lsls	r2, r2, #2
 8003454:	4093      	lsls	r3, r2
 8003456:	69ba      	ldr	r2, [r7, #24]
 8003458:	4313      	orrs	r3, r2
 800345a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800345c:	4934      	ldr	r1, [pc, #208]	; (8003530 <HAL_GPIO_Init+0x2e8>)
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	089b      	lsrs	r3, r3, #2
 8003462:	3302      	adds	r3, #2
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800346a:	4b37      	ldr	r3, [pc, #220]	; (8003548 <HAL_GPIO_Init+0x300>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	43db      	mvns	r3, r3
 8003474:	69ba      	ldr	r2, [r7, #24]
 8003476:	4013      	ands	r3, r2
 8003478:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d003      	beq.n	800348e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003486:	69ba      	ldr	r2, [r7, #24]
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	4313      	orrs	r3, r2
 800348c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800348e:	4a2e      	ldr	r2, [pc, #184]	; (8003548 <HAL_GPIO_Init+0x300>)
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003494:	4b2c      	ldr	r3, [pc, #176]	; (8003548 <HAL_GPIO_Init+0x300>)
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	43db      	mvns	r3, r3
 800349e:	69ba      	ldr	r2, [r7, #24]
 80034a0:	4013      	ands	r3, r2
 80034a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d003      	beq.n	80034b8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80034b0:	69ba      	ldr	r2, [r7, #24]
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034b8:	4a23      	ldr	r2, [pc, #140]	; (8003548 <HAL_GPIO_Init+0x300>)
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034be:	4b22      	ldr	r3, [pc, #136]	; (8003548 <HAL_GPIO_Init+0x300>)
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	43db      	mvns	r3, r3
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	4013      	ands	r3, r2
 80034cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d003      	beq.n	80034e2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80034da:	69ba      	ldr	r2, [r7, #24]
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	4313      	orrs	r3, r2
 80034e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80034e2:	4a19      	ldr	r2, [pc, #100]	; (8003548 <HAL_GPIO_Init+0x300>)
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034e8:	4b17      	ldr	r3, [pc, #92]	; (8003548 <HAL_GPIO_Init+0x300>)
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	43db      	mvns	r3, r3
 80034f2:	69ba      	ldr	r2, [r7, #24]
 80034f4:	4013      	ands	r3, r2
 80034f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d003      	beq.n	800350c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	4313      	orrs	r3, r2
 800350a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800350c:	4a0e      	ldr	r2, [pc, #56]	; (8003548 <HAL_GPIO_Init+0x300>)
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	3301      	adds	r3, #1
 8003516:	61fb      	str	r3, [r7, #28]
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	2b0f      	cmp	r3, #15
 800351c:	f67f aea2 	bls.w	8003264 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003520:	bf00      	nop
 8003522:	3724      	adds	r7, #36	; 0x24
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr
 800352c:	40023800 	.word	0x40023800
 8003530:	40013800 	.word	0x40013800
 8003534:	40020000 	.word	0x40020000
 8003538:	40020400 	.word	0x40020400
 800353c:	40020800 	.word	0x40020800
 8003540:	40020c00 	.word	0x40020c00
 8003544:	40021000 	.word	0x40021000
 8003548:	40013c00 	.word	0x40013c00

0800354c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	460b      	mov	r3, r1
 8003556:	807b      	strh	r3, [r7, #2]
 8003558:	4613      	mov	r3, r2
 800355a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800355c:	787b      	ldrb	r3, [r7, #1]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d003      	beq.n	800356a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003562:	887a      	ldrh	r2, [r7, #2]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003568:	e003      	b.n	8003572 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800356a:	887b      	ldrh	r3, [r7, #2]
 800356c:	041a      	lsls	r2, r3, #16
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	619a      	str	r2, [r3, #24]
}
 8003572:	bf00      	nop
 8003574:	370c      	adds	r7, #12
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
	...

08003580 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e11f      	b.n	80037d2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b00      	cmp	r3, #0
 800359c:	d106      	bne.n	80035ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f7ff fb42 	bl	8002c30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2224      	movs	r2, #36	; 0x24
 80035b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f022 0201 	bic.w	r2, r2, #1
 80035c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80035e4:	f001 f974 	bl	80048d0 <HAL_RCC_GetPCLK1Freq>
 80035e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	4a7b      	ldr	r2, [pc, #492]	; (80037dc <HAL_I2C_Init+0x25c>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d807      	bhi.n	8003604 <HAL_I2C_Init+0x84>
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	4a7a      	ldr	r2, [pc, #488]	; (80037e0 <HAL_I2C_Init+0x260>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	bf94      	ite	ls
 80035fc:	2301      	movls	r3, #1
 80035fe:	2300      	movhi	r3, #0
 8003600:	b2db      	uxtb	r3, r3
 8003602:	e006      	b.n	8003612 <HAL_I2C_Init+0x92>
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	4a77      	ldr	r2, [pc, #476]	; (80037e4 <HAL_I2C_Init+0x264>)
 8003608:	4293      	cmp	r3, r2
 800360a:	bf94      	ite	ls
 800360c:	2301      	movls	r3, #1
 800360e:	2300      	movhi	r3, #0
 8003610:	b2db      	uxtb	r3, r3
 8003612:	2b00      	cmp	r3, #0
 8003614:	d001      	beq.n	800361a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e0db      	b.n	80037d2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	4a72      	ldr	r2, [pc, #456]	; (80037e8 <HAL_I2C_Init+0x268>)
 800361e:	fba2 2303 	umull	r2, r3, r2, r3
 8003622:	0c9b      	lsrs	r3, r3, #18
 8003624:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	68ba      	ldr	r2, [r7, #8]
 8003636:	430a      	orrs	r2, r1
 8003638:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	6a1b      	ldr	r3, [r3, #32]
 8003640:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	4a64      	ldr	r2, [pc, #400]	; (80037dc <HAL_I2C_Init+0x25c>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d802      	bhi.n	8003654 <HAL_I2C_Init+0xd4>
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	3301      	adds	r3, #1
 8003652:	e009      	b.n	8003668 <HAL_I2C_Init+0xe8>
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800365a:	fb02 f303 	mul.w	r3, r2, r3
 800365e:	4a63      	ldr	r2, [pc, #396]	; (80037ec <HAL_I2C_Init+0x26c>)
 8003660:	fba2 2303 	umull	r2, r3, r2, r3
 8003664:	099b      	lsrs	r3, r3, #6
 8003666:	3301      	adds	r3, #1
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	6812      	ldr	r2, [r2, #0]
 800366c:	430b      	orrs	r3, r1
 800366e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	69db      	ldr	r3, [r3, #28]
 8003676:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800367a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	4956      	ldr	r1, [pc, #344]	; (80037dc <HAL_I2C_Init+0x25c>)
 8003684:	428b      	cmp	r3, r1
 8003686:	d80d      	bhi.n	80036a4 <HAL_I2C_Init+0x124>
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	1e59      	subs	r1, r3, #1
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	005b      	lsls	r3, r3, #1
 8003692:	fbb1 f3f3 	udiv	r3, r1, r3
 8003696:	3301      	adds	r3, #1
 8003698:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800369c:	2b04      	cmp	r3, #4
 800369e:	bf38      	it	cc
 80036a0:	2304      	movcc	r3, #4
 80036a2:	e04f      	b.n	8003744 <HAL_I2C_Init+0x1c4>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d111      	bne.n	80036d0 <HAL_I2C_Init+0x150>
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	1e58      	subs	r0, r3, #1
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6859      	ldr	r1, [r3, #4]
 80036b4:	460b      	mov	r3, r1
 80036b6:	005b      	lsls	r3, r3, #1
 80036b8:	440b      	add	r3, r1
 80036ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80036be:	3301      	adds	r3, #1
 80036c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	bf0c      	ite	eq
 80036c8:	2301      	moveq	r3, #1
 80036ca:	2300      	movne	r3, #0
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	e012      	b.n	80036f6 <HAL_I2C_Init+0x176>
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	1e58      	subs	r0, r3, #1
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6859      	ldr	r1, [r3, #4]
 80036d8:	460b      	mov	r3, r1
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	440b      	add	r3, r1
 80036de:	0099      	lsls	r1, r3, #2
 80036e0:	440b      	add	r3, r1
 80036e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80036e6:	3301      	adds	r3, #1
 80036e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	bf0c      	ite	eq
 80036f0:	2301      	moveq	r3, #1
 80036f2:	2300      	movne	r3, #0
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d001      	beq.n	80036fe <HAL_I2C_Init+0x17e>
 80036fa:	2301      	movs	r3, #1
 80036fc:	e022      	b.n	8003744 <HAL_I2C_Init+0x1c4>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d10e      	bne.n	8003724 <HAL_I2C_Init+0x1a4>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	1e58      	subs	r0, r3, #1
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6859      	ldr	r1, [r3, #4]
 800370e:	460b      	mov	r3, r1
 8003710:	005b      	lsls	r3, r3, #1
 8003712:	440b      	add	r3, r1
 8003714:	fbb0 f3f3 	udiv	r3, r0, r3
 8003718:	3301      	adds	r3, #1
 800371a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800371e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003722:	e00f      	b.n	8003744 <HAL_I2C_Init+0x1c4>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	1e58      	subs	r0, r3, #1
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6859      	ldr	r1, [r3, #4]
 800372c:	460b      	mov	r3, r1
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	440b      	add	r3, r1
 8003732:	0099      	lsls	r1, r3, #2
 8003734:	440b      	add	r3, r1
 8003736:	fbb0 f3f3 	udiv	r3, r0, r3
 800373a:	3301      	adds	r3, #1
 800373c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003740:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003744:	6879      	ldr	r1, [r7, #4]
 8003746:	6809      	ldr	r1, [r1, #0]
 8003748:	4313      	orrs	r3, r2
 800374a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	69da      	ldr	r2, [r3, #28]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a1b      	ldr	r3, [r3, #32]
 800375e:	431a      	orrs	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	430a      	orrs	r2, r1
 8003766:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003772:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	6911      	ldr	r1, [r2, #16]
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	68d2      	ldr	r2, [r2, #12]
 800377e:	4311      	orrs	r1, r2
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	6812      	ldr	r2, [r2, #0]
 8003784:	430b      	orrs	r3, r1
 8003786:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	695a      	ldr	r2, [r3, #20]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	431a      	orrs	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	430a      	orrs	r2, r1
 80037a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f042 0201 	orr.w	r2, r2, #1
 80037b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2220      	movs	r2, #32
 80037be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3710      	adds	r7, #16
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	000186a0 	.word	0x000186a0
 80037e0:	001e847f 	.word	0x001e847f
 80037e4:	003d08ff 	.word	0x003d08ff
 80037e8:	431bde83 	.word	0x431bde83
 80037ec:	10624dd3 	.word	0x10624dd3

080037f0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b088      	sub	sp, #32
 80037f4:	af02      	add	r7, sp, #8
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	607a      	str	r2, [r7, #4]
 80037fa:	461a      	mov	r2, r3
 80037fc:	460b      	mov	r3, r1
 80037fe:	817b      	strh	r3, [r7, #10]
 8003800:	4613      	mov	r3, r2
 8003802:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003804:	f7ff fc0c 	bl	8003020 <HAL_GetTick>
 8003808:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003810:	b2db      	uxtb	r3, r3
 8003812:	2b20      	cmp	r3, #32
 8003814:	f040 80e0 	bne.w	80039d8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	9300      	str	r3, [sp, #0]
 800381c:	2319      	movs	r3, #25
 800381e:	2201      	movs	r2, #1
 8003820:	4970      	ldr	r1, [pc, #448]	; (80039e4 <HAL_I2C_Master_Transmit+0x1f4>)
 8003822:	68f8      	ldr	r0, [r7, #12]
 8003824:	f000 fa92 	bl	8003d4c <I2C_WaitOnFlagUntilTimeout>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d001      	beq.n	8003832 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800382e:	2302      	movs	r3, #2
 8003830:	e0d3      	b.n	80039da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003838:	2b01      	cmp	r3, #1
 800383a:	d101      	bne.n	8003840 <HAL_I2C_Master_Transmit+0x50>
 800383c:	2302      	movs	r3, #2
 800383e:	e0cc      	b.n	80039da <HAL_I2C_Master_Transmit+0x1ea>
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	2b01      	cmp	r3, #1
 8003854:	d007      	beq.n	8003866 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f042 0201 	orr.w	r2, r2, #1
 8003864:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003874:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2221      	movs	r2, #33	; 0x21
 800387a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2210      	movs	r2, #16
 8003882:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2200      	movs	r2, #0
 800388a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	893a      	ldrh	r2, [r7, #8]
 8003896:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800389c:	b29a      	uxth	r2, r3
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	4a50      	ldr	r2, [pc, #320]	; (80039e8 <HAL_I2C_Master_Transmit+0x1f8>)
 80038a6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80038a8:	8979      	ldrh	r1, [r7, #10]
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	6a3a      	ldr	r2, [r7, #32]
 80038ae:	68f8      	ldr	r0, [r7, #12]
 80038b0:	f000 f9ca 	bl	8003c48 <I2C_MasterRequestWrite>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d001      	beq.n	80038be <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e08d      	b.n	80039da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038be:	2300      	movs	r3, #0
 80038c0:	613b      	str	r3, [r7, #16]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	695b      	ldr	r3, [r3, #20]
 80038c8:	613b      	str	r3, [r7, #16]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	699b      	ldr	r3, [r3, #24]
 80038d0:	613b      	str	r3, [r7, #16]
 80038d2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80038d4:	e066      	b.n	80039a4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038d6:	697a      	ldr	r2, [r7, #20]
 80038d8:	6a39      	ldr	r1, [r7, #32]
 80038da:	68f8      	ldr	r0, [r7, #12]
 80038dc:	f000 fb0c 	bl	8003ef8 <I2C_WaitOnTXEFlagUntilTimeout>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d00d      	beq.n	8003902 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ea:	2b04      	cmp	r3, #4
 80038ec:	d107      	bne.n	80038fe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038fc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e06b      	b.n	80039da <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003906:	781a      	ldrb	r2, [r3, #0]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003912:	1c5a      	adds	r2, r3, #1
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800391c:	b29b      	uxth	r3, r3
 800391e:	3b01      	subs	r3, #1
 8003920:	b29a      	uxth	r2, r3
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800392a:	3b01      	subs	r3, #1
 800392c:	b29a      	uxth	r2, r3
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	695b      	ldr	r3, [r3, #20]
 8003938:	f003 0304 	and.w	r3, r3, #4
 800393c:	2b04      	cmp	r3, #4
 800393e:	d11b      	bne.n	8003978 <HAL_I2C_Master_Transmit+0x188>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003944:	2b00      	cmp	r3, #0
 8003946:	d017      	beq.n	8003978 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394c:	781a      	ldrb	r2, [r3, #0]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003958:	1c5a      	adds	r2, r3, #1
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003962:	b29b      	uxth	r3, r3
 8003964:	3b01      	subs	r3, #1
 8003966:	b29a      	uxth	r2, r3
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003970:	3b01      	subs	r3, #1
 8003972:	b29a      	uxth	r2, r3
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003978:	697a      	ldr	r2, [r7, #20]
 800397a:	6a39      	ldr	r1, [r7, #32]
 800397c:	68f8      	ldr	r0, [r7, #12]
 800397e:	f000 fafc 	bl	8003f7a <I2C_WaitOnBTFFlagUntilTimeout>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d00d      	beq.n	80039a4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398c:	2b04      	cmp	r3, #4
 800398e:	d107      	bne.n	80039a0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800399e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e01a      	b.n	80039da <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d194      	bne.n	80038d6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2220      	movs	r2, #32
 80039c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80039d4:	2300      	movs	r3, #0
 80039d6:	e000      	b.n	80039da <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80039d8:	2302      	movs	r3, #2
  }
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3718      	adds	r7, #24
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	00100002 	.word	0x00100002
 80039e8:	ffff0000 	.word	0xffff0000

080039ec <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b08a      	sub	sp, #40	; 0x28
 80039f0:	af02      	add	r7, sp, #8
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	607a      	str	r2, [r7, #4]
 80039f6:	603b      	str	r3, [r7, #0]
 80039f8:	460b      	mov	r3, r1
 80039fa:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80039fc:	f7ff fb10 	bl	8003020 <HAL_GetTick>
 8003a00:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003a02:	2301      	movs	r3, #1
 8003a04:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b20      	cmp	r3, #32
 8003a10:	f040 8110 	bne.w	8003c34 <HAL_I2C_IsDeviceReady+0x248>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	9300      	str	r3, [sp, #0]
 8003a18:	2319      	movs	r3, #25
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	4988      	ldr	r1, [pc, #544]	; (8003c40 <HAL_I2C_IsDeviceReady+0x254>)
 8003a1e:	68f8      	ldr	r0, [r7, #12]
 8003a20:	f000 f994 	bl	8003d4c <I2C_WaitOnFlagUntilTimeout>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d001      	beq.n	8003a2e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003a2a:	2302      	movs	r3, #2
 8003a2c:	e103      	b.n	8003c36 <HAL_I2C_IsDeviceReady+0x24a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d101      	bne.n	8003a3c <HAL_I2C_IsDeviceReady+0x50>
 8003a38:	2302      	movs	r3, #2
 8003a3a:	e0fc      	b.n	8003c36 <HAL_I2C_IsDeviceReady+0x24a>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0301 	and.w	r3, r3, #1
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d007      	beq.n	8003a62 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f042 0201 	orr.w	r2, r2, #1
 8003a60:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a70:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2224      	movs	r2, #36	; 0x24
 8003a76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	4a70      	ldr	r2, [pc, #448]	; (8003c44 <HAL_I2C_IsDeviceReady+0x258>)
 8003a84:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a94:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	9300      	str	r3, [sp, #0]
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003aa2:	68f8      	ldr	r0, [r7, #12]
 8003aa4:	f000 f952 	bl	8003d4c <I2C_WaitOnFlagUntilTimeout>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00c      	beq.n	8003ac8 <HAL_I2C_IsDeviceReady+0xdc>
      {
        if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d003      	beq.n	8003ac4 <HAL_I2C_IsDeviceReady+0xd8>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ac2:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	e0b6      	b.n	8003c36 <HAL_I2C_IsDeviceReady+0x24a>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ac8:	897b      	ldrh	r3, [r7, #10]
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	461a      	mov	r2, r3
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ad6:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003ad8:	f7ff faa2 	bl	8003020 <HAL_GetTick>
 8003adc:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	695b      	ldr	r3, [r3, #20]
 8003ae4:	f003 0302 	and.w	r3, r3, #2
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	bf0c      	ite	eq
 8003aec:	2301      	moveq	r3, #1
 8003aee:	2300      	movne	r3, #0
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	695b      	ldr	r3, [r3, #20]
 8003afa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003afe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b02:	bf0c      	ite	eq
 8003b04:	2301      	moveq	r3, #1
 8003b06:	2300      	movne	r3, #0
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003b0c:	e025      	b.n	8003b5a <HAL_I2C_IsDeviceReady+0x16e>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003b0e:	f7ff fa87 	bl	8003020 <HAL_GetTick>
 8003b12:	4602      	mov	r2, r0
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	683a      	ldr	r2, [r7, #0]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d302      	bcc.n	8003b24 <HAL_I2C_IsDeviceReady+0x138>
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d103      	bne.n	8003b2c <HAL_I2C_IsDeviceReady+0x140>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	22a0      	movs	r2, #160	; 0xa0
 8003b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	695b      	ldr	r3, [r3, #20]
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	bf0c      	ite	eq
 8003b3a:	2301      	moveq	r3, #1
 8003b3c:	2300      	movne	r3, #0
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	695b      	ldr	r3, [r3, #20]
 8003b48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b50:	bf0c      	ite	eq
 8003b52:	2301      	moveq	r3, #1
 8003b54:	2300      	movne	r3, #0
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	2ba0      	cmp	r3, #160	; 0xa0
 8003b64:	d005      	beq.n	8003b72 <HAL_I2C_IsDeviceReady+0x186>
 8003b66:	7dfb      	ldrb	r3, [r7, #23]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d102      	bne.n	8003b72 <HAL_I2C_IsDeviceReady+0x186>
 8003b6c:	7dbb      	ldrb	r3, [r7, #22]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d0cd      	beq.n	8003b0e <HAL_I2C_IsDeviceReady+0x122>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2220      	movs	r2, #32
 8003b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	695b      	ldr	r3, [r3, #20]
 8003b80:	f003 0302 	and.w	r3, r3, #2
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d129      	bne.n	8003bdc <HAL_I2C_IsDeviceReady+0x1f0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b96:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b98:	2300      	movs	r3, #0
 8003b9a:	613b      	str	r3, [r7, #16]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	613b      	str	r3, [r7, #16]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	699b      	ldr	r3, [r3, #24]
 8003baa:	613b      	str	r3, [r7, #16]
 8003bac:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	9300      	str	r3, [sp, #0]
 8003bb2:	2319      	movs	r3, #25
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	4922      	ldr	r1, [pc, #136]	; (8003c40 <HAL_I2C_IsDeviceReady+0x254>)
 8003bb8:	68f8      	ldr	r0, [r7, #12]
 8003bba:	f000 f8c7 	bl	8003d4c <I2C_WaitOnFlagUntilTimeout>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d001      	beq.n	8003bc8 <HAL_I2C_IsDeviceReady+0x1dc>
        {
          return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e036      	b.n	8003c36 <HAL_I2C_IsDeviceReady+0x24a>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2220      	movs	r2, #32
 8003bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	e02c      	b.n	8003c36 <HAL_I2C_IsDeviceReady+0x24a>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bea:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003bf4:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	9300      	str	r3, [sp, #0]
 8003bfa:	2319      	movs	r3, #25
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	4910      	ldr	r1, [pc, #64]	; (8003c40 <HAL_I2C_IsDeviceReady+0x254>)
 8003c00:	68f8      	ldr	r0, [r7, #12]
 8003c02:	f000 f8a3 	bl	8003d4c <I2C_WaitOnFlagUntilTimeout>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d001      	beq.n	8003c10 <HAL_I2C_IsDeviceReady+0x224>
        {
          return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e012      	b.n	8003c36 <HAL_I2C_IsDeviceReady+0x24a>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	3301      	adds	r3, #1
 8003c14:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003c16:	69ba      	ldr	r2, [r7, #24]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	f4ff af33 	bcc.w	8003a86 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2220      	movs	r2, #32
 8003c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e000      	b.n	8003c36 <HAL_I2C_IsDeviceReady+0x24a>
  }
  else
  {
    return HAL_BUSY;
 8003c34:	2302      	movs	r3, #2
  }
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3720      	adds	r7, #32
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	00100002 	.word	0x00100002
 8003c44:	ffff0000 	.word	0xffff0000

08003c48 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b088      	sub	sp, #32
 8003c4c:	af02      	add	r7, sp, #8
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	607a      	str	r2, [r7, #4]
 8003c52:	603b      	str	r3, [r7, #0]
 8003c54:	460b      	mov	r3, r1
 8003c56:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c5c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	2b08      	cmp	r3, #8
 8003c62:	d006      	beq.n	8003c72 <I2C_MasterRequestWrite+0x2a>
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d003      	beq.n	8003c72 <I2C_MasterRequestWrite+0x2a>
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003c70:	d108      	bne.n	8003c84 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c80:	601a      	str	r2, [r3, #0]
 8003c82:	e00b      	b.n	8003c9c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c88:	2b12      	cmp	r3, #18
 8003c8a:	d107      	bne.n	8003c9c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c9a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	9300      	str	r3, [sp, #0]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ca8:	68f8      	ldr	r0, [r7, #12]
 8003caa:	f000 f84f 	bl	8003d4c <I2C_WaitOnFlagUntilTimeout>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d00c      	beq.n	8003cce <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d003      	beq.n	8003cca <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cc8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e035      	b.n	8003d3a <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003cd6:	d108      	bne.n	8003cea <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003cd8:	897b      	ldrh	r3, [r7, #10]
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	461a      	mov	r2, r3
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ce6:	611a      	str	r2, [r3, #16]
 8003ce8:	e01b      	b.n	8003d22 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003cea:	897b      	ldrh	r3, [r7, #10]
 8003cec:	11db      	asrs	r3, r3, #7
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	f003 0306 	and.w	r3, r3, #6
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	f063 030f 	orn	r3, r3, #15
 8003cfa:	b2da      	uxtb	r2, r3
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	490f      	ldr	r1, [pc, #60]	; (8003d44 <I2C_MasterRequestWrite+0xfc>)
 8003d08:	68f8      	ldr	r0, [r7, #12]
 8003d0a:	f000 f876 	bl	8003dfa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d001      	beq.n	8003d18 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e010      	b.n	8003d3a <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003d18:	897b      	ldrh	r3, [r7, #10]
 8003d1a:	b2da      	uxtb	r2, r3
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	4908      	ldr	r1, [pc, #32]	; (8003d48 <I2C_MasterRequestWrite+0x100>)
 8003d28:	68f8      	ldr	r0, [r7, #12]
 8003d2a:	f000 f866 	bl	8003dfa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d001      	beq.n	8003d38 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e000      	b.n	8003d3a <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3718      	adds	r7, #24
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	00010008 	.word	0x00010008
 8003d48:	00010002 	.word	0x00010002

08003d4c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	60b9      	str	r1, [r7, #8]
 8003d56:	603b      	str	r3, [r7, #0]
 8003d58:	4613      	mov	r3, r2
 8003d5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d5c:	e025      	b.n	8003daa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d64:	d021      	beq.n	8003daa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d66:	f7ff f95b 	bl	8003020 <HAL_GetTick>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	69bb      	ldr	r3, [r7, #24]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	683a      	ldr	r2, [r7, #0]
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d302      	bcc.n	8003d7c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d116      	bne.n	8003daa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2220      	movs	r2, #32
 8003d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d96:	f043 0220 	orr.w	r2, r3, #32
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2200      	movs	r2, #0
 8003da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e023      	b.n	8003df2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	0c1b      	lsrs	r3, r3, #16
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d10d      	bne.n	8003dd0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	43da      	mvns	r2, r3
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	bf0c      	ite	eq
 8003dc6:	2301      	moveq	r3, #1
 8003dc8:	2300      	movne	r3, #0
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	461a      	mov	r2, r3
 8003dce:	e00c      	b.n	8003dea <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	43da      	mvns	r2, r3
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	4013      	ands	r3, r2
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	bf0c      	ite	eq
 8003de2:	2301      	moveq	r3, #1
 8003de4:	2300      	movne	r3, #0
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	461a      	mov	r2, r3
 8003dea:	79fb      	ldrb	r3, [r7, #7]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d0b6      	beq.n	8003d5e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3710      	adds	r7, #16
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}

08003dfa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003dfa:	b580      	push	{r7, lr}
 8003dfc:	b084      	sub	sp, #16
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	60f8      	str	r0, [r7, #12]
 8003e02:	60b9      	str	r1, [r7, #8]
 8003e04:	607a      	str	r2, [r7, #4]
 8003e06:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e08:	e051      	b.n	8003eae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	695b      	ldr	r3, [r3, #20]
 8003e10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e18:	d123      	bne.n	8003e62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e28:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e32:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2200      	movs	r2, #0
 8003e38:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2220      	movs	r2, #32
 8003e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2200      	movs	r2, #0
 8003e46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4e:	f043 0204 	orr.w	r2, r3, #4
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e046      	b.n	8003ef0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e68:	d021      	beq.n	8003eae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e6a:	f7ff f8d9 	bl	8003020 <HAL_GetTick>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d302      	bcc.n	8003e80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d116      	bne.n	8003eae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2220      	movs	r2, #32
 8003e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9a:	f043 0220 	orr.w	r2, r3, #32
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e020      	b.n	8003ef0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	0c1b      	lsrs	r3, r3, #16
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d10c      	bne.n	8003ed2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	695b      	ldr	r3, [r3, #20]
 8003ebe:	43da      	mvns	r2, r3
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	bf14      	ite	ne
 8003eca:	2301      	movne	r3, #1
 8003ecc:	2300      	moveq	r3, #0
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	e00b      	b.n	8003eea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	699b      	ldr	r3, [r3, #24]
 8003ed8:	43da      	mvns	r2, r3
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	4013      	ands	r3, r2
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	bf14      	ite	ne
 8003ee4:	2301      	movne	r3, #1
 8003ee6:	2300      	moveq	r3, #0
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d18d      	bne.n	8003e0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003eee:	2300      	movs	r3, #0
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3710      	adds	r7, #16
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f04:	e02d      	b.n	8003f62 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f06:	68f8      	ldr	r0, [r7, #12]
 8003f08:	f000 f878 	bl	8003ffc <I2C_IsAcknowledgeFailed>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d001      	beq.n	8003f16 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e02d      	b.n	8003f72 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f1c:	d021      	beq.n	8003f62 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f1e:	f7ff f87f 	bl	8003020 <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	68ba      	ldr	r2, [r7, #8]
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d302      	bcc.n	8003f34 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d116      	bne.n	8003f62 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2200      	movs	r2, #0
 8003f38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2220      	movs	r2, #32
 8003f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2200      	movs	r2, #0
 8003f46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4e:	f043 0220 	orr.w	r2, r3, #32
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e007      	b.n	8003f72 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	695b      	ldr	r3, [r3, #20]
 8003f68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f6c:	2b80      	cmp	r3, #128	; 0x80
 8003f6e:	d1ca      	bne.n	8003f06 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f70:	2300      	movs	r3, #0
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3710      	adds	r7, #16
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f7a:	b580      	push	{r7, lr}
 8003f7c:	b084      	sub	sp, #16
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	60f8      	str	r0, [r7, #12]
 8003f82:	60b9      	str	r1, [r7, #8]
 8003f84:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f86:	e02d      	b.n	8003fe4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f88:	68f8      	ldr	r0, [r7, #12]
 8003f8a:	f000 f837 	bl	8003ffc <I2C_IsAcknowledgeFailed>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d001      	beq.n	8003f98 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e02d      	b.n	8003ff4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f9e:	d021      	beq.n	8003fe4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fa0:	f7ff f83e 	bl	8003020 <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	68ba      	ldr	r2, [r7, #8]
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d302      	bcc.n	8003fb6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d116      	bne.n	8003fe4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2220      	movs	r2, #32
 8003fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd0:	f043 0220 	orr.w	r2, r3, #32
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e007      	b.n	8003ff4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	695b      	ldr	r3, [r3, #20]
 8003fea:	f003 0304 	and.w	r3, r3, #4
 8003fee:	2b04      	cmp	r3, #4
 8003ff0:	d1ca      	bne.n	8003f88 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ff2:	2300      	movs	r3, #0
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3710      	adds	r7, #16
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	695b      	ldr	r3, [r3, #20]
 800400a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800400e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004012:	d11b      	bne.n	800404c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800401c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2220      	movs	r2, #32
 8004028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004038:	f043 0204 	orr.w	r2, r3, #4
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e000      	b.n	800404e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	370c      	adds	r7, #12
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
	...

0800405c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b086      	sub	sp, #24
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d101      	bne.n	800406e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e25b      	b.n	8004526 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0301 	and.w	r3, r3, #1
 8004076:	2b00      	cmp	r3, #0
 8004078:	d075      	beq.n	8004166 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800407a:	4ba3      	ldr	r3, [pc, #652]	; (8004308 <HAL_RCC_OscConfig+0x2ac>)
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f003 030c 	and.w	r3, r3, #12
 8004082:	2b04      	cmp	r3, #4
 8004084:	d00c      	beq.n	80040a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004086:	4ba0      	ldr	r3, [pc, #640]	; (8004308 <HAL_RCC_OscConfig+0x2ac>)
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800408e:	2b08      	cmp	r3, #8
 8004090:	d112      	bne.n	80040b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004092:	4b9d      	ldr	r3, [pc, #628]	; (8004308 <HAL_RCC_OscConfig+0x2ac>)
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800409a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800409e:	d10b      	bne.n	80040b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040a0:	4b99      	ldr	r3, [pc, #612]	; (8004308 <HAL_RCC_OscConfig+0x2ac>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d05b      	beq.n	8004164 <HAL_RCC_OscConfig+0x108>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d157      	bne.n	8004164 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e236      	b.n	8004526 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040c0:	d106      	bne.n	80040d0 <HAL_RCC_OscConfig+0x74>
 80040c2:	4b91      	ldr	r3, [pc, #580]	; (8004308 <HAL_RCC_OscConfig+0x2ac>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a90      	ldr	r2, [pc, #576]	; (8004308 <HAL_RCC_OscConfig+0x2ac>)
 80040c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040cc:	6013      	str	r3, [r2, #0]
 80040ce:	e01d      	b.n	800410c <HAL_RCC_OscConfig+0xb0>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040d8:	d10c      	bne.n	80040f4 <HAL_RCC_OscConfig+0x98>
 80040da:	4b8b      	ldr	r3, [pc, #556]	; (8004308 <HAL_RCC_OscConfig+0x2ac>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a8a      	ldr	r2, [pc, #552]	; (8004308 <HAL_RCC_OscConfig+0x2ac>)
 80040e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040e4:	6013      	str	r3, [r2, #0]
 80040e6:	4b88      	ldr	r3, [pc, #544]	; (8004308 <HAL_RCC_OscConfig+0x2ac>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a87      	ldr	r2, [pc, #540]	; (8004308 <HAL_RCC_OscConfig+0x2ac>)
 80040ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040f0:	6013      	str	r3, [r2, #0]
 80040f2:	e00b      	b.n	800410c <HAL_RCC_OscConfig+0xb0>
 80040f4:	4b84      	ldr	r3, [pc, #528]	; (8004308 <HAL_RCC_OscConfig+0x2ac>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a83      	ldr	r2, [pc, #524]	; (8004308 <HAL_RCC_OscConfig+0x2ac>)
 80040fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040fe:	6013      	str	r3, [r2, #0]
 8004100:	4b81      	ldr	r3, [pc, #516]	; (8004308 <HAL_RCC_OscConfig+0x2ac>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a80      	ldr	r2, [pc, #512]	; (8004308 <HAL_RCC_OscConfig+0x2ac>)
 8004106:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800410a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d013      	beq.n	800413c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004114:	f7fe ff84 	bl	8003020 <HAL_GetTick>
 8004118:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800411a:	e008      	b.n	800412e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800411c:	f7fe ff80 	bl	8003020 <HAL_GetTick>
 8004120:	4602      	mov	r2, r0
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	2b64      	cmp	r3, #100	; 0x64
 8004128:	d901      	bls.n	800412e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e1fb      	b.n	8004526 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800412e:	4b76      	ldr	r3, [pc, #472]	; (8004308 <HAL_RCC_OscConfig+0x2ac>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d0f0      	beq.n	800411c <HAL_RCC_OscConfig+0xc0>
 800413a:	e014      	b.n	8004166 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800413c:	f7fe ff70 	bl	8003020 <HAL_GetTick>
 8004140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004142:	e008      	b.n	8004156 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004144:	f7fe ff6c 	bl	8003020 <HAL_GetTick>
 8004148:	4602      	mov	r2, r0
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	2b64      	cmp	r3, #100	; 0x64
 8004150:	d901      	bls.n	8004156 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e1e7      	b.n	8004526 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004156:	4b6c      	ldr	r3, [pc, #432]	; (8004308 <HAL_RCC_OscConfig+0x2ac>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d1f0      	bne.n	8004144 <HAL_RCC_OscConfig+0xe8>
 8004162:	e000      	b.n	8004166 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004164:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0302 	and.w	r3, r3, #2
 800416e:	2b00      	cmp	r3, #0
 8004170:	d063      	beq.n	800423a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004172:	4b65      	ldr	r3, [pc, #404]	; (8004308 <HAL_RCC_OscConfig+0x2ac>)
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f003 030c 	and.w	r3, r3, #12
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00b      	beq.n	8004196 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800417e:	4b62      	ldr	r3, [pc, #392]	; (8004308 <HAL_RCC_OscConfig+0x2ac>)
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004186:	2b08      	cmp	r3, #8
 8004188:	d11c      	bne.n	80041c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800418a:	4b5f      	ldr	r3, [pc, #380]	; (8004308 <HAL_RCC_OscConfig+0x2ac>)
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d116      	bne.n	80041c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004196:	4b5c      	ldr	r3, [pc, #368]	; (8004308 <HAL_RCC_OscConfig+0x2ac>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0302 	and.w	r3, r3, #2
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d005      	beq.n	80041ae <HAL_RCC_OscConfig+0x152>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d001      	beq.n	80041ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e1bb      	b.n	8004526 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041ae:	4b56      	ldr	r3, [pc, #344]	; (8004308 <HAL_RCC_OscConfig+0x2ac>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	691b      	ldr	r3, [r3, #16]
 80041ba:	00db      	lsls	r3, r3, #3
 80041bc:	4952      	ldr	r1, [pc, #328]	; (8004308 <HAL_RCC_OscConfig+0x2ac>)
 80041be:	4313      	orrs	r3, r2
 80041c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041c2:	e03a      	b.n	800423a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d020      	beq.n	800420e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041cc:	4b4f      	ldr	r3, [pc, #316]	; (800430c <HAL_RCC_OscConfig+0x2b0>)
 80041ce:	2201      	movs	r2, #1
 80041d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041d2:	f7fe ff25 	bl	8003020 <HAL_GetTick>
 80041d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041d8:	e008      	b.n	80041ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041da:	f7fe ff21 	bl	8003020 <HAL_GetTick>
 80041de:	4602      	mov	r2, r0
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d901      	bls.n	80041ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	e19c      	b.n	8004526 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041ec:	4b46      	ldr	r3, [pc, #280]	; (8004308 <HAL_RCC_OscConfig+0x2ac>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0302 	and.w	r3, r3, #2
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d0f0      	beq.n	80041da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041f8:	4b43      	ldr	r3, [pc, #268]	; (8004308 <HAL_RCC_OscConfig+0x2ac>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	691b      	ldr	r3, [r3, #16]
 8004204:	00db      	lsls	r3, r3, #3
 8004206:	4940      	ldr	r1, [pc, #256]	; (8004308 <HAL_RCC_OscConfig+0x2ac>)
 8004208:	4313      	orrs	r3, r2
 800420a:	600b      	str	r3, [r1, #0]
 800420c:	e015      	b.n	800423a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800420e:	4b3f      	ldr	r3, [pc, #252]	; (800430c <HAL_RCC_OscConfig+0x2b0>)
 8004210:	2200      	movs	r2, #0
 8004212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004214:	f7fe ff04 	bl	8003020 <HAL_GetTick>
 8004218:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800421a:	e008      	b.n	800422e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800421c:	f7fe ff00 	bl	8003020 <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	2b02      	cmp	r3, #2
 8004228:	d901      	bls.n	800422e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e17b      	b.n	8004526 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800422e:	4b36      	ldr	r3, [pc, #216]	; (8004308 <HAL_RCC_OscConfig+0x2ac>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0302 	and.w	r3, r3, #2
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1f0      	bne.n	800421c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0308 	and.w	r3, r3, #8
 8004242:	2b00      	cmp	r3, #0
 8004244:	d030      	beq.n	80042a8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	695b      	ldr	r3, [r3, #20]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d016      	beq.n	800427c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800424e:	4b30      	ldr	r3, [pc, #192]	; (8004310 <HAL_RCC_OscConfig+0x2b4>)
 8004250:	2201      	movs	r2, #1
 8004252:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004254:	f7fe fee4 	bl	8003020 <HAL_GetTick>
 8004258:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800425a:	e008      	b.n	800426e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800425c:	f7fe fee0 	bl	8003020 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	2b02      	cmp	r3, #2
 8004268:	d901      	bls.n	800426e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e15b      	b.n	8004526 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800426e:	4b26      	ldr	r3, [pc, #152]	; (8004308 <HAL_RCC_OscConfig+0x2ac>)
 8004270:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004272:	f003 0302 	and.w	r3, r3, #2
 8004276:	2b00      	cmp	r3, #0
 8004278:	d0f0      	beq.n	800425c <HAL_RCC_OscConfig+0x200>
 800427a:	e015      	b.n	80042a8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800427c:	4b24      	ldr	r3, [pc, #144]	; (8004310 <HAL_RCC_OscConfig+0x2b4>)
 800427e:	2200      	movs	r2, #0
 8004280:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004282:	f7fe fecd 	bl	8003020 <HAL_GetTick>
 8004286:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004288:	e008      	b.n	800429c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800428a:	f7fe fec9 	bl	8003020 <HAL_GetTick>
 800428e:	4602      	mov	r2, r0
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	1ad3      	subs	r3, r2, r3
 8004294:	2b02      	cmp	r3, #2
 8004296:	d901      	bls.n	800429c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	e144      	b.n	8004526 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800429c:	4b1a      	ldr	r3, [pc, #104]	; (8004308 <HAL_RCC_OscConfig+0x2ac>)
 800429e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042a0:	f003 0302 	and.w	r3, r3, #2
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d1f0      	bne.n	800428a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0304 	and.w	r3, r3, #4
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	f000 80a0 	beq.w	80043f6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042b6:	2300      	movs	r3, #0
 80042b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042ba:	4b13      	ldr	r3, [pc, #76]	; (8004308 <HAL_RCC_OscConfig+0x2ac>)
 80042bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d10f      	bne.n	80042e6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042c6:	2300      	movs	r3, #0
 80042c8:	60bb      	str	r3, [r7, #8]
 80042ca:	4b0f      	ldr	r3, [pc, #60]	; (8004308 <HAL_RCC_OscConfig+0x2ac>)
 80042cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ce:	4a0e      	ldr	r2, [pc, #56]	; (8004308 <HAL_RCC_OscConfig+0x2ac>)
 80042d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042d4:	6413      	str	r3, [r2, #64]	; 0x40
 80042d6:	4b0c      	ldr	r3, [pc, #48]	; (8004308 <HAL_RCC_OscConfig+0x2ac>)
 80042d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042de:	60bb      	str	r3, [r7, #8]
 80042e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042e2:	2301      	movs	r3, #1
 80042e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042e6:	4b0b      	ldr	r3, [pc, #44]	; (8004314 <HAL_RCC_OscConfig+0x2b8>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d121      	bne.n	8004336 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042f2:	4b08      	ldr	r3, [pc, #32]	; (8004314 <HAL_RCC_OscConfig+0x2b8>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a07      	ldr	r2, [pc, #28]	; (8004314 <HAL_RCC_OscConfig+0x2b8>)
 80042f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042fe:	f7fe fe8f 	bl	8003020 <HAL_GetTick>
 8004302:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004304:	e011      	b.n	800432a <HAL_RCC_OscConfig+0x2ce>
 8004306:	bf00      	nop
 8004308:	40023800 	.word	0x40023800
 800430c:	42470000 	.word	0x42470000
 8004310:	42470e80 	.word	0x42470e80
 8004314:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004318:	f7fe fe82 	bl	8003020 <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	2b02      	cmp	r3, #2
 8004324:	d901      	bls.n	800432a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e0fd      	b.n	8004526 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800432a:	4b81      	ldr	r3, [pc, #516]	; (8004530 <HAL_RCC_OscConfig+0x4d4>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004332:	2b00      	cmp	r3, #0
 8004334:	d0f0      	beq.n	8004318 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	2b01      	cmp	r3, #1
 800433c:	d106      	bne.n	800434c <HAL_RCC_OscConfig+0x2f0>
 800433e:	4b7d      	ldr	r3, [pc, #500]	; (8004534 <HAL_RCC_OscConfig+0x4d8>)
 8004340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004342:	4a7c      	ldr	r2, [pc, #496]	; (8004534 <HAL_RCC_OscConfig+0x4d8>)
 8004344:	f043 0301 	orr.w	r3, r3, #1
 8004348:	6713      	str	r3, [r2, #112]	; 0x70
 800434a:	e01c      	b.n	8004386 <HAL_RCC_OscConfig+0x32a>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	2b05      	cmp	r3, #5
 8004352:	d10c      	bne.n	800436e <HAL_RCC_OscConfig+0x312>
 8004354:	4b77      	ldr	r3, [pc, #476]	; (8004534 <HAL_RCC_OscConfig+0x4d8>)
 8004356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004358:	4a76      	ldr	r2, [pc, #472]	; (8004534 <HAL_RCC_OscConfig+0x4d8>)
 800435a:	f043 0304 	orr.w	r3, r3, #4
 800435e:	6713      	str	r3, [r2, #112]	; 0x70
 8004360:	4b74      	ldr	r3, [pc, #464]	; (8004534 <HAL_RCC_OscConfig+0x4d8>)
 8004362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004364:	4a73      	ldr	r2, [pc, #460]	; (8004534 <HAL_RCC_OscConfig+0x4d8>)
 8004366:	f043 0301 	orr.w	r3, r3, #1
 800436a:	6713      	str	r3, [r2, #112]	; 0x70
 800436c:	e00b      	b.n	8004386 <HAL_RCC_OscConfig+0x32a>
 800436e:	4b71      	ldr	r3, [pc, #452]	; (8004534 <HAL_RCC_OscConfig+0x4d8>)
 8004370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004372:	4a70      	ldr	r2, [pc, #448]	; (8004534 <HAL_RCC_OscConfig+0x4d8>)
 8004374:	f023 0301 	bic.w	r3, r3, #1
 8004378:	6713      	str	r3, [r2, #112]	; 0x70
 800437a:	4b6e      	ldr	r3, [pc, #440]	; (8004534 <HAL_RCC_OscConfig+0x4d8>)
 800437c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800437e:	4a6d      	ldr	r2, [pc, #436]	; (8004534 <HAL_RCC_OscConfig+0x4d8>)
 8004380:	f023 0304 	bic.w	r3, r3, #4
 8004384:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d015      	beq.n	80043ba <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800438e:	f7fe fe47 	bl	8003020 <HAL_GetTick>
 8004392:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004394:	e00a      	b.n	80043ac <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004396:	f7fe fe43 	bl	8003020 <HAL_GetTick>
 800439a:	4602      	mov	r2, r0
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d901      	bls.n	80043ac <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	e0bc      	b.n	8004526 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043ac:	4b61      	ldr	r3, [pc, #388]	; (8004534 <HAL_RCC_OscConfig+0x4d8>)
 80043ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b0:	f003 0302 	and.w	r3, r3, #2
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d0ee      	beq.n	8004396 <HAL_RCC_OscConfig+0x33a>
 80043b8:	e014      	b.n	80043e4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043ba:	f7fe fe31 	bl	8003020 <HAL_GetTick>
 80043be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043c0:	e00a      	b.n	80043d8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043c2:	f7fe fe2d 	bl	8003020 <HAL_GetTick>
 80043c6:	4602      	mov	r2, r0
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d901      	bls.n	80043d8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e0a6      	b.n	8004526 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043d8:	4b56      	ldr	r3, [pc, #344]	; (8004534 <HAL_RCC_OscConfig+0x4d8>)
 80043da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043dc:	f003 0302 	and.w	r3, r3, #2
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d1ee      	bne.n	80043c2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043e4:	7dfb      	ldrb	r3, [r7, #23]
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d105      	bne.n	80043f6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043ea:	4b52      	ldr	r3, [pc, #328]	; (8004534 <HAL_RCC_OscConfig+0x4d8>)
 80043ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ee:	4a51      	ldr	r2, [pc, #324]	; (8004534 <HAL_RCC_OscConfig+0x4d8>)
 80043f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043f4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	699b      	ldr	r3, [r3, #24]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	f000 8092 	beq.w	8004524 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004400:	4b4c      	ldr	r3, [pc, #304]	; (8004534 <HAL_RCC_OscConfig+0x4d8>)
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	f003 030c 	and.w	r3, r3, #12
 8004408:	2b08      	cmp	r3, #8
 800440a:	d05c      	beq.n	80044c6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	699b      	ldr	r3, [r3, #24]
 8004410:	2b02      	cmp	r3, #2
 8004412:	d141      	bne.n	8004498 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004414:	4b48      	ldr	r3, [pc, #288]	; (8004538 <HAL_RCC_OscConfig+0x4dc>)
 8004416:	2200      	movs	r2, #0
 8004418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800441a:	f7fe fe01 	bl	8003020 <HAL_GetTick>
 800441e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004420:	e008      	b.n	8004434 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004422:	f7fe fdfd 	bl	8003020 <HAL_GetTick>
 8004426:	4602      	mov	r2, r0
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	2b02      	cmp	r3, #2
 800442e:	d901      	bls.n	8004434 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004430:	2303      	movs	r3, #3
 8004432:	e078      	b.n	8004526 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004434:	4b3f      	ldr	r3, [pc, #252]	; (8004534 <HAL_RCC_OscConfig+0x4d8>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800443c:	2b00      	cmp	r3, #0
 800443e:	d1f0      	bne.n	8004422 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	69da      	ldr	r2, [r3, #28]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a1b      	ldr	r3, [r3, #32]
 8004448:	431a      	orrs	r2, r3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444e:	019b      	lsls	r3, r3, #6
 8004450:	431a      	orrs	r2, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004456:	085b      	lsrs	r3, r3, #1
 8004458:	3b01      	subs	r3, #1
 800445a:	041b      	lsls	r3, r3, #16
 800445c:	431a      	orrs	r2, r3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004462:	061b      	lsls	r3, r3, #24
 8004464:	4933      	ldr	r1, [pc, #204]	; (8004534 <HAL_RCC_OscConfig+0x4d8>)
 8004466:	4313      	orrs	r3, r2
 8004468:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800446a:	4b33      	ldr	r3, [pc, #204]	; (8004538 <HAL_RCC_OscConfig+0x4dc>)
 800446c:	2201      	movs	r2, #1
 800446e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004470:	f7fe fdd6 	bl	8003020 <HAL_GetTick>
 8004474:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004476:	e008      	b.n	800448a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004478:	f7fe fdd2 	bl	8003020 <HAL_GetTick>
 800447c:	4602      	mov	r2, r0
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	2b02      	cmp	r3, #2
 8004484:	d901      	bls.n	800448a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e04d      	b.n	8004526 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800448a:	4b2a      	ldr	r3, [pc, #168]	; (8004534 <HAL_RCC_OscConfig+0x4d8>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d0f0      	beq.n	8004478 <HAL_RCC_OscConfig+0x41c>
 8004496:	e045      	b.n	8004524 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004498:	4b27      	ldr	r3, [pc, #156]	; (8004538 <HAL_RCC_OscConfig+0x4dc>)
 800449a:	2200      	movs	r2, #0
 800449c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800449e:	f7fe fdbf 	bl	8003020 <HAL_GetTick>
 80044a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044a4:	e008      	b.n	80044b8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044a6:	f7fe fdbb 	bl	8003020 <HAL_GetTick>
 80044aa:	4602      	mov	r2, r0
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	2b02      	cmp	r3, #2
 80044b2:	d901      	bls.n	80044b8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80044b4:	2303      	movs	r3, #3
 80044b6:	e036      	b.n	8004526 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044b8:	4b1e      	ldr	r3, [pc, #120]	; (8004534 <HAL_RCC_OscConfig+0x4d8>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d1f0      	bne.n	80044a6 <HAL_RCC_OscConfig+0x44a>
 80044c4:	e02e      	b.n	8004524 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	699b      	ldr	r3, [r3, #24]
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d101      	bne.n	80044d2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e029      	b.n	8004526 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80044d2:	4b18      	ldr	r3, [pc, #96]	; (8004534 <HAL_RCC_OscConfig+0x4d8>)
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	69db      	ldr	r3, [r3, #28]
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d11c      	bne.n	8004520 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d115      	bne.n	8004520 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80044fa:	4013      	ands	r3, r2
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004500:	4293      	cmp	r3, r2
 8004502:	d10d      	bne.n	8004520 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800450e:	429a      	cmp	r2, r3
 8004510:	d106      	bne.n	8004520 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800451c:	429a      	cmp	r2, r3
 800451e:	d001      	beq.n	8004524 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e000      	b.n	8004526 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004524:	2300      	movs	r3, #0
}
 8004526:	4618      	mov	r0, r3
 8004528:	3718      	adds	r7, #24
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	40007000 	.word	0x40007000
 8004534:	40023800 	.word	0x40023800
 8004538:	42470060 	.word	0x42470060

0800453c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b084      	sub	sp, #16
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d101      	bne.n	8004550 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e0cc      	b.n	80046ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004550:	4b68      	ldr	r3, [pc, #416]	; (80046f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 030f 	and.w	r3, r3, #15
 8004558:	683a      	ldr	r2, [r7, #0]
 800455a:	429a      	cmp	r2, r3
 800455c:	d90c      	bls.n	8004578 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800455e:	4b65      	ldr	r3, [pc, #404]	; (80046f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004560:	683a      	ldr	r2, [r7, #0]
 8004562:	b2d2      	uxtb	r2, r2
 8004564:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004566:	4b63      	ldr	r3, [pc, #396]	; (80046f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 030f 	and.w	r3, r3, #15
 800456e:	683a      	ldr	r2, [r7, #0]
 8004570:	429a      	cmp	r2, r3
 8004572:	d001      	beq.n	8004578 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e0b8      	b.n	80046ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0302 	and.w	r3, r3, #2
 8004580:	2b00      	cmp	r3, #0
 8004582:	d020      	beq.n	80045c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0304 	and.w	r3, r3, #4
 800458c:	2b00      	cmp	r3, #0
 800458e:	d005      	beq.n	800459c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004590:	4b59      	ldr	r3, [pc, #356]	; (80046f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	4a58      	ldr	r2, [pc, #352]	; (80046f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004596:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800459a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0308 	and.w	r3, r3, #8
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d005      	beq.n	80045b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045a8:	4b53      	ldr	r3, [pc, #332]	; (80046f8 <HAL_RCC_ClockConfig+0x1bc>)
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	4a52      	ldr	r2, [pc, #328]	; (80046f8 <HAL_RCC_ClockConfig+0x1bc>)
 80045ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80045b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045b4:	4b50      	ldr	r3, [pc, #320]	; (80046f8 <HAL_RCC_ClockConfig+0x1bc>)
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	494d      	ldr	r1, [pc, #308]	; (80046f8 <HAL_RCC_ClockConfig+0x1bc>)
 80045c2:	4313      	orrs	r3, r2
 80045c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0301 	and.w	r3, r3, #1
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d044      	beq.n	800465c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d107      	bne.n	80045ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045da:	4b47      	ldr	r3, [pc, #284]	; (80046f8 <HAL_RCC_ClockConfig+0x1bc>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d119      	bne.n	800461a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e07f      	b.n	80046ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	2b02      	cmp	r3, #2
 80045f0:	d003      	beq.n	80045fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045f6:	2b03      	cmp	r3, #3
 80045f8:	d107      	bne.n	800460a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045fa:	4b3f      	ldr	r3, [pc, #252]	; (80046f8 <HAL_RCC_ClockConfig+0x1bc>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d109      	bne.n	800461a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e06f      	b.n	80046ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800460a:	4b3b      	ldr	r3, [pc, #236]	; (80046f8 <HAL_RCC_ClockConfig+0x1bc>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0302 	and.w	r3, r3, #2
 8004612:	2b00      	cmp	r3, #0
 8004614:	d101      	bne.n	800461a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e067      	b.n	80046ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800461a:	4b37      	ldr	r3, [pc, #220]	; (80046f8 <HAL_RCC_ClockConfig+0x1bc>)
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	f023 0203 	bic.w	r2, r3, #3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	4934      	ldr	r1, [pc, #208]	; (80046f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004628:	4313      	orrs	r3, r2
 800462a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800462c:	f7fe fcf8 	bl	8003020 <HAL_GetTick>
 8004630:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004632:	e00a      	b.n	800464a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004634:	f7fe fcf4 	bl	8003020 <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004642:	4293      	cmp	r3, r2
 8004644:	d901      	bls.n	800464a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	e04f      	b.n	80046ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800464a:	4b2b      	ldr	r3, [pc, #172]	; (80046f8 <HAL_RCC_ClockConfig+0x1bc>)
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	f003 020c 	and.w	r2, r3, #12
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	429a      	cmp	r2, r3
 800465a:	d1eb      	bne.n	8004634 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800465c:	4b25      	ldr	r3, [pc, #148]	; (80046f4 <HAL_RCC_ClockConfig+0x1b8>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 030f 	and.w	r3, r3, #15
 8004664:	683a      	ldr	r2, [r7, #0]
 8004666:	429a      	cmp	r2, r3
 8004668:	d20c      	bcs.n	8004684 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800466a:	4b22      	ldr	r3, [pc, #136]	; (80046f4 <HAL_RCC_ClockConfig+0x1b8>)
 800466c:	683a      	ldr	r2, [r7, #0]
 800466e:	b2d2      	uxtb	r2, r2
 8004670:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004672:	4b20      	ldr	r3, [pc, #128]	; (80046f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 030f 	and.w	r3, r3, #15
 800467a:	683a      	ldr	r2, [r7, #0]
 800467c:	429a      	cmp	r2, r3
 800467e:	d001      	beq.n	8004684 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e032      	b.n	80046ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 0304 	and.w	r3, r3, #4
 800468c:	2b00      	cmp	r3, #0
 800468e:	d008      	beq.n	80046a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004690:	4b19      	ldr	r3, [pc, #100]	; (80046f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	4916      	ldr	r1, [pc, #88]	; (80046f8 <HAL_RCC_ClockConfig+0x1bc>)
 800469e:	4313      	orrs	r3, r2
 80046a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0308 	and.w	r3, r3, #8
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d009      	beq.n	80046c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046ae:	4b12      	ldr	r3, [pc, #72]	; (80046f8 <HAL_RCC_ClockConfig+0x1bc>)
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	691b      	ldr	r3, [r3, #16]
 80046ba:	00db      	lsls	r3, r3, #3
 80046bc:	490e      	ldr	r1, [pc, #56]	; (80046f8 <HAL_RCC_ClockConfig+0x1bc>)
 80046be:	4313      	orrs	r3, r2
 80046c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80046c2:	f000 f821 	bl	8004708 <HAL_RCC_GetSysClockFreq>
 80046c6:	4601      	mov	r1, r0
 80046c8:	4b0b      	ldr	r3, [pc, #44]	; (80046f8 <HAL_RCC_ClockConfig+0x1bc>)
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	091b      	lsrs	r3, r3, #4
 80046ce:	f003 030f 	and.w	r3, r3, #15
 80046d2:	4a0a      	ldr	r2, [pc, #40]	; (80046fc <HAL_RCC_ClockConfig+0x1c0>)
 80046d4:	5cd3      	ldrb	r3, [r2, r3]
 80046d6:	fa21 f303 	lsr.w	r3, r1, r3
 80046da:	4a09      	ldr	r2, [pc, #36]	; (8004700 <HAL_RCC_ClockConfig+0x1c4>)
 80046dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80046de:	4b09      	ldr	r3, [pc, #36]	; (8004704 <HAL_RCC_ClockConfig+0x1c8>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4618      	mov	r0, r3
 80046e4:	f7fe fc58 	bl	8002f98 <HAL_InitTick>

  return HAL_OK;
 80046e8:	2300      	movs	r3, #0
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3710      	adds	r7, #16
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	40023c00 	.word	0x40023c00
 80046f8:	40023800 	.word	0x40023800
 80046fc:	0800a644 	.word	0x0800a644
 8004700:	20000008 	.word	0x20000008
 8004704:	2000000c 	.word	0x2000000c

08004708 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800470a:	b085      	sub	sp, #20
 800470c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800470e:	2300      	movs	r3, #0
 8004710:	607b      	str	r3, [r7, #4]
 8004712:	2300      	movs	r3, #0
 8004714:	60fb      	str	r3, [r7, #12]
 8004716:	2300      	movs	r3, #0
 8004718:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800471a:	2300      	movs	r3, #0
 800471c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800471e:	4b63      	ldr	r3, [pc, #396]	; (80048ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	f003 030c 	and.w	r3, r3, #12
 8004726:	2b04      	cmp	r3, #4
 8004728:	d007      	beq.n	800473a <HAL_RCC_GetSysClockFreq+0x32>
 800472a:	2b08      	cmp	r3, #8
 800472c:	d008      	beq.n	8004740 <HAL_RCC_GetSysClockFreq+0x38>
 800472e:	2b00      	cmp	r3, #0
 8004730:	f040 80b4 	bne.w	800489c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004734:	4b5e      	ldr	r3, [pc, #376]	; (80048b0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004736:	60bb      	str	r3, [r7, #8]
       break;
 8004738:	e0b3      	b.n	80048a2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800473a:	4b5e      	ldr	r3, [pc, #376]	; (80048b4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800473c:	60bb      	str	r3, [r7, #8]
      break;
 800473e:	e0b0      	b.n	80048a2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004740:	4b5a      	ldr	r3, [pc, #360]	; (80048ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004748:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800474a:	4b58      	ldr	r3, [pc, #352]	; (80048ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d04a      	beq.n	80047ec <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004756:	4b55      	ldr	r3, [pc, #340]	; (80048ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	099b      	lsrs	r3, r3, #6
 800475c:	f04f 0400 	mov.w	r4, #0
 8004760:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004764:	f04f 0200 	mov.w	r2, #0
 8004768:	ea03 0501 	and.w	r5, r3, r1
 800476c:	ea04 0602 	and.w	r6, r4, r2
 8004770:	4629      	mov	r1, r5
 8004772:	4632      	mov	r2, r6
 8004774:	f04f 0300 	mov.w	r3, #0
 8004778:	f04f 0400 	mov.w	r4, #0
 800477c:	0154      	lsls	r4, r2, #5
 800477e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004782:	014b      	lsls	r3, r1, #5
 8004784:	4619      	mov	r1, r3
 8004786:	4622      	mov	r2, r4
 8004788:	1b49      	subs	r1, r1, r5
 800478a:	eb62 0206 	sbc.w	r2, r2, r6
 800478e:	f04f 0300 	mov.w	r3, #0
 8004792:	f04f 0400 	mov.w	r4, #0
 8004796:	0194      	lsls	r4, r2, #6
 8004798:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800479c:	018b      	lsls	r3, r1, #6
 800479e:	1a5b      	subs	r3, r3, r1
 80047a0:	eb64 0402 	sbc.w	r4, r4, r2
 80047a4:	f04f 0100 	mov.w	r1, #0
 80047a8:	f04f 0200 	mov.w	r2, #0
 80047ac:	00e2      	lsls	r2, r4, #3
 80047ae:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80047b2:	00d9      	lsls	r1, r3, #3
 80047b4:	460b      	mov	r3, r1
 80047b6:	4614      	mov	r4, r2
 80047b8:	195b      	adds	r3, r3, r5
 80047ba:	eb44 0406 	adc.w	r4, r4, r6
 80047be:	f04f 0100 	mov.w	r1, #0
 80047c2:	f04f 0200 	mov.w	r2, #0
 80047c6:	0262      	lsls	r2, r4, #9
 80047c8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80047cc:	0259      	lsls	r1, r3, #9
 80047ce:	460b      	mov	r3, r1
 80047d0:	4614      	mov	r4, r2
 80047d2:	4618      	mov	r0, r3
 80047d4:	4621      	mov	r1, r4
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f04f 0400 	mov.w	r4, #0
 80047dc:	461a      	mov	r2, r3
 80047de:	4623      	mov	r3, r4
 80047e0:	f7fc fa5a 	bl	8000c98 <__aeabi_uldivmod>
 80047e4:	4603      	mov	r3, r0
 80047e6:	460c      	mov	r4, r1
 80047e8:	60fb      	str	r3, [r7, #12]
 80047ea:	e049      	b.n	8004880 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047ec:	4b2f      	ldr	r3, [pc, #188]	; (80048ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	099b      	lsrs	r3, r3, #6
 80047f2:	f04f 0400 	mov.w	r4, #0
 80047f6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80047fa:	f04f 0200 	mov.w	r2, #0
 80047fe:	ea03 0501 	and.w	r5, r3, r1
 8004802:	ea04 0602 	and.w	r6, r4, r2
 8004806:	4629      	mov	r1, r5
 8004808:	4632      	mov	r2, r6
 800480a:	f04f 0300 	mov.w	r3, #0
 800480e:	f04f 0400 	mov.w	r4, #0
 8004812:	0154      	lsls	r4, r2, #5
 8004814:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004818:	014b      	lsls	r3, r1, #5
 800481a:	4619      	mov	r1, r3
 800481c:	4622      	mov	r2, r4
 800481e:	1b49      	subs	r1, r1, r5
 8004820:	eb62 0206 	sbc.w	r2, r2, r6
 8004824:	f04f 0300 	mov.w	r3, #0
 8004828:	f04f 0400 	mov.w	r4, #0
 800482c:	0194      	lsls	r4, r2, #6
 800482e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004832:	018b      	lsls	r3, r1, #6
 8004834:	1a5b      	subs	r3, r3, r1
 8004836:	eb64 0402 	sbc.w	r4, r4, r2
 800483a:	f04f 0100 	mov.w	r1, #0
 800483e:	f04f 0200 	mov.w	r2, #0
 8004842:	00e2      	lsls	r2, r4, #3
 8004844:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004848:	00d9      	lsls	r1, r3, #3
 800484a:	460b      	mov	r3, r1
 800484c:	4614      	mov	r4, r2
 800484e:	195b      	adds	r3, r3, r5
 8004850:	eb44 0406 	adc.w	r4, r4, r6
 8004854:	f04f 0100 	mov.w	r1, #0
 8004858:	f04f 0200 	mov.w	r2, #0
 800485c:	02a2      	lsls	r2, r4, #10
 800485e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004862:	0299      	lsls	r1, r3, #10
 8004864:	460b      	mov	r3, r1
 8004866:	4614      	mov	r4, r2
 8004868:	4618      	mov	r0, r3
 800486a:	4621      	mov	r1, r4
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f04f 0400 	mov.w	r4, #0
 8004872:	461a      	mov	r2, r3
 8004874:	4623      	mov	r3, r4
 8004876:	f7fc fa0f 	bl	8000c98 <__aeabi_uldivmod>
 800487a:	4603      	mov	r3, r0
 800487c:	460c      	mov	r4, r1
 800487e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004880:	4b0a      	ldr	r3, [pc, #40]	; (80048ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	0c1b      	lsrs	r3, r3, #16
 8004886:	f003 0303 	and.w	r3, r3, #3
 800488a:	3301      	adds	r3, #1
 800488c:	005b      	lsls	r3, r3, #1
 800488e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004890:	68fa      	ldr	r2, [r7, #12]
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	fbb2 f3f3 	udiv	r3, r2, r3
 8004898:	60bb      	str	r3, [r7, #8]
      break;
 800489a:	e002      	b.n	80048a2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800489c:	4b04      	ldr	r3, [pc, #16]	; (80048b0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800489e:	60bb      	str	r3, [r7, #8]
      break;
 80048a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048a2:	68bb      	ldr	r3, [r7, #8]
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3714      	adds	r7, #20
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048ac:	40023800 	.word	0x40023800
 80048b0:	00f42400 	.word	0x00f42400
 80048b4:	007a1200 	.word	0x007a1200

080048b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048b8:	b480      	push	{r7}
 80048ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048bc:	4b03      	ldr	r3, [pc, #12]	; (80048cc <HAL_RCC_GetHCLKFreq+0x14>)
 80048be:	681b      	ldr	r3, [r3, #0]
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr
 80048ca:	bf00      	nop
 80048cc:	20000008 	.word	0x20000008

080048d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80048d4:	f7ff fff0 	bl	80048b8 <HAL_RCC_GetHCLKFreq>
 80048d8:	4601      	mov	r1, r0
 80048da:	4b05      	ldr	r3, [pc, #20]	; (80048f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	0a9b      	lsrs	r3, r3, #10
 80048e0:	f003 0307 	and.w	r3, r3, #7
 80048e4:	4a03      	ldr	r2, [pc, #12]	; (80048f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048e6:	5cd3      	ldrb	r3, [r2, r3]
 80048e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	40023800 	.word	0x40023800
 80048f4:	0800a654 	.word	0x0800a654

080048f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80048fc:	f7ff ffdc 	bl	80048b8 <HAL_RCC_GetHCLKFreq>
 8004900:	4601      	mov	r1, r0
 8004902:	4b05      	ldr	r3, [pc, #20]	; (8004918 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	0b5b      	lsrs	r3, r3, #13
 8004908:	f003 0307 	and.w	r3, r3, #7
 800490c:	4a03      	ldr	r2, [pc, #12]	; (800491c <HAL_RCC_GetPCLK2Freq+0x24>)
 800490e:	5cd3      	ldrb	r3, [r2, r3]
 8004910:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004914:	4618      	mov	r0, r3
 8004916:	bd80      	pop	{r7, pc}
 8004918:	40023800 	.word	0x40023800
 800491c:	0800a654 	.word	0x0800a654

08004920 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b082      	sub	sp, #8
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d101      	bne.n	8004932 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e056      	b.n	80049e0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800493e:	b2db      	uxtb	r3, r3
 8004940:	2b00      	cmp	r3, #0
 8004942:	d106      	bne.n	8004952 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f7fe f9d7 	bl	8002d00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2202      	movs	r2, #2
 8004956:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004968:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685a      	ldr	r2, [r3, #4]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	431a      	orrs	r2, r3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	431a      	orrs	r2, r3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	431a      	orrs	r2, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	695b      	ldr	r3, [r3, #20]
 8004984:	431a      	orrs	r2, r3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	699b      	ldr	r3, [r3, #24]
 800498a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800498e:	431a      	orrs	r2, r3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	69db      	ldr	r3, [r3, #28]
 8004994:	431a      	orrs	r2, r3
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a1b      	ldr	r3, [r3, #32]
 800499a:	ea42 0103 	orr.w	r1, r2, r3
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	430a      	orrs	r2, r1
 80049a8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	699b      	ldr	r3, [r3, #24]
 80049ae:	0c1b      	lsrs	r3, r3, #16
 80049b0:	f003 0104 	and.w	r1, r3, #4
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	430a      	orrs	r2, r1
 80049be:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	69da      	ldr	r2, [r3, #28]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049ce:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2201      	movs	r2, #1
 80049da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80049de:	2300      	movs	r3, #0
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3708      	adds	r7, #8
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b088      	sub	sp, #32
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	60b9      	str	r1, [r7, #8]
 80049f2:	603b      	str	r3, [r7, #0]
 80049f4:	4613      	mov	r3, r2
 80049f6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80049f8:	2300      	movs	r3, #0
 80049fa:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d101      	bne.n	8004a0a <HAL_SPI_Transmit+0x22>
 8004a06:	2302      	movs	r3, #2
 8004a08:	e11e      	b.n	8004c48 <HAL_SPI_Transmit+0x260>
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a12:	f7fe fb05 	bl	8003020 <HAL_GetTick>
 8004a16:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004a18:	88fb      	ldrh	r3, [r7, #6]
 8004a1a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d002      	beq.n	8004a2e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004a28:	2302      	movs	r3, #2
 8004a2a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a2c:	e103      	b.n	8004c36 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d002      	beq.n	8004a3a <HAL_SPI_Transmit+0x52>
 8004a34:	88fb      	ldrh	r3, [r7, #6]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d102      	bne.n	8004a40 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a3e:	e0fa      	b.n	8004c36 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2203      	movs	r2, #3
 8004a44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	68ba      	ldr	r2, [r7, #8]
 8004a52:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	88fa      	ldrh	r2, [r7, #6]
 8004a58:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	88fa      	ldrh	r2, [r7, #6]
 8004a5e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2200      	movs	r2, #0
 8004a64:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2200      	movs	r2, #0
 8004a76:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a86:	d107      	bne.n	8004a98 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a96:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aa2:	2b40      	cmp	r3, #64	; 0x40
 8004aa4:	d007      	beq.n	8004ab6 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ab4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004abe:	d14b      	bne.n	8004b58 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d002      	beq.n	8004ace <HAL_SPI_Transmit+0xe6>
 8004ac8:	8afb      	ldrh	r3, [r7, #22]
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d13e      	bne.n	8004b4c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad2:	881a      	ldrh	r2, [r3, #0]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ade:	1c9a      	adds	r2, r3, #2
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	3b01      	subs	r3, #1
 8004aec:	b29a      	uxth	r2, r3
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004af2:	e02b      	b.n	8004b4c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f003 0302 	and.w	r3, r3, #2
 8004afe:	2b02      	cmp	r3, #2
 8004b00:	d112      	bne.n	8004b28 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b06:	881a      	ldrh	r2, [r3, #0]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b12:	1c9a      	adds	r2, r3, #2
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	3b01      	subs	r3, #1
 8004b20:	b29a      	uxth	r2, r3
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	86da      	strh	r2, [r3, #54]	; 0x36
 8004b26:	e011      	b.n	8004b4c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b28:	f7fe fa7a 	bl	8003020 <HAL_GetTick>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	683a      	ldr	r2, [r7, #0]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d803      	bhi.n	8004b40 <HAL_SPI_Transmit+0x158>
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b3e:	d102      	bne.n	8004b46 <HAL_SPI_Transmit+0x15e>
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d102      	bne.n	8004b4c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004b4a:	e074      	b.n	8004c36 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d1ce      	bne.n	8004af4 <HAL_SPI_Transmit+0x10c>
 8004b56:	e04c      	b.n	8004bf2 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d002      	beq.n	8004b66 <HAL_SPI_Transmit+0x17e>
 8004b60:	8afb      	ldrh	r3, [r7, #22]
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d140      	bne.n	8004be8 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	330c      	adds	r3, #12
 8004b70:	7812      	ldrb	r2, [r2, #0]
 8004b72:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b78:	1c5a      	adds	r2, r3, #1
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	3b01      	subs	r3, #1
 8004b86:	b29a      	uxth	r2, r3
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004b8c:	e02c      	b.n	8004be8 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	f003 0302 	and.w	r3, r3, #2
 8004b98:	2b02      	cmp	r3, #2
 8004b9a:	d113      	bne.n	8004bc4 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	330c      	adds	r3, #12
 8004ba6:	7812      	ldrb	r2, [r2, #0]
 8004ba8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bae:	1c5a      	adds	r2, r3, #1
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	3b01      	subs	r3, #1
 8004bbc:	b29a      	uxth	r2, r3
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	86da      	strh	r2, [r3, #54]	; 0x36
 8004bc2:	e011      	b.n	8004be8 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bc4:	f7fe fa2c 	bl	8003020 <HAL_GetTick>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	683a      	ldr	r2, [r7, #0]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d803      	bhi.n	8004bdc <HAL_SPI_Transmit+0x1f4>
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bda:	d102      	bne.n	8004be2 <HAL_SPI_Transmit+0x1fa>
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d102      	bne.n	8004be8 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004be6:	e026      	b.n	8004c36 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d1cd      	bne.n	8004b8e <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004bf2:	69ba      	ldr	r2, [r7, #24]
 8004bf4:	6839      	ldr	r1, [r7, #0]
 8004bf6:	68f8      	ldr	r0, [r7, #12]
 8004bf8:	f000 fba4 	bl	8005344 <SPI_EndRxTxTransaction>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d002      	beq.n	8004c08 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2220      	movs	r2, #32
 8004c06:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d10a      	bne.n	8004c26 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c10:	2300      	movs	r3, #0
 8004c12:	613b      	str	r3, [r7, #16]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	613b      	str	r3, [r7, #16]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	613b      	str	r3, [r7, #16]
 8004c24:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d002      	beq.n	8004c34 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	77fb      	strb	r3, [r7, #31]
 8004c32:	e000      	b.n	8004c36 <HAL_SPI_Transmit+0x24e>
  }

error:
 8004c34:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2201      	movs	r2, #1
 8004c3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004c46:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3720      	adds	r7, #32
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b088      	sub	sp, #32
 8004c54:	af02      	add	r7, sp, #8
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	60b9      	str	r1, [r7, #8]
 8004c5a:	603b      	str	r3, [r7, #0]
 8004c5c:	4613      	mov	r3, r2
 8004c5e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004c60:	2300      	movs	r3, #0
 8004c62:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c6c:	d112      	bne.n	8004c94 <HAL_SPI_Receive+0x44>
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d10e      	bne.n	8004c94 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2204      	movs	r2, #4
 8004c7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004c7e:	88fa      	ldrh	r2, [r7, #6]
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	9300      	str	r3, [sp, #0]
 8004c84:	4613      	mov	r3, r2
 8004c86:	68ba      	ldr	r2, [r7, #8]
 8004c88:	68b9      	ldr	r1, [r7, #8]
 8004c8a:	68f8      	ldr	r0, [r7, #12]
 8004c8c:	f000 f8e9 	bl	8004e62 <HAL_SPI_TransmitReceive>
 8004c90:	4603      	mov	r3, r0
 8004c92:	e0e2      	b.n	8004e5a <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d101      	bne.n	8004ca2 <HAL_SPI_Receive+0x52>
 8004c9e:	2302      	movs	r3, #2
 8004ca0:	e0db      	b.n	8004e5a <HAL_SPI_Receive+0x20a>
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004caa:	f7fe f9b9 	bl	8003020 <HAL_GetTick>
 8004cae:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d002      	beq.n	8004cc2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004cbc:	2302      	movs	r3, #2
 8004cbe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004cc0:	e0c2      	b.n	8004e48 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d002      	beq.n	8004cce <HAL_SPI_Receive+0x7e>
 8004cc8:	88fb      	ldrh	r3, [r7, #6]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d102      	bne.n	8004cd4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004cd2:	e0b9      	b.n	8004e48 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2204      	movs	r2, #4
 8004cd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	68ba      	ldr	r2, [r7, #8]
 8004ce6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	88fa      	ldrh	r2, [r7, #6]
 8004cec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	88fa      	ldrh	r2, [r7, #6]
 8004cf2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2200      	movs	r2, #0
 8004d04:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d1a:	d107      	bne.n	8004d2c <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004d2a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d36:	2b40      	cmp	r3, #64	; 0x40
 8004d38:	d007      	beq.n	8004d4a <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d48:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d162      	bne.n	8004e18 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004d52:	e02e      	b.n	8004db2 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	f003 0301 	and.w	r3, r3, #1
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d115      	bne.n	8004d8e <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f103 020c 	add.w	r2, r3, #12
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d6e:	7812      	ldrb	r2, [r2, #0]
 8004d70:	b2d2      	uxtb	r2, r2
 8004d72:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d78:	1c5a      	adds	r2, r3, #1
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	3b01      	subs	r3, #1
 8004d86:	b29a      	uxth	r2, r3
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d8c:	e011      	b.n	8004db2 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d8e:	f7fe f947 	bl	8003020 <HAL_GetTick>
 8004d92:	4602      	mov	r2, r0
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	1ad3      	subs	r3, r2, r3
 8004d98:	683a      	ldr	r2, [r7, #0]
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d803      	bhi.n	8004da6 <HAL_SPI_Receive+0x156>
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004da4:	d102      	bne.n	8004dac <HAL_SPI_Receive+0x15c>
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d102      	bne.n	8004db2 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8004dac:	2303      	movs	r3, #3
 8004dae:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004db0:	e04a      	b.n	8004e48 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d1cb      	bne.n	8004d54 <HAL_SPI_Receive+0x104>
 8004dbc:	e031      	b.n	8004e22 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	f003 0301 	and.w	r3, r3, #1
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d113      	bne.n	8004df4 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	68da      	ldr	r2, [r3, #12]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd6:	b292      	uxth	r2, r2
 8004dd8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dde:	1c9a      	adds	r2, r3, #2
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	3b01      	subs	r3, #1
 8004dec:	b29a      	uxth	r2, r3
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004df2:	e011      	b.n	8004e18 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004df4:	f7fe f914 	bl	8003020 <HAL_GetTick>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	683a      	ldr	r2, [r7, #0]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d803      	bhi.n	8004e0c <HAL_SPI_Receive+0x1bc>
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e0a:	d102      	bne.n	8004e12 <HAL_SPI_Receive+0x1c2>
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d102      	bne.n	8004e18 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004e16:	e017      	b.n	8004e48 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d1cd      	bne.n	8004dbe <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e22:	693a      	ldr	r2, [r7, #16]
 8004e24:	6839      	ldr	r1, [r7, #0]
 8004e26:	68f8      	ldr	r0, [r7, #12]
 8004e28:	f000 fa27 	bl	800527a <SPI_EndRxTransaction>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d002      	beq.n	8004e38 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2220      	movs	r2, #32
 8004e36:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d002      	beq.n	8004e46 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	75fb      	strb	r3, [r7, #23]
 8004e44:	e000      	b.n	8004e48 <HAL_SPI_Receive+0x1f8>
  }

error :
 8004e46:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2200      	movs	r2, #0
 8004e54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004e58:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3718      	adds	r7, #24
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}

08004e62 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004e62:	b580      	push	{r7, lr}
 8004e64:	b08c      	sub	sp, #48	; 0x30
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	60f8      	str	r0, [r7, #12]
 8004e6a:	60b9      	str	r1, [r7, #8]
 8004e6c:	607a      	str	r2, [r7, #4]
 8004e6e:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004e70:	2301      	movs	r3, #1
 8004e72:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004e74:	2300      	movs	r3, #0
 8004e76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d101      	bne.n	8004e88 <HAL_SPI_TransmitReceive+0x26>
 8004e84:	2302      	movs	r3, #2
 8004e86:	e18a      	b.n	800519e <HAL_SPI_TransmitReceive+0x33c>
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e90:	f7fe f8c6 	bl	8003020 <HAL_GetTick>
 8004e94:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004ea6:	887b      	ldrh	r3, [r7, #2]
 8004ea8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004eaa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d00f      	beq.n	8004ed2 <HAL_SPI_TransmitReceive+0x70>
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004eb8:	d107      	bne.n	8004eca <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d103      	bne.n	8004eca <HAL_SPI_TransmitReceive+0x68>
 8004ec2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ec6:	2b04      	cmp	r3, #4
 8004ec8:	d003      	beq.n	8004ed2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004eca:	2302      	movs	r3, #2
 8004ecc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004ed0:	e15b      	b.n	800518a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d005      	beq.n	8004ee4 <HAL_SPI_TransmitReceive+0x82>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d002      	beq.n	8004ee4 <HAL_SPI_TransmitReceive+0x82>
 8004ede:	887b      	ldrh	r3, [r7, #2]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d103      	bne.n	8004eec <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004eea:	e14e      	b.n	800518a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	2b04      	cmp	r3, #4
 8004ef6:	d003      	beq.n	8004f00 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2205      	movs	r2, #5
 8004efc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2200      	movs	r2, #0
 8004f04:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	887a      	ldrh	r2, [r7, #2]
 8004f10:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	887a      	ldrh	r2, [r7, #2]
 8004f16:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	68ba      	ldr	r2, [r7, #8]
 8004f1c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	887a      	ldrh	r2, [r7, #2]
 8004f22:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	887a      	ldrh	r2, [r7, #2]
 8004f28:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2200      	movs	r2, #0
 8004f34:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f40:	2b40      	cmp	r3, #64	; 0x40
 8004f42:	d007      	beq.n	8004f54 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f52:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f5c:	d178      	bne.n	8005050 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d002      	beq.n	8004f6c <HAL_SPI_TransmitReceive+0x10a>
 8004f66:	8b7b      	ldrh	r3, [r7, #26]
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d166      	bne.n	800503a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f70:	881a      	ldrh	r2, [r3, #0]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f7c:	1c9a      	adds	r2, r3, #2
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	3b01      	subs	r3, #1
 8004f8a:	b29a      	uxth	r2, r3
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f90:	e053      	b.n	800503a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	f003 0302 	and.w	r3, r3, #2
 8004f9c:	2b02      	cmp	r3, #2
 8004f9e:	d11b      	bne.n	8004fd8 <HAL_SPI_TransmitReceive+0x176>
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d016      	beq.n	8004fd8 <HAL_SPI_TransmitReceive+0x176>
 8004faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d113      	bne.n	8004fd8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb4:	881a      	ldrh	r2, [r3, #0]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc0:	1c9a      	adds	r2, r3, #2
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	3b01      	subs	r3, #1
 8004fce:	b29a      	uxth	r2, r3
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	f003 0301 	and.w	r3, r3, #1
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d119      	bne.n	800501a <HAL_SPI_TransmitReceive+0x1b8>
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d014      	beq.n	800501a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	68da      	ldr	r2, [r3, #12]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ffa:	b292      	uxth	r2, r2
 8004ffc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005002:	1c9a      	adds	r2, r3, #2
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800500c:	b29b      	uxth	r3, r3
 800500e:	3b01      	subs	r3, #1
 8005010:	b29a      	uxth	r2, r3
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005016:	2301      	movs	r3, #1
 8005018:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800501a:	f7fe f801 	bl	8003020 <HAL_GetTick>
 800501e:	4602      	mov	r2, r0
 8005020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005022:	1ad3      	subs	r3, r2, r3
 8005024:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005026:	429a      	cmp	r2, r3
 8005028:	d807      	bhi.n	800503a <HAL_SPI_TransmitReceive+0x1d8>
 800502a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800502c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005030:	d003      	beq.n	800503a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005032:	2303      	movs	r3, #3
 8005034:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005038:	e0a7      	b.n	800518a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800503e:	b29b      	uxth	r3, r3
 8005040:	2b00      	cmp	r3, #0
 8005042:	d1a6      	bne.n	8004f92 <HAL_SPI_TransmitReceive+0x130>
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005048:	b29b      	uxth	r3, r3
 800504a:	2b00      	cmp	r3, #0
 800504c:	d1a1      	bne.n	8004f92 <HAL_SPI_TransmitReceive+0x130>
 800504e:	e07c      	b.n	800514a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d002      	beq.n	800505e <HAL_SPI_TransmitReceive+0x1fc>
 8005058:	8b7b      	ldrh	r3, [r7, #26]
 800505a:	2b01      	cmp	r3, #1
 800505c:	d16b      	bne.n	8005136 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	330c      	adds	r3, #12
 8005068:	7812      	ldrb	r2, [r2, #0]
 800506a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005070:	1c5a      	adds	r2, r3, #1
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800507a:	b29b      	uxth	r3, r3
 800507c:	3b01      	subs	r3, #1
 800507e:	b29a      	uxth	r2, r3
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005084:	e057      	b.n	8005136 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	f003 0302 	and.w	r3, r3, #2
 8005090:	2b02      	cmp	r3, #2
 8005092:	d11c      	bne.n	80050ce <HAL_SPI_TransmitReceive+0x26c>
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005098:	b29b      	uxth	r3, r3
 800509a:	2b00      	cmp	r3, #0
 800509c:	d017      	beq.n	80050ce <HAL_SPI_TransmitReceive+0x26c>
 800509e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d114      	bne.n	80050ce <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	330c      	adds	r3, #12
 80050ae:	7812      	ldrb	r2, [r2, #0]
 80050b0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b6:	1c5a      	adds	r2, r3, #1
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	3b01      	subs	r3, #1
 80050c4:	b29a      	uxth	r2, r3
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80050ca:	2300      	movs	r3, #0
 80050cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	f003 0301 	and.w	r3, r3, #1
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d119      	bne.n	8005110 <HAL_SPI_TransmitReceive+0x2ae>
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d014      	beq.n	8005110 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	68da      	ldr	r2, [r3, #12]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f0:	b2d2      	uxtb	r2, r2
 80050f2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f8:	1c5a      	adds	r2, r3, #1
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005102:	b29b      	uxth	r3, r3
 8005104:	3b01      	subs	r3, #1
 8005106:	b29a      	uxth	r2, r3
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800510c:	2301      	movs	r3, #1
 800510e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005110:	f7fd ff86 	bl	8003020 <HAL_GetTick>
 8005114:	4602      	mov	r2, r0
 8005116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800511c:	429a      	cmp	r2, r3
 800511e:	d803      	bhi.n	8005128 <HAL_SPI_TransmitReceive+0x2c6>
 8005120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005122:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005126:	d102      	bne.n	800512e <HAL_SPI_TransmitReceive+0x2cc>
 8005128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800512a:	2b00      	cmp	r3, #0
 800512c:	d103      	bne.n	8005136 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005134:	e029      	b.n	800518a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800513a:	b29b      	uxth	r3, r3
 800513c:	2b00      	cmp	r3, #0
 800513e:	d1a2      	bne.n	8005086 <HAL_SPI_TransmitReceive+0x224>
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005144:	b29b      	uxth	r3, r3
 8005146:	2b00      	cmp	r3, #0
 8005148:	d19d      	bne.n	8005086 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800514a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800514c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800514e:	68f8      	ldr	r0, [r7, #12]
 8005150:	f000 f8f8 	bl	8005344 <SPI_EndRxTxTransaction>
 8005154:	4603      	mov	r3, r0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d006      	beq.n	8005168 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2220      	movs	r2, #32
 8005164:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005166:	e010      	b.n	800518a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d10b      	bne.n	8005188 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005170:	2300      	movs	r3, #0
 8005172:	617b      	str	r3, [r7, #20]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	68db      	ldr	r3, [r3, #12]
 800517a:	617b      	str	r3, [r7, #20]
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	617b      	str	r3, [r7, #20]
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	e000      	b.n	800518a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005188:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2201      	movs	r2, #1
 800518e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2200      	movs	r2, #0
 8005196:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800519a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3730      	adds	r7, #48	; 0x30
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}

080051a6 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80051a6:	b580      	push	{r7, lr}
 80051a8:	b084      	sub	sp, #16
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	60f8      	str	r0, [r7, #12]
 80051ae:	60b9      	str	r1, [r7, #8]
 80051b0:	603b      	str	r3, [r7, #0]
 80051b2:	4613      	mov	r3, r2
 80051b4:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80051b6:	e04c      	b.n	8005252 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051be:	d048      	beq.n	8005252 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80051c0:	f7fd ff2e 	bl	8003020 <HAL_GetTick>
 80051c4:	4602      	mov	r2, r0
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	683a      	ldr	r2, [r7, #0]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d902      	bls.n	80051d6 <SPI_WaitFlagStateUntilTimeout+0x30>
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d13d      	bne.n	8005252 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	685a      	ldr	r2, [r3, #4]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80051e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051ee:	d111      	bne.n	8005214 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051f8:	d004      	beq.n	8005204 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005202:	d107      	bne.n	8005214 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005212:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005218:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800521c:	d10f      	bne.n	800523e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800522c:	601a      	str	r2, [r3, #0]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800523c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2201      	movs	r2, #1
 8005242:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2200      	movs	r2, #0
 800524a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800524e:	2303      	movs	r3, #3
 8005250:	e00f      	b.n	8005272 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	689a      	ldr	r2, [r3, #8]
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	4013      	ands	r3, r2
 800525c:	68ba      	ldr	r2, [r7, #8]
 800525e:	429a      	cmp	r2, r3
 8005260:	bf0c      	ite	eq
 8005262:	2301      	moveq	r3, #1
 8005264:	2300      	movne	r3, #0
 8005266:	b2db      	uxtb	r3, r3
 8005268:	461a      	mov	r2, r3
 800526a:	79fb      	ldrb	r3, [r7, #7]
 800526c:	429a      	cmp	r2, r3
 800526e:	d1a3      	bne.n	80051b8 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005270:	2300      	movs	r3, #0
}
 8005272:	4618      	mov	r0, r3
 8005274:	3710      	adds	r7, #16
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}

0800527a <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800527a:	b580      	push	{r7, lr}
 800527c:	b086      	sub	sp, #24
 800527e:	af02      	add	r7, sp, #8
 8005280:	60f8      	str	r0, [r7, #12]
 8005282:	60b9      	str	r1, [r7, #8]
 8005284:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800528e:	d111      	bne.n	80052b4 <SPI_EndRxTransaction+0x3a>
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005298:	d004      	beq.n	80052a4 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052a2:	d107      	bne.n	80052b4 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052b2:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052bc:	d12a      	bne.n	8005314 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052c6:	d012      	beq.n	80052ee <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	9300      	str	r3, [sp, #0]
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	2200      	movs	r2, #0
 80052d0:	2180      	movs	r1, #128	; 0x80
 80052d2:	68f8      	ldr	r0, [r7, #12]
 80052d4:	f7ff ff67 	bl	80051a6 <SPI_WaitFlagStateUntilTimeout>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d02d      	beq.n	800533a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052e2:	f043 0220 	orr.w	r2, r3, #32
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80052ea:	2303      	movs	r3, #3
 80052ec:	e026      	b.n	800533c <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	9300      	str	r3, [sp, #0]
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	2200      	movs	r2, #0
 80052f6:	2101      	movs	r1, #1
 80052f8:	68f8      	ldr	r0, [r7, #12]
 80052fa:	f7ff ff54 	bl	80051a6 <SPI_WaitFlagStateUntilTimeout>
 80052fe:	4603      	mov	r3, r0
 8005300:	2b00      	cmp	r3, #0
 8005302:	d01a      	beq.n	800533a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005308:	f043 0220 	orr.w	r2, r3, #32
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005310:	2303      	movs	r3, #3
 8005312:	e013      	b.n	800533c <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	9300      	str	r3, [sp, #0]
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	2200      	movs	r2, #0
 800531c:	2101      	movs	r1, #1
 800531e:	68f8      	ldr	r0, [r7, #12]
 8005320:	f7ff ff41 	bl	80051a6 <SPI_WaitFlagStateUntilTimeout>
 8005324:	4603      	mov	r3, r0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d007      	beq.n	800533a <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800532e:	f043 0220 	orr.w	r2, r3, #32
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	e000      	b.n	800533c <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800533a:	2300      	movs	r3, #0
}
 800533c:	4618      	mov	r0, r3
 800533e:	3710      	adds	r7, #16
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}

08005344 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b088      	sub	sp, #32
 8005348:	af02      	add	r7, sp, #8
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	60b9      	str	r1, [r7, #8]
 800534e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005350:	4b1b      	ldr	r3, [pc, #108]	; (80053c0 <SPI_EndRxTxTransaction+0x7c>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a1b      	ldr	r2, [pc, #108]	; (80053c4 <SPI_EndRxTxTransaction+0x80>)
 8005356:	fba2 2303 	umull	r2, r3, r2, r3
 800535a:	0d5b      	lsrs	r3, r3, #21
 800535c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005360:	fb02 f303 	mul.w	r3, r2, r3
 8005364:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800536e:	d112      	bne.n	8005396 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	9300      	str	r3, [sp, #0]
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	2200      	movs	r2, #0
 8005378:	2180      	movs	r1, #128	; 0x80
 800537a:	68f8      	ldr	r0, [r7, #12]
 800537c:	f7ff ff13 	bl	80051a6 <SPI_WaitFlagStateUntilTimeout>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d016      	beq.n	80053b4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800538a:	f043 0220 	orr.w	r2, r3, #32
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005392:	2303      	movs	r3, #3
 8005394:	e00f      	b.n	80053b6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d00a      	beq.n	80053b2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	3b01      	subs	r3, #1
 80053a0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ac:	2b80      	cmp	r3, #128	; 0x80
 80053ae:	d0f2      	beq.n	8005396 <SPI_EndRxTxTransaction+0x52>
 80053b0:	e000      	b.n	80053b4 <SPI_EndRxTxTransaction+0x70>
        break;
 80053b2:	bf00      	nop
  }

  return HAL_OK;
 80053b4:	2300      	movs	r3, #0
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3718      	adds	r7, #24
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}
 80053be:	bf00      	nop
 80053c0:	20000008 	.word	0x20000008
 80053c4:	165e9f81 	.word	0x165e9f81

080053c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b082      	sub	sp, #8
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d101      	bne.n	80053da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e03f      	b.n	800545a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d106      	bne.n	80053f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f7fd fcce 	bl	8002d90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2224      	movs	r2, #36	; 0x24
 80053f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	68da      	ldr	r2, [r3, #12]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800540a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f000 f90b 	bl	8005628 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	691a      	ldr	r2, [r3, #16]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005420:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	695a      	ldr	r2, [r3, #20]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005430:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	68da      	ldr	r2, [r3, #12]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005440:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2220      	movs	r2, #32
 800544c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2220      	movs	r2, #32
 8005454:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	3708      	adds	r7, #8
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}

08005462 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005462:	b580      	push	{r7, lr}
 8005464:	b088      	sub	sp, #32
 8005466:	af02      	add	r7, sp, #8
 8005468:	60f8      	str	r0, [r7, #12]
 800546a:	60b9      	str	r1, [r7, #8]
 800546c:	603b      	str	r3, [r7, #0]
 800546e:	4613      	mov	r3, r2
 8005470:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005472:	2300      	movs	r3, #0
 8005474:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800547c:	b2db      	uxtb	r3, r3
 800547e:	2b20      	cmp	r3, #32
 8005480:	f040 8083 	bne.w	800558a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d002      	beq.n	8005490 <HAL_UART_Transmit+0x2e>
 800548a:	88fb      	ldrh	r3, [r7, #6]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d101      	bne.n	8005494 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	e07b      	b.n	800558c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800549a:	2b01      	cmp	r3, #1
 800549c:	d101      	bne.n	80054a2 <HAL_UART_Transmit+0x40>
 800549e:	2302      	movs	r3, #2
 80054a0:	e074      	b.n	800558c <HAL_UART_Transmit+0x12a>
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2201      	movs	r2, #1
 80054a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2200      	movs	r2, #0
 80054ae:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2221      	movs	r2, #33	; 0x21
 80054b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80054b8:	f7fd fdb2 	bl	8003020 <HAL_GetTick>
 80054bc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	88fa      	ldrh	r2, [r7, #6]
 80054c2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	88fa      	ldrh	r2, [r7, #6]
 80054c8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80054d2:	e042      	b.n	800555a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80054d8:	b29b      	uxth	r3, r3
 80054da:	3b01      	subs	r3, #1
 80054dc:	b29a      	uxth	r2, r3
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054ea:	d122      	bne.n	8005532 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	9300      	str	r3, [sp, #0]
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	2200      	movs	r2, #0
 80054f4:	2180      	movs	r1, #128	; 0x80
 80054f6:	68f8      	ldr	r0, [r7, #12]
 80054f8:	f000 f84c 	bl	8005594 <UART_WaitOnFlagUntilTimeout>
 80054fc:	4603      	mov	r3, r0
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d001      	beq.n	8005506 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8005502:	2303      	movs	r3, #3
 8005504:	e042      	b.n	800558c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	881b      	ldrh	r3, [r3, #0]
 800550e:	461a      	mov	r2, r3
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005518:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	691b      	ldr	r3, [r3, #16]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d103      	bne.n	800552a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	3302      	adds	r3, #2
 8005526:	60bb      	str	r3, [r7, #8]
 8005528:	e017      	b.n	800555a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	3301      	adds	r3, #1
 800552e:	60bb      	str	r3, [r7, #8]
 8005530:	e013      	b.n	800555a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	9300      	str	r3, [sp, #0]
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	2200      	movs	r2, #0
 800553a:	2180      	movs	r1, #128	; 0x80
 800553c:	68f8      	ldr	r0, [r7, #12]
 800553e:	f000 f829 	bl	8005594 <UART_WaitOnFlagUntilTimeout>
 8005542:	4603      	mov	r3, r0
 8005544:	2b00      	cmp	r3, #0
 8005546:	d001      	beq.n	800554c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8005548:	2303      	movs	r3, #3
 800554a:	e01f      	b.n	800558c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	1c5a      	adds	r2, r3, #1
 8005550:	60ba      	str	r2, [r7, #8]
 8005552:	781a      	ldrb	r2, [r3, #0]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800555e:	b29b      	uxth	r3, r3
 8005560:	2b00      	cmp	r3, #0
 8005562:	d1b7      	bne.n	80054d4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	9300      	str	r3, [sp, #0]
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	2200      	movs	r2, #0
 800556c:	2140      	movs	r1, #64	; 0x40
 800556e:	68f8      	ldr	r0, [r7, #12]
 8005570:	f000 f810 	bl	8005594 <UART_WaitOnFlagUntilTimeout>
 8005574:	4603      	mov	r3, r0
 8005576:	2b00      	cmp	r3, #0
 8005578:	d001      	beq.n	800557e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800557a:	2303      	movs	r3, #3
 800557c:	e006      	b.n	800558c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2220      	movs	r2, #32
 8005582:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8005586:	2300      	movs	r3, #0
 8005588:	e000      	b.n	800558c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800558a:	2302      	movs	r3, #2
  }
}
 800558c:	4618      	mov	r0, r3
 800558e:	3718      	adds	r7, #24
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}

08005594 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b084      	sub	sp, #16
 8005598:	af00      	add	r7, sp, #0
 800559a:	60f8      	str	r0, [r7, #12]
 800559c:	60b9      	str	r1, [r7, #8]
 800559e:	603b      	str	r3, [r7, #0]
 80055a0:	4613      	mov	r3, r2
 80055a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055a4:	e02c      	b.n	8005600 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055a6:	69bb      	ldr	r3, [r7, #24]
 80055a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055ac:	d028      	beq.n	8005600 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80055ae:	69bb      	ldr	r3, [r7, #24]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d007      	beq.n	80055c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80055b4:	f7fd fd34 	bl	8003020 <HAL_GetTick>
 80055b8:	4602      	mov	r2, r0
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	69ba      	ldr	r2, [r7, #24]
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d21d      	bcs.n	8005600 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68da      	ldr	r2, [r3, #12]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80055d2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	695a      	ldr	r2, [r3, #20]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f022 0201 	bic.w	r2, r2, #1
 80055e2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2220      	movs	r2, #32
 80055e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2220      	movs	r2, #32
 80055f0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2200      	movs	r2, #0
 80055f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80055fc:	2303      	movs	r3, #3
 80055fe:	e00f      	b.n	8005620 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	4013      	ands	r3, r2
 800560a:	68ba      	ldr	r2, [r7, #8]
 800560c:	429a      	cmp	r2, r3
 800560e:	bf0c      	ite	eq
 8005610:	2301      	moveq	r3, #1
 8005612:	2300      	movne	r3, #0
 8005614:	b2db      	uxtb	r3, r3
 8005616:	461a      	mov	r2, r3
 8005618:	79fb      	ldrb	r3, [r7, #7]
 800561a:	429a      	cmp	r2, r3
 800561c:	d0c3      	beq.n	80055a6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800561e:	2300      	movs	r3, #0
}
 8005620:	4618      	mov	r0, r3
 8005622:	3710      	adds	r7, #16
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}

08005628 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800562c:	b085      	sub	sp, #20
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	691b      	ldr	r3, [r3, #16]
 8005638:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	68da      	ldr	r2, [r3, #12]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	430a      	orrs	r2, r1
 8005646:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	689a      	ldr	r2, [r3, #8]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	691b      	ldr	r3, [r3, #16]
 8005650:	431a      	orrs	r2, r3
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	695b      	ldr	r3, [r3, #20]
 8005656:	431a      	orrs	r2, r3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	69db      	ldr	r3, [r3, #28]
 800565c:	4313      	orrs	r3, r2
 800565e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800566a:	f023 030c 	bic.w	r3, r3, #12
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	6812      	ldr	r2, [r2, #0]
 8005672:	68f9      	ldr	r1, [r7, #12]
 8005674:	430b      	orrs	r3, r1
 8005676:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	695b      	ldr	r3, [r3, #20]
 800567e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	699a      	ldr	r2, [r3, #24]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	430a      	orrs	r2, r1
 800568c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	69db      	ldr	r3, [r3, #28]
 8005692:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005696:	f040 818b 	bne.w	80059b0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4ac1      	ldr	r2, [pc, #772]	; (80059a4 <UART_SetConfig+0x37c>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d005      	beq.n	80056b0 <UART_SetConfig+0x88>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4abf      	ldr	r2, [pc, #764]	; (80059a8 <UART_SetConfig+0x380>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	f040 80bd 	bne.w	800582a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80056b0:	f7ff f922 	bl	80048f8 <HAL_RCC_GetPCLK2Freq>
 80056b4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	461d      	mov	r5, r3
 80056ba:	f04f 0600 	mov.w	r6, #0
 80056be:	46a8      	mov	r8, r5
 80056c0:	46b1      	mov	r9, r6
 80056c2:	eb18 0308 	adds.w	r3, r8, r8
 80056c6:	eb49 0409 	adc.w	r4, r9, r9
 80056ca:	4698      	mov	r8, r3
 80056cc:	46a1      	mov	r9, r4
 80056ce:	eb18 0805 	adds.w	r8, r8, r5
 80056d2:	eb49 0906 	adc.w	r9, r9, r6
 80056d6:	f04f 0100 	mov.w	r1, #0
 80056da:	f04f 0200 	mov.w	r2, #0
 80056de:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80056e2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80056e6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80056ea:	4688      	mov	r8, r1
 80056ec:	4691      	mov	r9, r2
 80056ee:	eb18 0005 	adds.w	r0, r8, r5
 80056f2:	eb49 0106 	adc.w	r1, r9, r6
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	461d      	mov	r5, r3
 80056fc:	f04f 0600 	mov.w	r6, #0
 8005700:	196b      	adds	r3, r5, r5
 8005702:	eb46 0406 	adc.w	r4, r6, r6
 8005706:	461a      	mov	r2, r3
 8005708:	4623      	mov	r3, r4
 800570a:	f7fb fac5 	bl	8000c98 <__aeabi_uldivmod>
 800570e:	4603      	mov	r3, r0
 8005710:	460c      	mov	r4, r1
 8005712:	461a      	mov	r2, r3
 8005714:	4ba5      	ldr	r3, [pc, #660]	; (80059ac <UART_SetConfig+0x384>)
 8005716:	fba3 2302 	umull	r2, r3, r3, r2
 800571a:	095b      	lsrs	r3, r3, #5
 800571c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	461d      	mov	r5, r3
 8005724:	f04f 0600 	mov.w	r6, #0
 8005728:	46a9      	mov	r9, r5
 800572a:	46b2      	mov	sl, r6
 800572c:	eb19 0309 	adds.w	r3, r9, r9
 8005730:	eb4a 040a 	adc.w	r4, sl, sl
 8005734:	4699      	mov	r9, r3
 8005736:	46a2      	mov	sl, r4
 8005738:	eb19 0905 	adds.w	r9, r9, r5
 800573c:	eb4a 0a06 	adc.w	sl, sl, r6
 8005740:	f04f 0100 	mov.w	r1, #0
 8005744:	f04f 0200 	mov.w	r2, #0
 8005748:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800574c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005750:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005754:	4689      	mov	r9, r1
 8005756:	4692      	mov	sl, r2
 8005758:	eb19 0005 	adds.w	r0, r9, r5
 800575c:	eb4a 0106 	adc.w	r1, sl, r6
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	461d      	mov	r5, r3
 8005766:	f04f 0600 	mov.w	r6, #0
 800576a:	196b      	adds	r3, r5, r5
 800576c:	eb46 0406 	adc.w	r4, r6, r6
 8005770:	461a      	mov	r2, r3
 8005772:	4623      	mov	r3, r4
 8005774:	f7fb fa90 	bl	8000c98 <__aeabi_uldivmod>
 8005778:	4603      	mov	r3, r0
 800577a:	460c      	mov	r4, r1
 800577c:	461a      	mov	r2, r3
 800577e:	4b8b      	ldr	r3, [pc, #556]	; (80059ac <UART_SetConfig+0x384>)
 8005780:	fba3 1302 	umull	r1, r3, r3, r2
 8005784:	095b      	lsrs	r3, r3, #5
 8005786:	2164      	movs	r1, #100	; 0x64
 8005788:	fb01 f303 	mul.w	r3, r1, r3
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	00db      	lsls	r3, r3, #3
 8005790:	3332      	adds	r3, #50	; 0x32
 8005792:	4a86      	ldr	r2, [pc, #536]	; (80059ac <UART_SetConfig+0x384>)
 8005794:	fba2 2303 	umull	r2, r3, r2, r3
 8005798:	095b      	lsrs	r3, r3, #5
 800579a:	005b      	lsls	r3, r3, #1
 800579c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80057a0:	4498      	add	r8, r3
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	461d      	mov	r5, r3
 80057a6:	f04f 0600 	mov.w	r6, #0
 80057aa:	46a9      	mov	r9, r5
 80057ac:	46b2      	mov	sl, r6
 80057ae:	eb19 0309 	adds.w	r3, r9, r9
 80057b2:	eb4a 040a 	adc.w	r4, sl, sl
 80057b6:	4699      	mov	r9, r3
 80057b8:	46a2      	mov	sl, r4
 80057ba:	eb19 0905 	adds.w	r9, r9, r5
 80057be:	eb4a 0a06 	adc.w	sl, sl, r6
 80057c2:	f04f 0100 	mov.w	r1, #0
 80057c6:	f04f 0200 	mov.w	r2, #0
 80057ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80057ce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80057d2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80057d6:	4689      	mov	r9, r1
 80057d8:	4692      	mov	sl, r2
 80057da:	eb19 0005 	adds.w	r0, r9, r5
 80057de:	eb4a 0106 	adc.w	r1, sl, r6
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	461d      	mov	r5, r3
 80057e8:	f04f 0600 	mov.w	r6, #0
 80057ec:	196b      	adds	r3, r5, r5
 80057ee:	eb46 0406 	adc.w	r4, r6, r6
 80057f2:	461a      	mov	r2, r3
 80057f4:	4623      	mov	r3, r4
 80057f6:	f7fb fa4f 	bl	8000c98 <__aeabi_uldivmod>
 80057fa:	4603      	mov	r3, r0
 80057fc:	460c      	mov	r4, r1
 80057fe:	461a      	mov	r2, r3
 8005800:	4b6a      	ldr	r3, [pc, #424]	; (80059ac <UART_SetConfig+0x384>)
 8005802:	fba3 1302 	umull	r1, r3, r3, r2
 8005806:	095b      	lsrs	r3, r3, #5
 8005808:	2164      	movs	r1, #100	; 0x64
 800580a:	fb01 f303 	mul.w	r3, r1, r3
 800580e:	1ad3      	subs	r3, r2, r3
 8005810:	00db      	lsls	r3, r3, #3
 8005812:	3332      	adds	r3, #50	; 0x32
 8005814:	4a65      	ldr	r2, [pc, #404]	; (80059ac <UART_SetConfig+0x384>)
 8005816:	fba2 2303 	umull	r2, r3, r2, r3
 800581a:	095b      	lsrs	r3, r3, #5
 800581c:	f003 0207 	and.w	r2, r3, #7
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4442      	add	r2, r8
 8005826:	609a      	str	r2, [r3, #8]
 8005828:	e26f      	b.n	8005d0a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800582a:	f7ff f851 	bl	80048d0 <HAL_RCC_GetPCLK1Freq>
 800582e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	461d      	mov	r5, r3
 8005834:	f04f 0600 	mov.w	r6, #0
 8005838:	46a8      	mov	r8, r5
 800583a:	46b1      	mov	r9, r6
 800583c:	eb18 0308 	adds.w	r3, r8, r8
 8005840:	eb49 0409 	adc.w	r4, r9, r9
 8005844:	4698      	mov	r8, r3
 8005846:	46a1      	mov	r9, r4
 8005848:	eb18 0805 	adds.w	r8, r8, r5
 800584c:	eb49 0906 	adc.w	r9, r9, r6
 8005850:	f04f 0100 	mov.w	r1, #0
 8005854:	f04f 0200 	mov.w	r2, #0
 8005858:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800585c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005860:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005864:	4688      	mov	r8, r1
 8005866:	4691      	mov	r9, r2
 8005868:	eb18 0005 	adds.w	r0, r8, r5
 800586c:	eb49 0106 	adc.w	r1, r9, r6
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	461d      	mov	r5, r3
 8005876:	f04f 0600 	mov.w	r6, #0
 800587a:	196b      	adds	r3, r5, r5
 800587c:	eb46 0406 	adc.w	r4, r6, r6
 8005880:	461a      	mov	r2, r3
 8005882:	4623      	mov	r3, r4
 8005884:	f7fb fa08 	bl	8000c98 <__aeabi_uldivmod>
 8005888:	4603      	mov	r3, r0
 800588a:	460c      	mov	r4, r1
 800588c:	461a      	mov	r2, r3
 800588e:	4b47      	ldr	r3, [pc, #284]	; (80059ac <UART_SetConfig+0x384>)
 8005890:	fba3 2302 	umull	r2, r3, r3, r2
 8005894:	095b      	lsrs	r3, r3, #5
 8005896:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	461d      	mov	r5, r3
 800589e:	f04f 0600 	mov.w	r6, #0
 80058a2:	46a9      	mov	r9, r5
 80058a4:	46b2      	mov	sl, r6
 80058a6:	eb19 0309 	adds.w	r3, r9, r9
 80058aa:	eb4a 040a 	adc.w	r4, sl, sl
 80058ae:	4699      	mov	r9, r3
 80058b0:	46a2      	mov	sl, r4
 80058b2:	eb19 0905 	adds.w	r9, r9, r5
 80058b6:	eb4a 0a06 	adc.w	sl, sl, r6
 80058ba:	f04f 0100 	mov.w	r1, #0
 80058be:	f04f 0200 	mov.w	r2, #0
 80058c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80058c6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80058ca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80058ce:	4689      	mov	r9, r1
 80058d0:	4692      	mov	sl, r2
 80058d2:	eb19 0005 	adds.w	r0, r9, r5
 80058d6:	eb4a 0106 	adc.w	r1, sl, r6
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	461d      	mov	r5, r3
 80058e0:	f04f 0600 	mov.w	r6, #0
 80058e4:	196b      	adds	r3, r5, r5
 80058e6:	eb46 0406 	adc.w	r4, r6, r6
 80058ea:	461a      	mov	r2, r3
 80058ec:	4623      	mov	r3, r4
 80058ee:	f7fb f9d3 	bl	8000c98 <__aeabi_uldivmod>
 80058f2:	4603      	mov	r3, r0
 80058f4:	460c      	mov	r4, r1
 80058f6:	461a      	mov	r2, r3
 80058f8:	4b2c      	ldr	r3, [pc, #176]	; (80059ac <UART_SetConfig+0x384>)
 80058fa:	fba3 1302 	umull	r1, r3, r3, r2
 80058fe:	095b      	lsrs	r3, r3, #5
 8005900:	2164      	movs	r1, #100	; 0x64
 8005902:	fb01 f303 	mul.w	r3, r1, r3
 8005906:	1ad3      	subs	r3, r2, r3
 8005908:	00db      	lsls	r3, r3, #3
 800590a:	3332      	adds	r3, #50	; 0x32
 800590c:	4a27      	ldr	r2, [pc, #156]	; (80059ac <UART_SetConfig+0x384>)
 800590e:	fba2 2303 	umull	r2, r3, r2, r3
 8005912:	095b      	lsrs	r3, r3, #5
 8005914:	005b      	lsls	r3, r3, #1
 8005916:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800591a:	4498      	add	r8, r3
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	461d      	mov	r5, r3
 8005920:	f04f 0600 	mov.w	r6, #0
 8005924:	46a9      	mov	r9, r5
 8005926:	46b2      	mov	sl, r6
 8005928:	eb19 0309 	adds.w	r3, r9, r9
 800592c:	eb4a 040a 	adc.w	r4, sl, sl
 8005930:	4699      	mov	r9, r3
 8005932:	46a2      	mov	sl, r4
 8005934:	eb19 0905 	adds.w	r9, r9, r5
 8005938:	eb4a 0a06 	adc.w	sl, sl, r6
 800593c:	f04f 0100 	mov.w	r1, #0
 8005940:	f04f 0200 	mov.w	r2, #0
 8005944:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005948:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800594c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005950:	4689      	mov	r9, r1
 8005952:	4692      	mov	sl, r2
 8005954:	eb19 0005 	adds.w	r0, r9, r5
 8005958:	eb4a 0106 	adc.w	r1, sl, r6
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	461d      	mov	r5, r3
 8005962:	f04f 0600 	mov.w	r6, #0
 8005966:	196b      	adds	r3, r5, r5
 8005968:	eb46 0406 	adc.w	r4, r6, r6
 800596c:	461a      	mov	r2, r3
 800596e:	4623      	mov	r3, r4
 8005970:	f7fb f992 	bl	8000c98 <__aeabi_uldivmod>
 8005974:	4603      	mov	r3, r0
 8005976:	460c      	mov	r4, r1
 8005978:	461a      	mov	r2, r3
 800597a:	4b0c      	ldr	r3, [pc, #48]	; (80059ac <UART_SetConfig+0x384>)
 800597c:	fba3 1302 	umull	r1, r3, r3, r2
 8005980:	095b      	lsrs	r3, r3, #5
 8005982:	2164      	movs	r1, #100	; 0x64
 8005984:	fb01 f303 	mul.w	r3, r1, r3
 8005988:	1ad3      	subs	r3, r2, r3
 800598a:	00db      	lsls	r3, r3, #3
 800598c:	3332      	adds	r3, #50	; 0x32
 800598e:	4a07      	ldr	r2, [pc, #28]	; (80059ac <UART_SetConfig+0x384>)
 8005990:	fba2 2303 	umull	r2, r3, r2, r3
 8005994:	095b      	lsrs	r3, r3, #5
 8005996:	f003 0207 	and.w	r2, r3, #7
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4442      	add	r2, r8
 80059a0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80059a2:	e1b2      	b.n	8005d0a <UART_SetConfig+0x6e2>
 80059a4:	40011000 	.word	0x40011000
 80059a8:	40011400 	.word	0x40011400
 80059ac:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4ad7      	ldr	r2, [pc, #860]	; (8005d14 <UART_SetConfig+0x6ec>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d005      	beq.n	80059c6 <UART_SetConfig+0x39e>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4ad6      	ldr	r2, [pc, #856]	; (8005d18 <UART_SetConfig+0x6f0>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	f040 80d1 	bne.w	8005b68 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80059c6:	f7fe ff97 	bl	80048f8 <HAL_RCC_GetPCLK2Freq>
 80059ca:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	469a      	mov	sl, r3
 80059d0:	f04f 0b00 	mov.w	fp, #0
 80059d4:	46d0      	mov	r8, sl
 80059d6:	46d9      	mov	r9, fp
 80059d8:	eb18 0308 	adds.w	r3, r8, r8
 80059dc:	eb49 0409 	adc.w	r4, r9, r9
 80059e0:	4698      	mov	r8, r3
 80059e2:	46a1      	mov	r9, r4
 80059e4:	eb18 080a 	adds.w	r8, r8, sl
 80059e8:	eb49 090b 	adc.w	r9, r9, fp
 80059ec:	f04f 0100 	mov.w	r1, #0
 80059f0:	f04f 0200 	mov.w	r2, #0
 80059f4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80059f8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80059fc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005a00:	4688      	mov	r8, r1
 8005a02:	4691      	mov	r9, r2
 8005a04:	eb1a 0508 	adds.w	r5, sl, r8
 8005a08:	eb4b 0609 	adc.w	r6, fp, r9
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	4619      	mov	r1, r3
 8005a12:	f04f 0200 	mov.w	r2, #0
 8005a16:	f04f 0300 	mov.w	r3, #0
 8005a1a:	f04f 0400 	mov.w	r4, #0
 8005a1e:	0094      	lsls	r4, r2, #2
 8005a20:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005a24:	008b      	lsls	r3, r1, #2
 8005a26:	461a      	mov	r2, r3
 8005a28:	4623      	mov	r3, r4
 8005a2a:	4628      	mov	r0, r5
 8005a2c:	4631      	mov	r1, r6
 8005a2e:	f7fb f933 	bl	8000c98 <__aeabi_uldivmod>
 8005a32:	4603      	mov	r3, r0
 8005a34:	460c      	mov	r4, r1
 8005a36:	461a      	mov	r2, r3
 8005a38:	4bb8      	ldr	r3, [pc, #736]	; (8005d1c <UART_SetConfig+0x6f4>)
 8005a3a:	fba3 2302 	umull	r2, r3, r3, r2
 8005a3e:	095b      	lsrs	r3, r3, #5
 8005a40:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	469b      	mov	fp, r3
 8005a48:	f04f 0c00 	mov.w	ip, #0
 8005a4c:	46d9      	mov	r9, fp
 8005a4e:	46e2      	mov	sl, ip
 8005a50:	eb19 0309 	adds.w	r3, r9, r9
 8005a54:	eb4a 040a 	adc.w	r4, sl, sl
 8005a58:	4699      	mov	r9, r3
 8005a5a:	46a2      	mov	sl, r4
 8005a5c:	eb19 090b 	adds.w	r9, r9, fp
 8005a60:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005a64:	f04f 0100 	mov.w	r1, #0
 8005a68:	f04f 0200 	mov.w	r2, #0
 8005a6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a70:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005a74:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005a78:	4689      	mov	r9, r1
 8005a7a:	4692      	mov	sl, r2
 8005a7c:	eb1b 0509 	adds.w	r5, fp, r9
 8005a80:	eb4c 060a 	adc.w	r6, ip, sl
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	4619      	mov	r1, r3
 8005a8a:	f04f 0200 	mov.w	r2, #0
 8005a8e:	f04f 0300 	mov.w	r3, #0
 8005a92:	f04f 0400 	mov.w	r4, #0
 8005a96:	0094      	lsls	r4, r2, #2
 8005a98:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005a9c:	008b      	lsls	r3, r1, #2
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	4623      	mov	r3, r4
 8005aa2:	4628      	mov	r0, r5
 8005aa4:	4631      	mov	r1, r6
 8005aa6:	f7fb f8f7 	bl	8000c98 <__aeabi_uldivmod>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	460c      	mov	r4, r1
 8005aae:	461a      	mov	r2, r3
 8005ab0:	4b9a      	ldr	r3, [pc, #616]	; (8005d1c <UART_SetConfig+0x6f4>)
 8005ab2:	fba3 1302 	umull	r1, r3, r3, r2
 8005ab6:	095b      	lsrs	r3, r3, #5
 8005ab8:	2164      	movs	r1, #100	; 0x64
 8005aba:	fb01 f303 	mul.w	r3, r1, r3
 8005abe:	1ad3      	subs	r3, r2, r3
 8005ac0:	011b      	lsls	r3, r3, #4
 8005ac2:	3332      	adds	r3, #50	; 0x32
 8005ac4:	4a95      	ldr	r2, [pc, #596]	; (8005d1c <UART_SetConfig+0x6f4>)
 8005ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8005aca:	095b      	lsrs	r3, r3, #5
 8005acc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ad0:	4498      	add	r8, r3
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	469b      	mov	fp, r3
 8005ad6:	f04f 0c00 	mov.w	ip, #0
 8005ada:	46d9      	mov	r9, fp
 8005adc:	46e2      	mov	sl, ip
 8005ade:	eb19 0309 	adds.w	r3, r9, r9
 8005ae2:	eb4a 040a 	adc.w	r4, sl, sl
 8005ae6:	4699      	mov	r9, r3
 8005ae8:	46a2      	mov	sl, r4
 8005aea:	eb19 090b 	adds.w	r9, r9, fp
 8005aee:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005af2:	f04f 0100 	mov.w	r1, #0
 8005af6:	f04f 0200 	mov.w	r2, #0
 8005afa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005afe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005b02:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005b06:	4689      	mov	r9, r1
 8005b08:	4692      	mov	sl, r2
 8005b0a:	eb1b 0509 	adds.w	r5, fp, r9
 8005b0e:	eb4c 060a 	adc.w	r6, ip, sl
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	4619      	mov	r1, r3
 8005b18:	f04f 0200 	mov.w	r2, #0
 8005b1c:	f04f 0300 	mov.w	r3, #0
 8005b20:	f04f 0400 	mov.w	r4, #0
 8005b24:	0094      	lsls	r4, r2, #2
 8005b26:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005b2a:	008b      	lsls	r3, r1, #2
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	4623      	mov	r3, r4
 8005b30:	4628      	mov	r0, r5
 8005b32:	4631      	mov	r1, r6
 8005b34:	f7fb f8b0 	bl	8000c98 <__aeabi_uldivmod>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	460c      	mov	r4, r1
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	4b77      	ldr	r3, [pc, #476]	; (8005d1c <UART_SetConfig+0x6f4>)
 8005b40:	fba3 1302 	umull	r1, r3, r3, r2
 8005b44:	095b      	lsrs	r3, r3, #5
 8005b46:	2164      	movs	r1, #100	; 0x64
 8005b48:	fb01 f303 	mul.w	r3, r1, r3
 8005b4c:	1ad3      	subs	r3, r2, r3
 8005b4e:	011b      	lsls	r3, r3, #4
 8005b50:	3332      	adds	r3, #50	; 0x32
 8005b52:	4a72      	ldr	r2, [pc, #456]	; (8005d1c <UART_SetConfig+0x6f4>)
 8005b54:	fba2 2303 	umull	r2, r3, r2, r3
 8005b58:	095b      	lsrs	r3, r3, #5
 8005b5a:	f003 020f 	and.w	r2, r3, #15
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4442      	add	r2, r8
 8005b64:	609a      	str	r2, [r3, #8]
 8005b66:	e0d0      	b.n	8005d0a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b68:	f7fe feb2 	bl	80048d0 <HAL_RCC_GetPCLK1Freq>
 8005b6c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	469a      	mov	sl, r3
 8005b72:	f04f 0b00 	mov.w	fp, #0
 8005b76:	46d0      	mov	r8, sl
 8005b78:	46d9      	mov	r9, fp
 8005b7a:	eb18 0308 	adds.w	r3, r8, r8
 8005b7e:	eb49 0409 	adc.w	r4, r9, r9
 8005b82:	4698      	mov	r8, r3
 8005b84:	46a1      	mov	r9, r4
 8005b86:	eb18 080a 	adds.w	r8, r8, sl
 8005b8a:	eb49 090b 	adc.w	r9, r9, fp
 8005b8e:	f04f 0100 	mov.w	r1, #0
 8005b92:	f04f 0200 	mov.w	r2, #0
 8005b96:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005b9a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005b9e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005ba2:	4688      	mov	r8, r1
 8005ba4:	4691      	mov	r9, r2
 8005ba6:	eb1a 0508 	adds.w	r5, sl, r8
 8005baa:	eb4b 0609 	adc.w	r6, fp, r9
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	4619      	mov	r1, r3
 8005bb4:	f04f 0200 	mov.w	r2, #0
 8005bb8:	f04f 0300 	mov.w	r3, #0
 8005bbc:	f04f 0400 	mov.w	r4, #0
 8005bc0:	0094      	lsls	r4, r2, #2
 8005bc2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005bc6:	008b      	lsls	r3, r1, #2
 8005bc8:	461a      	mov	r2, r3
 8005bca:	4623      	mov	r3, r4
 8005bcc:	4628      	mov	r0, r5
 8005bce:	4631      	mov	r1, r6
 8005bd0:	f7fb f862 	bl	8000c98 <__aeabi_uldivmod>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	460c      	mov	r4, r1
 8005bd8:	461a      	mov	r2, r3
 8005bda:	4b50      	ldr	r3, [pc, #320]	; (8005d1c <UART_SetConfig+0x6f4>)
 8005bdc:	fba3 2302 	umull	r2, r3, r3, r2
 8005be0:	095b      	lsrs	r3, r3, #5
 8005be2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	469b      	mov	fp, r3
 8005bea:	f04f 0c00 	mov.w	ip, #0
 8005bee:	46d9      	mov	r9, fp
 8005bf0:	46e2      	mov	sl, ip
 8005bf2:	eb19 0309 	adds.w	r3, r9, r9
 8005bf6:	eb4a 040a 	adc.w	r4, sl, sl
 8005bfa:	4699      	mov	r9, r3
 8005bfc:	46a2      	mov	sl, r4
 8005bfe:	eb19 090b 	adds.w	r9, r9, fp
 8005c02:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005c06:	f04f 0100 	mov.w	r1, #0
 8005c0a:	f04f 0200 	mov.w	r2, #0
 8005c0e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c12:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005c16:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005c1a:	4689      	mov	r9, r1
 8005c1c:	4692      	mov	sl, r2
 8005c1e:	eb1b 0509 	adds.w	r5, fp, r9
 8005c22:	eb4c 060a 	adc.w	r6, ip, sl
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	4619      	mov	r1, r3
 8005c2c:	f04f 0200 	mov.w	r2, #0
 8005c30:	f04f 0300 	mov.w	r3, #0
 8005c34:	f04f 0400 	mov.w	r4, #0
 8005c38:	0094      	lsls	r4, r2, #2
 8005c3a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005c3e:	008b      	lsls	r3, r1, #2
 8005c40:	461a      	mov	r2, r3
 8005c42:	4623      	mov	r3, r4
 8005c44:	4628      	mov	r0, r5
 8005c46:	4631      	mov	r1, r6
 8005c48:	f7fb f826 	bl	8000c98 <__aeabi_uldivmod>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	460c      	mov	r4, r1
 8005c50:	461a      	mov	r2, r3
 8005c52:	4b32      	ldr	r3, [pc, #200]	; (8005d1c <UART_SetConfig+0x6f4>)
 8005c54:	fba3 1302 	umull	r1, r3, r3, r2
 8005c58:	095b      	lsrs	r3, r3, #5
 8005c5a:	2164      	movs	r1, #100	; 0x64
 8005c5c:	fb01 f303 	mul.w	r3, r1, r3
 8005c60:	1ad3      	subs	r3, r2, r3
 8005c62:	011b      	lsls	r3, r3, #4
 8005c64:	3332      	adds	r3, #50	; 0x32
 8005c66:	4a2d      	ldr	r2, [pc, #180]	; (8005d1c <UART_SetConfig+0x6f4>)
 8005c68:	fba2 2303 	umull	r2, r3, r2, r3
 8005c6c:	095b      	lsrs	r3, r3, #5
 8005c6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c72:	4498      	add	r8, r3
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	469b      	mov	fp, r3
 8005c78:	f04f 0c00 	mov.w	ip, #0
 8005c7c:	46d9      	mov	r9, fp
 8005c7e:	46e2      	mov	sl, ip
 8005c80:	eb19 0309 	adds.w	r3, r9, r9
 8005c84:	eb4a 040a 	adc.w	r4, sl, sl
 8005c88:	4699      	mov	r9, r3
 8005c8a:	46a2      	mov	sl, r4
 8005c8c:	eb19 090b 	adds.w	r9, r9, fp
 8005c90:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005c94:	f04f 0100 	mov.w	r1, #0
 8005c98:	f04f 0200 	mov.w	r2, #0
 8005c9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ca0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005ca4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005ca8:	4689      	mov	r9, r1
 8005caa:	4692      	mov	sl, r2
 8005cac:	eb1b 0509 	adds.w	r5, fp, r9
 8005cb0:	eb4c 060a 	adc.w	r6, ip, sl
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	4619      	mov	r1, r3
 8005cba:	f04f 0200 	mov.w	r2, #0
 8005cbe:	f04f 0300 	mov.w	r3, #0
 8005cc2:	f04f 0400 	mov.w	r4, #0
 8005cc6:	0094      	lsls	r4, r2, #2
 8005cc8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005ccc:	008b      	lsls	r3, r1, #2
 8005cce:	461a      	mov	r2, r3
 8005cd0:	4623      	mov	r3, r4
 8005cd2:	4628      	mov	r0, r5
 8005cd4:	4631      	mov	r1, r6
 8005cd6:	f7fa ffdf 	bl	8000c98 <__aeabi_uldivmod>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	460c      	mov	r4, r1
 8005cde:	461a      	mov	r2, r3
 8005ce0:	4b0e      	ldr	r3, [pc, #56]	; (8005d1c <UART_SetConfig+0x6f4>)
 8005ce2:	fba3 1302 	umull	r1, r3, r3, r2
 8005ce6:	095b      	lsrs	r3, r3, #5
 8005ce8:	2164      	movs	r1, #100	; 0x64
 8005cea:	fb01 f303 	mul.w	r3, r1, r3
 8005cee:	1ad3      	subs	r3, r2, r3
 8005cf0:	011b      	lsls	r3, r3, #4
 8005cf2:	3332      	adds	r3, #50	; 0x32
 8005cf4:	4a09      	ldr	r2, [pc, #36]	; (8005d1c <UART_SetConfig+0x6f4>)
 8005cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8005cfa:	095b      	lsrs	r3, r3, #5
 8005cfc:	f003 020f 	and.w	r2, r3, #15
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4442      	add	r2, r8
 8005d06:	609a      	str	r2, [r3, #8]
}
 8005d08:	e7ff      	b.n	8005d0a <UART_SetConfig+0x6e2>
 8005d0a:	bf00      	nop
 8005d0c:	3714      	adds	r7, #20
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d14:	40011000 	.word	0x40011000
 8005d18:	40011400 	.word	0x40011400
 8005d1c:	51eb851f 	.word	0x51eb851f

08005d20 <__errno>:
 8005d20:	4b01      	ldr	r3, [pc, #4]	; (8005d28 <__errno+0x8>)
 8005d22:	6818      	ldr	r0, [r3, #0]
 8005d24:	4770      	bx	lr
 8005d26:	bf00      	nop
 8005d28:	20000014 	.word	0x20000014

08005d2c <__libc_init_array>:
 8005d2c:	b570      	push	{r4, r5, r6, lr}
 8005d2e:	4e0d      	ldr	r6, [pc, #52]	; (8005d64 <__libc_init_array+0x38>)
 8005d30:	4c0d      	ldr	r4, [pc, #52]	; (8005d68 <__libc_init_array+0x3c>)
 8005d32:	1ba4      	subs	r4, r4, r6
 8005d34:	10a4      	asrs	r4, r4, #2
 8005d36:	2500      	movs	r5, #0
 8005d38:	42a5      	cmp	r5, r4
 8005d3a:	d109      	bne.n	8005d50 <__libc_init_array+0x24>
 8005d3c:	4e0b      	ldr	r6, [pc, #44]	; (8005d6c <__libc_init_array+0x40>)
 8005d3e:	4c0c      	ldr	r4, [pc, #48]	; (8005d70 <__libc_init_array+0x44>)
 8005d40:	f004 f98e 	bl	800a060 <_init>
 8005d44:	1ba4      	subs	r4, r4, r6
 8005d46:	10a4      	asrs	r4, r4, #2
 8005d48:	2500      	movs	r5, #0
 8005d4a:	42a5      	cmp	r5, r4
 8005d4c:	d105      	bne.n	8005d5a <__libc_init_array+0x2e>
 8005d4e:	bd70      	pop	{r4, r5, r6, pc}
 8005d50:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005d54:	4798      	blx	r3
 8005d56:	3501      	adds	r5, #1
 8005d58:	e7ee      	b.n	8005d38 <__libc_init_array+0xc>
 8005d5a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005d5e:	4798      	blx	r3
 8005d60:	3501      	adds	r5, #1
 8005d62:	e7f2      	b.n	8005d4a <__libc_init_array+0x1e>
 8005d64:	0800a994 	.word	0x0800a994
 8005d68:	0800a994 	.word	0x0800a994
 8005d6c:	0800a994 	.word	0x0800a994
 8005d70:	0800a998 	.word	0x0800a998

08005d74 <memcpy>:
 8005d74:	b510      	push	{r4, lr}
 8005d76:	1e43      	subs	r3, r0, #1
 8005d78:	440a      	add	r2, r1
 8005d7a:	4291      	cmp	r1, r2
 8005d7c:	d100      	bne.n	8005d80 <memcpy+0xc>
 8005d7e:	bd10      	pop	{r4, pc}
 8005d80:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d84:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d88:	e7f7      	b.n	8005d7a <memcpy+0x6>

08005d8a <memset>:
 8005d8a:	4402      	add	r2, r0
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d100      	bne.n	8005d94 <memset+0xa>
 8005d92:	4770      	bx	lr
 8005d94:	f803 1b01 	strb.w	r1, [r3], #1
 8005d98:	e7f9      	b.n	8005d8e <memset+0x4>

08005d9a <__cvt>:
 8005d9a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d9e:	ec55 4b10 	vmov	r4, r5, d0
 8005da2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8005da4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005da8:	2d00      	cmp	r5, #0
 8005daa:	460e      	mov	r6, r1
 8005dac:	4691      	mov	r9, r2
 8005dae:	4619      	mov	r1, r3
 8005db0:	bfb8      	it	lt
 8005db2:	4622      	movlt	r2, r4
 8005db4:	462b      	mov	r3, r5
 8005db6:	f027 0720 	bic.w	r7, r7, #32
 8005dba:	bfbb      	ittet	lt
 8005dbc:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005dc0:	461d      	movlt	r5, r3
 8005dc2:	2300      	movge	r3, #0
 8005dc4:	232d      	movlt	r3, #45	; 0x2d
 8005dc6:	bfb8      	it	lt
 8005dc8:	4614      	movlt	r4, r2
 8005dca:	2f46      	cmp	r7, #70	; 0x46
 8005dcc:	700b      	strb	r3, [r1, #0]
 8005dce:	d004      	beq.n	8005dda <__cvt+0x40>
 8005dd0:	2f45      	cmp	r7, #69	; 0x45
 8005dd2:	d100      	bne.n	8005dd6 <__cvt+0x3c>
 8005dd4:	3601      	adds	r6, #1
 8005dd6:	2102      	movs	r1, #2
 8005dd8:	e000      	b.n	8005ddc <__cvt+0x42>
 8005dda:	2103      	movs	r1, #3
 8005ddc:	ab03      	add	r3, sp, #12
 8005dde:	9301      	str	r3, [sp, #4]
 8005de0:	ab02      	add	r3, sp, #8
 8005de2:	9300      	str	r3, [sp, #0]
 8005de4:	4632      	mov	r2, r6
 8005de6:	4653      	mov	r3, sl
 8005de8:	ec45 4b10 	vmov	d0, r4, r5
 8005dec:	f001 fda4 	bl	8007938 <_dtoa_r>
 8005df0:	2f47      	cmp	r7, #71	; 0x47
 8005df2:	4680      	mov	r8, r0
 8005df4:	d102      	bne.n	8005dfc <__cvt+0x62>
 8005df6:	f019 0f01 	tst.w	r9, #1
 8005dfa:	d026      	beq.n	8005e4a <__cvt+0xb0>
 8005dfc:	2f46      	cmp	r7, #70	; 0x46
 8005dfe:	eb08 0906 	add.w	r9, r8, r6
 8005e02:	d111      	bne.n	8005e28 <__cvt+0x8e>
 8005e04:	f898 3000 	ldrb.w	r3, [r8]
 8005e08:	2b30      	cmp	r3, #48	; 0x30
 8005e0a:	d10a      	bne.n	8005e22 <__cvt+0x88>
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	2300      	movs	r3, #0
 8005e10:	4620      	mov	r0, r4
 8005e12:	4629      	mov	r1, r5
 8005e14:	f7fa fe60 	bl	8000ad8 <__aeabi_dcmpeq>
 8005e18:	b918      	cbnz	r0, 8005e22 <__cvt+0x88>
 8005e1a:	f1c6 0601 	rsb	r6, r6, #1
 8005e1e:	f8ca 6000 	str.w	r6, [sl]
 8005e22:	f8da 3000 	ldr.w	r3, [sl]
 8005e26:	4499      	add	r9, r3
 8005e28:	2200      	movs	r2, #0
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	4620      	mov	r0, r4
 8005e2e:	4629      	mov	r1, r5
 8005e30:	f7fa fe52 	bl	8000ad8 <__aeabi_dcmpeq>
 8005e34:	b938      	cbnz	r0, 8005e46 <__cvt+0xac>
 8005e36:	2230      	movs	r2, #48	; 0x30
 8005e38:	9b03      	ldr	r3, [sp, #12]
 8005e3a:	454b      	cmp	r3, r9
 8005e3c:	d205      	bcs.n	8005e4a <__cvt+0xb0>
 8005e3e:	1c59      	adds	r1, r3, #1
 8005e40:	9103      	str	r1, [sp, #12]
 8005e42:	701a      	strb	r2, [r3, #0]
 8005e44:	e7f8      	b.n	8005e38 <__cvt+0x9e>
 8005e46:	f8cd 900c 	str.w	r9, [sp, #12]
 8005e4a:	9b03      	ldr	r3, [sp, #12]
 8005e4c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005e4e:	eba3 0308 	sub.w	r3, r3, r8
 8005e52:	4640      	mov	r0, r8
 8005e54:	6013      	str	r3, [r2, #0]
 8005e56:	b004      	add	sp, #16
 8005e58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005e5c <__exponent>:
 8005e5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e5e:	2900      	cmp	r1, #0
 8005e60:	4604      	mov	r4, r0
 8005e62:	bfba      	itte	lt
 8005e64:	4249      	neglt	r1, r1
 8005e66:	232d      	movlt	r3, #45	; 0x2d
 8005e68:	232b      	movge	r3, #43	; 0x2b
 8005e6a:	2909      	cmp	r1, #9
 8005e6c:	f804 2b02 	strb.w	r2, [r4], #2
 8005e70:	7043      	strb	r3, [r0, #1]
 8005e72:	dd20      	ble.n	8005eb6 <__exponent+0x5a>
 8005e74:	f10d 0307 	add.w	r3, sp, #7
 8005e78:	461f      	mov	r7, r3
 8005e7a:	260a      	movs	r6, #10
 8005e7c:	fb91 f5f6 	sdiv	r5, r1, r6
 8005e80:	fb06 1115 	mls	r1, r6, r5, r1
 8005e84:	3130      	adds	r1, #48	; 0x30
 8005e86:	2d09      	cmp	r5, #9
 8005e88:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005e8c:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8005e90:	4629      	mov	r1, r5
 8005e92:	dc09      	bgt.n	8005ea8 <__exponent+0x4c>
 8005e94:	3130      	adds	r1, #48	; 0x30
 8005e96:	3b02      	subs	r3, #2
 8005e98:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005e9c:	42bb      	cmp	r3, r7
 8005e9e:	4622      	mov	r2, r4
 8005ea0:	d304      	bcc.n	8005eac <__exponent+0x50>
 8005ea2:	1a10      	subs	r0, r2, r0
 8005ea4:	b003      	add	sp, #12
 8005ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ea8:	4613      	mov	r3, r2
 8005eaa:	e7e7      	b.n	8005e7c <__exponent+0x20>
 8005eac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005eb0:	f804 2b01 	strb.w	r2, [r4], #1
 8005eb4:	e7f2      	b.n	8005e9c <__exponent+0x40>
 8005eb6:	2330      	movs	r3, #48	; 0x30
 8005eb8:	4419      	add	r1, r3
 8005eba:	7083      	strb	r3, [r0, #2]
 8005ebc:	1d02      	adds	r2, r0, #4
 8005ebe:	70c1      	strb	r1, [r0, #3]
 8005ec0:	e7ef      	b.n	8005ea2 <__exponent+0x46>
	...

08005ec4 <_printf_float>:
 8005ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ec8:	b08d      	sub	sp, #52	; 0x34
 8005eca:	460c      	mov	r4, r1
 8005ecc:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8005ed0:	4616      	mov	r6, r2
 8005ed2:	461f      	mov	r7, r3
 8005ed4:	4605      	mov	r5, r0
 8005ed6:	f002 fe21 	bl	8008b1c <_localeconv_r>
 8005eda:	6803      	ldr	r3, [r0, #0]
 8005edc:	9304      	str	r3, [sp, #16]
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f7fa f97e 	bl	80001e0 <strlen>
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	930a      	str	r3, [sp, #40]	; 0x28
 8005ee8:	f8d8 3000 	ldr.w	r3, [r8]
 8005eec:	9005      	str	r0, [sp, #20]
 8005eee:	3307      	adds	r3, #7
 8005ef0:	f023 0307 	bic.w	r3, r3, #7
 8005ef4:	f103 0208 	add.w	r2, r3, #8
 8005ef8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005efc:	f8d4 b000 	ldr.w	fp, [r4]
 8005f00:	f8c8 2000 	str.w	r2, [r8]
 8005f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f08:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005f0c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005f10:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005f14:	9307      	str	r3, [sp, #28]
 8005f16:	f8cd 8018 	str.w	r8, [sp, #24]
 8005f1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f1e:	4ba7      	ldr	r3, [pc, #668]	; (80061bc <_printf_float+0x2f8>)
 8005f20:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f24:	f7fa fe0a 	bl	8000b3c <__aeabi_dcmpun>
 8005f28:	bb70      	cbnz	r0, 8005f88 <_printf_float+0xc4>
 8005f2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f2e:	4ba3      	ldr	r3, [pc, #652]	; (80061bc <_printf_float+0x2f8>)
 8005f30:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f34:	f7fa fde4 	bl	8000b00 <__aeabi_dcmple>
 8005f38:	bb30      	cbnz	r0, 8005f88 <_printf_float+0xc4>
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	4640      	mov	r0, r8
 8005f40:	4649      	mov	r1, r9
 8005f42:	f7fa fdd3 	bl	8000aec <__aeabi_dcmplt>
 8005f46:	b110      	cbz	r0, 8005f4e <_printf_float+0x8a>
 8005f48:	232d      	movs	r3, #45	; 0x2d
 8005f4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f4e:	4a9c      	ldr	r2, [pc, #624]	; (80061c0 <_printf_float+0x2fc>)
 8005f50:	4b9c      	ldr	r3, [pc, #624]	; (80061c4 <_printf_float+0x300>)
 8005f52:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8005f56:	bf8c      	ite	hi
 8005f58:	4690      	movhi	r8, r2
 8005f5a:	4698      	movls	r8, r3
 8005f5c:	2303      	movs	r3, #3
 8005f5e:	f02b 0204 	bic.w	r2, fp, #4
 8005f62:	6123      	str	r3, [r4, #16]
 8005f64:	6022      	str	r2, [r4, #0]
 8005f66:	f04f 0900 	mov.w	r9, #0
 8005f6a:	9700      	str	r7, [sp, #0]
 8005f6c:	4633      	mov	r3, r6
 8005f6e:	aa0b      	add	r2, sp, #44	; 0x2c
 8005f70:	4621      	mov	r1, r4
 8005f72:	4628      	mov	r0, r5
 8005f74:	f000 f9e6 	bl	8006344 <_printf_common>
 8005f78:	3001      	adds	r0, #1
 8005f7a:	f040 808d 	bne.w	8006098 <_printf_float+0x1d4>
 8005f7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f82:	b00d      	add	sp, #52	; 0x34
 8005f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f88:	4642      	mov	r2, r8
 8005f8a:	464b      	mov	r3, r9
 8005f8c:	4640      	mov	r0, r8
 8005f8e:	4649      	mov	r1, r9
 8005f90:	f7fa fdd4 	bl	8000b3c <__aeabi_dcmpun>
 8005f94:	b110      	cbz	r0, 8005f9c <_printf_float+0xd8>
 8005f96:	4a8c      	ldr	r2, [pc, #560]	; (80061c8 <_printf_float+0x304>)
 8005f98:	4b8c      	ldr	r3, [pc, #560]	; (80061cc <_printf_float+0x308>)
 8005f9a:	e7da      	b.n	8005f52 <_printf_float+0x8e>
 8005f9c:	6861      	ldr	r1, [r4, #4]
 8005f9e:	1c4b      	adds	r3, r1, #1
 8005fa0:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8005fa4:	a80a      	add	r0, sp, #40	; 0x28
 8005fa6:	d13e      	bne.n	8006026 <_printf_float+0x162>
 8005fa8:	2306      	movs	r3, #6
 8005faa:	6063      	str	r3, [r4, #4]
 8005fac:	2300      	movs	r3, #0
 8005fae:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8005fb2:	ab09      	add	r3, sp, #36	; 0x24
 8005fb4:	9300      	str	r3, [sp, #0]
 8005fb6:	ec49 8b10 	vmov	d0, r8, r9
 8005fba:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005fbe:	6022      	str	r2, [r4, #0]
 8005fc0:	f8cd a004 	str.w	sl, [sp, #4]
 8005fc4:	6861      	ldr	r1, [r4, #4]
 8005fc6:	4628      	mov	r0, r5
 8005fc8:	f7ff fee7 	bl	8005d9a <__cvt>
 8005fcc:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8005fd0:	2b47      	cmp	r3, #71	; 0x47
 8005fd2:	4680      	mov	r8, r0
 8005fd4:	d109      	bne.n	8005fea <_printf_float+0x126>
 8005fd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fd8:	1cd8      	adds	r0, r3, #3
 8005fda:	db02      	blt.n	8005fe2 <_printf_float+0x11e>
 8005fdc:	6862      	ldr	r2, [r4, #4]
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	dd47      	ble.n	8006072 <_printf_float+0x1ae>
 8005fe2:	f1aa 0a02 	sub.w	sl, sl, #2
 8005fe6:	fa5f fa8a 	uxtb.w	sl, sl
 8005fea:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8005fee:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ff0:	d824      	bhi.n	800603c <_printf_float+0x178>
 8005ff2:	3901      	subs	r1, #1
 8005ff4:	4652      	mov	r2, sl
 8005ff6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005ffa:	9109      	str	r1, [sp, #36]	; 0x24
 8005ffc:	f7ff ff2e 	bl	8005e5c <__exponent>
 8006000:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006002:	1813      	adds	r3, r2, r0
 8006004:	2a01      	cmp	r2, #1
 8006006:	4681      	mov	r9, r0
 8006008:	6123      	str	r3, [r4, #16]
 800600a:	dc02      	bgt.n	8006012 <_printf_float+0x14e>
 800600c:	6822      	ldr	r2, [r4, #0]
 800600e:	07d1      	lsls	r1, r2, #31
 8006010:	d501      	bpl.n	8006016 <_printf_float+0x152>
 8006012:	3301      	adds	r3, #1
 8006014:	6123      	str	r3, [r4, #16]
 8006016:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800601a:	2b00      	cmp	r3, #0
 800601c:	d0a5      	beq.n	8005f6a <_printf_float+0xa6>
 800601e:	232d      	movs	r3, #45	; 0x2d
 8006020:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006024:	e7a1      	b.n	8005f6a <_printf_float+0xa6>
 8006026:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800602a:	f000 8177 	beq.w	800631c <_printf_float+0x458>
 800602e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006032:	d1bb      	bne.n	8005fac <_printf_float+0xe8>
 8006034:	2900      	cmp	r1, #0
 8006036:	d1b9      	bne.n	8005fac <_printf_float+0xe8>
 8006038:	2301      	movs	r3, #1
 800603a:	e7b6      	b.n	8005faa <_printf_float+0xe6>
 800603c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8006040:	d119      	bne.n	8006076 <_printf_float+0x1b2>
 8006042:	2900      	cmp	r1, #0
 8006044:	6863      	ldr	r3, [r4, #4]
 8006046:	dd0c      	ble.n	8006062 <_printf_float+0x19e>
 8006048:	6121      	str	r1, [r4, #16]
 800604a:	b913      	cbnz	r3, 8006052 <_printf_float+0x18e>
 800604c:	6822      	ldr	r2, [r4, #0]
 800604e:	07d2      	lsls	r2, r2, #31
 8006050:	d502      	bpl.n	8006058 <_printf_float+0x194>
 8006052:	3301      	adds	r3, #1
 8006054:	440b      	add	r3, r1
 8006056:	6123      	str	r3, [r4, #16]
 8006058:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800605a:	65a3      	str	r3, [r4, #88]	; 0x58
 800605c:	f04f 0900 	mov.w	r9, #0
 8006060:	e7d9      	b.n	8006016 <_printf_float+0x152>
 8006062:	b913      	cbnz	r3, 800606a <_printf_float+0x1a6>
 8006064:	6822      	ldr	r2, [r4, #0]
 8006066:	07d0      	lsls	r0, r2, #31
 8006068:	d501      	bpl.n	800606e <_printf_float+0x1aa>
 800606a:	3302      	adds	r3, #2
 800606c:	e7f3      	b.n	8006056 <_printf_float+0x192>
 800606e:	2301      	movs	r3, #1
 8006070:	e7f1      	b.n	8006056 <_printf_float+0x192>
 8006072:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8006076:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800607a:	4293      	cmp	r3, r2
 800607c:	db05      	blt.n	800608a <_printf_float+0x1c6>
 800607e:	6822      	ldr	r2, [r4, #0]
 8006080:	6123      	str	r3, [r4, #16]
 8006082:	07d1      	lsls	r1, r2, #31
 8006084:	d5e8      	bpl.n	8006058 <_printf_float+0x194>
 8006086:	3301      	adds	r3, #1
 8006088:	e7e5      	b.n	8006056 <_printf_float+0x192>
 800608a:	2b00      	cmp	r3, #0
 800608c:	bfd4      	ite	le
 800608e:	f1c3 0302 	rsble	r3, r3, #2
 8006092:	2301      	movgt	r3, #1
 8006094:	4413      	add	r3, r2
 8006096:	e7de      	b.n	8006056 <_printf_float+0x192>
 8006098:	6823      	ldr	r3, [r4, #0]
 800609a:	055a      	lsls	r2, r3, #21
 800609c:	d407      	bmi.n	80060ae <_printf_float+0x1ea>
 800609e:	6923      	ldr	r3, [r4, #16]
 80060a0:	4642      	mov	r2, r8
 80060a2:	4631      	mov	r1, r6
 80060a4:	4628      	mov	r0, r5
 80060a6:	47b8      	blx	r7
 80060a8:	3001      	adds	r0, #1
 80060aa:	d12b      	bne.n	8006104 <_printf_float+0x240>
 80060ac:	e767      	b.n	8005f7e <_printf_float+0xba>
 80060ae:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80060b2:	f240 80dc 	bls.w	800626e <_printf_float+0x3aa>
 80060b6:	2200      	movs	r2, #0
 80060b8:	2300      	movs	r3, #0
 80060ba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80060be:	f7fa fd0b 	bl	8000ad8 <__aeabi_dcmpeq>
 80060c2:	2800      	cmp	r0, #0
 80060c4:	d033      	beq.n	800612e <_printf_float+0x26a>
 80060c6:	2301      	movs	r3, #1
 80060c8:	4a41      	ldr	r2, [pc, #260]	; (80061d0 <_printf_float+0x30c>)
 80060ca:	4631      	mov	r1, r6
 80060cc:	4628      	mov	r0, r5
 80060ce:	47b8      	blx	r7
 80060d0:	3001      	adds	r0, #1
 80060d2:	f43f af54 	beq.w	8005f7e <_printf_float+0xba>
 80060d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80060da:	429a      	cmp	r2, r3
 80060dc:	db02      	blt.n	80060e4 <_printf_float+0x220>
 80060de:	6823      	ldr	r3, [r4, #0]
 80060e0:	07d8      	lsls	r0, r3, #31
 80060e2:	d50f      	bpl.n	8006104 <_printf_float+0x240>
 80060e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80060e8:	4631      	mov	r1, r6
 80060ea:	4628      	mov	r0, r5
 80060ec:	47b8      	blx	r7
 80060ee:	3001      	adds	r0, #1
 80060f0:	f43f af45 	beq.w	8005f7e <_printf_float+0xba>
 80060f4:	f04f 0800 	mov.w	r8, #0
 80060f8:	f104 091a 	add.w	r9, r4, #26
 80060fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060fe:	3b01      	subs	r3, #1
 8006100:	4543      	cmp	r3, r8
 8006102:	dc09      	bgt.n	8006118 <_printf_float+0x254>
 8006104:	6823      	ldr	r3, [r4, #0]
 8006106:	079b      	lsls	r3, r3, #30
 8006108:	f100 8103 	bmi.w	8006312 <_printf_float+0x44e>
 800610c:	68e0      	ldr	r0, [r4, #12]
 800610e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006110:	4298      	cmp	r0, r3
 8006112:	bfb8      	it	lt
 8006114:	4618      	movlt	r0, r3
 8006116:	e734      	b.n	8005f82 <_printf_float+0xbe>
 8006118:	2301      	movs	r3, #1
 800611a:	464a      	mov	r2, r9
 800611c:	4631      	mov	r1, r6
 800611e:	4628      	mov	r0, r5
 8006120:	47b8      	blx	r7
 8006122:	3001      	adds	r0, #1
 8006124:	f43f af2b 	beq.w	8005f7e <_printf_float+0xba>
 8006128:	f108 0801 	add.w	r8, r8, #1
 800612c:	e7e6      	b.n	80060fc <_printf_float+0x238>
 800612e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006130:	2b00      	cmp	r3, #0
 8006132:	dc2b      	bgt.n	800618c <_printf_float+0x2c8>
 8006134:	2301      	movs	r3, #1
 8006136:	4a26      	ldr	r2, [pc, #152]	; (80061d0 <_printf_float+0x30c>)
 8006138:	4631      	mov	r1, r6
 800613a:	4628      	mov	r0, r5
 800613c:	47b8      	blx	r7
 800613e:	3001      	adds	r0, #1
 8006140:	f43f af1d 	beq.w	8005f7e <_printf_float+0xba>
 8006144:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006146:	b923      	cbnz	r3, 8006152 <_printf_float+0x28e>
 8006148:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800614a:	b913      	cbnz	r3, 8006152 <_printf_float+0x28e>
 800614c:	6823      	ldr	r3, [r4, #0]
 800614e:	07d9      	lsls	r1, r3, #31
 8006150:	d5d8      	bpl.n	8006104 <_printf_float+0x240>
 8006152:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006156:	4631      	mov	r1, r6
 8006158:	4628      	mov	r0, r5
 800615a:	47b8      	blx	r7
 800615c:	3001      	adds	r0, #1
 800615e:	f43f af0e 	beq.w	8005f7e <_printf_float+0xba>
 8006162:	f04f 0900 	mov.w	r9, #0
 8006166:	f104 0a1a 	add.w	sl, r4, #26
 800616a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800616c:	425b      	negs	r3, r3
 800616e:	454b      	cmp	r3, r9
 8006170:	dc01      	bgt.n	8006176 <_printf_float+0x2b2>
 8006172:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006174:	e794      	b.n	80060a0 <_printf_float+0x1dc>
 8006176:	2301      	movs	r3, #1
 8006178:	4652      	mov	r2, sl
 800617a:	4631      	mov	r1, r6
 800617c:	4628      	mov	r0, r5
 800617e:	47b8      	blx	r7
 8006180:	3001      	adds	r0, #1
 8006182:	f43f aefc 	beq.w	8005f7e <_printf_float+0xba>
 8006186:	f109 0901 	add.w	r9, r9, #1
 800618a:	e7ee      	b.n	800616a <_printf_float+0x2a6>
 800618c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800618e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006190:	429a      	cmp	r2, r3
 8006192:	bfa8      	it	ge
 8006194:	461a      	movge	r2, r3
 8006196:	2a00      	cmp	r2, #0
 8006198:	4691      	mov	r9, r2
 800619a:	dd07      	ble.n	80061ac <_printf_float+0x2e8>
 800619c:	4613      	mov	r3, r2
 800619e:	4631      	mov	r1, r6
 80061a0:	4642      	mov	r2, r8
 80061a2:	4628      	mov	r0, r5
 80061a4:	47b8      	blx	r7
 80061a6:	3001      	adds	r0, #1
 80061a8:	f43f aee9 	beq.w	8005f7e <_printf_float+0xba>
 80061ac:	f104 031a 	add.w	r3, r4, #26
 80061b0:	f04f 0b00 	mov.w	fp, #0
 80061b4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80061b8:	9306      	str	r3, [sp, #24]
 80061ba:	e015      	b.n	80061e8 <_printf_float+0x324>
 80061bc:	7fefffff 	.word	0x7fefffff
 80061c0:	0800a660 	.word	0x0800a660
 80061c4:	0800a65c 	.word	0x0800a65c
 80061c8:	0800a668 	.word	0x0800a668
 80061cc:	0800a664 	.word	0x0800a664
 80061d0:	0800a823 	.word	0x0800a823
 80061d4:	2301      	movs	r3, #1
 80061d6:	9a06      	ldr	r2, [sp, #24]
 80061d8:	4631      	mov	r1, r6
 80061da:	4628      	mov	r0, r5
 80061dc:	47b8      	blx	r7
 80061de:	3001      	adds	r0, #1
 80061e0:	f43f aecd 	beq.w	8005f7e <_printf_float+0xba>
 80061e4:	f10b 0b01 	add.w	fp, fp, #1
 80061e8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80061ec:	ebaa 0309 	sub.w	r3, sl, r9
 80061f0:	455b      	cmp	r3, fp
 80061f2:	dcef      	bgt.n	80061d4 <_printf_float+0x310>
 80061f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80061f8:	429a      	cmp	r2, r3
 80061fa:	44d0      	add	r8, sl
 80061fc:	db15      	blt.n	800622a <_printf_float+0x366>
 80061fe:	6823      	ldr	r3, [r4, #0]
 8006200:	07da      	lsls	r2, r3, #31
 8006202:	d412      	bmi.n	800622a <_printf_float+0x366>
 8006204:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006206:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006208:	eba3 020a 	sub.w	r2, r3, sl
 800620c:	eba3 0a01 	sub.w	sl, r3, r1
 8006210:	4592      	cmp	sl, r2
 8006212:	bfa8      	it	ge
 8006214:	4692      	movge	sl, r2
 8006216:	f1ba 0f00 	cmp.w	sl, #0
 800621a:	dc0e      	bgt.n	800623a <_printf_float+0x376>
 800621c:	f04f 0800 	mov.w	r8, #0
 8006220:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006224:	f104 091a 	add.w	r9, r4, #26
 8006228:	e019      	b.n	800625e <_printf_float+0x39a>
 800622a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800622e:	4631      	mov	r1, r6
 8006230:	4628      	mov	r0, r5
 8006232:	47b8      	blx	r7
 8006234:	3001      	adds	r0, #1
 8006236:	d1e5      	bne.n	8006204 <_printf_float+0x340>
 8006238:	e6a1      	b.n	8005f7e <_printf_float+0xba>
 800623a:	4653      	mov	r3, sl
 800623c:	4642      	mov	r2, r8
 800623e:	4631      	mov	r1, r6
 8006240:	4628      	mov	r0, r5
 8006242:	47b8      	blx	r7
 8006244:	3001      	adds	r0, #1
 8006246:	d1e9      	bne.n	800621c <_printf_float+0x358>
 8006248:	e699      	b.n	8005f7e <_printf_float+0xba>
 800624a:	2301      	movs	r3, #1
 800624c:	464a      	mov	r2, r9
 800624e:	4631      	mov	r1, r6
 8006250:	4628      	mov	r0, r5
 8006252:	47b8      	blx	r7
 8006254:	3001      	adds	r0, #1
 8006256:	f43f ae92 	beq.w	8005f7e <_printf_float+0xba>
 800625a:	f108 0801 	add.w	r8, r8, #1
 800625e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006262:	1a9b      	subs	r3, r3, r2
 8006264:	eba3 030a 	sub.w	r3, r3, sl
 8006268:	4543      	cmp	r3, r8
 800626a:	dcee      	bgt.n	800624a <_printf_float+0x386>
 800626c:	e74a      	b.n	8006104 <_printf_float+0x240>
 800626e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006270:	2a01      	cmp	r2, #1
 8006272:	dc01      	bgt.n	8006278 <_printf_float+0x3b4>
 8006274:	07db      	lsls	r3, r3, #31
 8006276:	d53a      	bpl.n	80062ee <_printf_float+0x42a>
 8006278:	2301      	movs	r3, #1
 800627a:	4642      	mov	r2, r8
 800627c:	4631      	mov	r1, r6
 800627e:	4628      	mov	r0, r5
 8006280:	47b8      	blx	r7
 8006282:	3001      	adds	r0, #1
 8006284:	f43f ae7b 	beq.w	8005f7e <_printf_float+0xba>
 8006288:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800628c:	4631      	mov	r1, r6
 800628e:	4628      	mov	r0, r5
 8006290:	47b8      	blx	r7
 8006292:	3001      	adds	r0, #1
 8006294:	f108 0801 	add.w	r8, r8, #1
 8006298:	f43f ae71 	beq.w	8005f7e <_printf_float+0xba>
 800629c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800629e:	2200      	movs	r2, #0
 80062a0:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 80062a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80062a8:	2300      	movs	r3, #0
 80062aa:	f7fa fc15 	bl	8000ad8 <__aeabi_dcmpeq>
 80062ae:	b9c8      	cbnz	r0, 80062e4 <_printf_float+0x420>
 80062b0:	4653      	mov	r3, sl
 80062b2:	4642      	mov	r2, r8
 80062b4:	4631      	mov	r1, r6
 80062b6:	4628      	mov	r0, r5
 80062b8:	47b8      	blx	r7
 80062ba:	3001      	adds	r0, #1
 80062bc:	d10e      	bne.n	80062dc <_printf_float+0x418>
 80062be:	e65e      	b.n	8005f7e <_printf_float+0xba>
 80062c0:	2301      	movs	r3, #1
 80062c2:	4652      	mov	r2, sl
 80062c4:	4631      	mov	r1, r6
 80062c6:	4628      	mov	r0, r5
 80062c8:	47b8      	blx	r7
 80062ca:	3001      	adds	r0, #1
 80062cc:	f43f ae57 	beq.w	8005f7e <_printf_float+0xba>
 80062d0:	f108 0801 	add.w	r8, r8, #1
 80062d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062d6:	3b01      	subs	r3, #1
 80062d8:	4543      	cmp	r3, r8
 80062da:	dcf1      	bgt.n	80062c0 <_printf_float+0x3fc>
 80062dc:	464b      	mov	r3, r9
 80062de:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80062e2:	e6de      	b.n	80060a2 <_printf_float+0x1de>
 80062e4:	f04f 0800 	mov.w	r8, #0
 80062e8:	f104 0a1a 	add.w	sl, r4, #26
 80062ec:	e7f2      	b.n	80062d4 <_printf_float+0x410>
 80062ee:	2301      	movs	r3, #1
 80062f0:	e7df      	b.n	80062b2 <_printf_float+0x3ee>
 80062f2:	2301      	movs	r3, #1
 80062f4:	464a      	mov	r2, r9
 80062f6:	4631      	mov	r1, r6
 80062f8:	4628      	mov	r0, r5
 80062fa:	47b8      	blx	r7
 80062fc:	3001      	adds	r0, #1
 80062fe:	f43f ae3e 	beq.w	8005f7e <_printf_float+0xba>
 8006302:	f108 0801 	add.w	r8, r8, #1
 8006306:	68e3      	ldr	r3, [r4, #12]
 8006308:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800630a:	1a9b      	subs	r3, r3, r2
 800630c:	4543      	cmp	r3, r8
 800630e:	dcf0      	bgt.n	80062f2 <_printf_float+0x42e>
 8006310:	e6fc      	b.n	800610c <_printf_float+0x248>
 8006312:	f04f 0800 	mov.w	r8, #0
 8006316:	f104 0919 	add.w	r9, r4, #25
 800631a:	e7f4      	b.n	8006306 <_printf_float+0x442>
 800631c:	2900      	cmp	r1, #0
 800631e:	f43f ae8b 	beq.w	8006038 <_printf_float+0x174>
 8006322:	2300      	movs	r3, #0
 8006324:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006328:	ab09      	add	r3, sp, #36	; 0x24
 800632a:	9300      	str	r3, [sp, #0]
 800632c:	ec49 8b10 	vmov	d0, r8, r9
 8006330:	6022      	str	r2, [r4, #0]
 8006332:	f8cd a004 	str.w	sl, [sp, #4]
 8006336:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800633a:	4628      	mov	r0, r5
 800633c:	f7ff fd2d 	bl	8005d9a <__cvt>
 8006340:	4680      	mov	r8, r0
 8006342:	e648      	b.n	8005fd6 <_printf_float+0x112>

08006344 <_printf_common>:
 8006344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006348:	4691      	mov	r9, r2
 800634a:	461f      	mov	r7, r3
 800634c:	688a      	ldr	r2, [r1, #8]
 800634e:	690b      	ldr	r3, [r1, #16]
 8006350:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006354:	4293      	cmp	r3, r2
 8006356:	bfb8      	it	lt
 8006358:	4613      	movlt	r3, r2
 800635a:	f8c9 3000 	str.w	r3, [r9]
 800635e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006362:	4606      	mov	r6, r0
 8006364:	460c      	mov	r4, r1
 8006366:	b112      	cbz	r2, 800636e <_printf_common+0x2a>
 8006368:	3301      	adds	r3, #1
 800636a:	f8c9 3000 	str.w	r3, [r9]
 800636e:	6823      	ldr	r3, [r4, #0]
 8006370:	0699      	lsls	r1, r3, #26
 8006372:	bf42      	ittt	mi
 8006374:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006378:	3302      	addmi	r3, #2
 800637a:	f8c9 3000 	strmi.w	r3, [r9]
 800637e:	6825      	ldr	r5, [r4, #0]
 8006380:	f015 0506 	ands.w	r5, r5, #6
 8006384:	d107      	bne.n	8006396 <_printf_common+0x52>
 8006386:	f104 0a19 	add.w	sl, r4, #25
 800638a:	68e3      	ldr	r3, [r4, #12]
 800638c:	f8d9 2000 	ldr.w	r2, [r9]
 8006390:	1a9b      	subs	r3, r3, r2
 8006392:	42ab      	cmp	r3, r5
 8006394:	dc28      	bgt.n	80063e8 <_printf_common+0xa4>
 8006396:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800639a:	6822      	ldr	r2, [r4, #0]
 800639c:	3300      	adds	r3, #0
 800639e:	bf18      	it	ne
 80063a0:	2301      	movne	r3, #1
 80063a2:	0692      	lsls	r2, r2, #26
 80063a4:	d42d      	bmi.n	8006402 <_printf_common+0xbe>
 80063a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80063aa:	4639      	mov	r1, r7
 80063ac:	4630      	mov	r0, r6
 80063ae:	47c0      	blx	r8
 80063b0:	3001      	adds	r0, #1
 80063b2:	d020      	beq.n	80063f6 <_printf_common+0xb2>
 80063b4:	6823      	ldr	r3, [r4, #0]
 80063b6:	68e5      	ldr	r5, [r4, #12]
 80063b8:	f8d9 2000 	ldr.w	r2, [r9]
 80063bc:	f003 0306 	and.w	r3, r3, #6
 80063c0:	2b04      	cmp	r3, #4
 80063c2:	bf08      	it	eq
 80063c4:	1aad      	subeq	r5, r5, r2
 80063c6:	68a3      	ldr	r3, [r4, #8]
 80063c8:	6922      	ldr	r2, [r4, #16]
 80063ca:	bf0c      	ite	eq
 80063cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80063d0:	2500      	movne	r5, #0
 80063d2:	4293      	cmp	r3, r2
 80063d4:	bfc4      	itt	gt
 80063d6:	1a9b      	subgt	r3, r3, r2
 80063d8:	18ed      	addgt	r5, r5, r3
 80063da:	f04f 0900 	mov.w	r9, #0
 80063de:	341a      	adds	r4, #26
 80063e0:	454d      	cmp	r5, r9
 80063e2:	d11a      	bne.n	800641a <_printf_common+0xd6>
 80063e4:	2000      	movs	r0, #0
 80063e6:	e008      	b.n	80063fa <_printf_common+0xb6>
 80063e8:	2301      	movs	r3, #1
 80063ea:	4652      	mov	r2, sl
 80063ec:	4639      	mov	r1, r7
 80063ee:	4630      	mov	r0, r6
 80063f0:	47c0      	blx	r8
 80063f2:	3001      	adds	r0, #1
 80063f4:	d103      	bne.n	80063fe <_printf_common+0xba>
 80063f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80063fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063fe:	3501      	adds	r5, #1
 8006400:	e7c3      	b.n	800638a <_printf_common+0x46>
 8006402:	18e1      	adds	r1, r4, r3
 8006404:	1c5a      	adds	r2, r3, #1
 8006406:	2030      	movs	r0, #48	; 0x30
 8006408:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800640c:	4422      	add	r2, r4
 800640e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006412:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006416:	3302      	adds	r3, #2
 8006418:	e7c5      	b.n	80063a6 <_printf_common+0x62>
 800641a:	2301      	movs	r3, #1
 800641c:	4622      	mov	r2, r4
 800641e:	4639      	mov	r1, r7
 8006420:	4630      	mov	r0, r6
 8006422:	47c0      	blx	r8
 8006424:	3001      	adds	r0, #1
 8006426:	d0e6      	beq.n	80063f6 <_printf_common+0xb2>
 8006428:	f109 0901 	add.w	r9, r9, #1
 800642c:	e7d8      	b.n	80063e0 <_printf_common+0x9c>
	...

08006430 <_printf_i>:
 8006430:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006434:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006438:	460c      	mov	r4, r1
 800643a:	7e09      	ldrb	r1, [r1, #24]
 800643c:	b085      	sub	sp, #20
 800643e:	296e      	cmp	r1, #110	; 0x6e
 8006440:	4617      	mov	r7, r2
 8006442:	4606      	mov	r6, r0
 8006444:	4698      	mov	r8, r3
 8006446:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006448:	f000 80b3 	beq.w	80065b2 <_printf_i+0x182>
 800644c:	d822      	bhi.n	8006494 <_printf_i+0x64>
 800644e:	2963      	cmp	r1, #99	; 0x63
 8006450:	d036      	beq.n	80064c0 <_printf_i+0x90>
 8006452:	d80a      	bhi.n	800646a <_printf_i+0x3a>
 8006454:	2900      	cmp	r1, #0
 8006456:	f000 80b9 	beq.w	80065cc <_printf_i+0x19c>
 800645a:	2958      	cmp	r1, #88	; 0x58
 800645c:	f000 8083 	beq.w	8006566 <_printf_i+0x136>
 8006460:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006464:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006468:	e032      	b.n	80064d0 <_printf_i+0xa0>
 800646a:	2964      	cmp	r1, #100	; 0x64
 800646c:	d001      	beq.n	8006472 <_printf_i+0x42>
 800646e:	2969      	cmp	r1, #105	; 0x69
 8006470:	d1f6      	bne.n	8006460 <_printf_i+0x30>
 8006472:	6820      	ldr	r0, [r4, #0]
 8006474:	6813      	ldr	r3, [r2, #0]
 8006476:	0605      	lsls	r5, r0, #24
 8006478:	f103 0104 	add.w	r1, r3, #4
 800647c:	d52a      	bpl.n	80064d4 <_printf_i+0xa4>
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	6011      	str	r1, [r2, #0]
 8006482:	2b00      	cmp	r3, #0
 8006484:	da03      	bge.n	800648e <_printf_i+0x5e>
 8006486:	222d      	movs	r2, #45	; 0x2d
 8006488:	425b      	negs	r3, r3
 800648a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800648e:	486f      	ldr	r0, [pc, #444]	; (800664c <_printf_i+0x21c>)
 8006490:	220a      	movs	r2, #10
 8006492:	e039      	b.n	8006508 <_printf_i+0xd8>
 8006494:	2973      	cmp	r1, #115	; 0x73
 8006496:	f000 809d 	beq.w	80065d4 <_printf_i+0x1a4>
 800649a:	d808      	bhi.n	80064ae <_printf_i+0x7e>
 800649c:	296f      	cmp	r1, #111	; 0x6f
 800649e:	d020      	beq.n	80064e2 <_printf_i+0xb2>
 80064a0:	2970      	cmp	r1, #112	; 0x70
 80064a2:	d1dd      	bne.n	8006460 <_printf_i+0x30>
 80064a4:	6823      	ldr	r3, [r4, #0]
 80064a6:	f043 0320 	orr.w	r3, r3, #32
 80064aa:	6023      	str	r3, [r4, #0]
 80064ac:	e003      	b.n	80064b6 <_printf_i+0x86>
 80064ae:	2975      	cmp	r1, #117	; 0x75
 80064b0:	d017      	beq.n	80064e2 <_printf_i+0xb2>
 80064b2:	2978      	cmp	r1, #120	; 0x78
 80064b4:	d1d4      	bne.n	8006460 <_printf_i+0x30>
 80064b6:	2378      	movs	r3, #120	; 0x78
 80064b8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80064bc:	4864      	ldr	r0, [pc, #400]	; (8006650 <_printf_i+0x220>)
 80064be:	e055      	b.n	800656c <_printf_i+0x13c>
 80064c0:	6813      	ldr	r3, [r2, #0]
 80064c2:	1d19      	adds	r1, r3, #4
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	6011      	str	r1, [r2, #0]
 80064c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80064d0:	2301      	movs	r3, #1
 80064d2:	e08c      	b.n	80065ee <_printf_i+0x1be>
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	6011      	str	r1, [r2, #0]
 80064d8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80064dc:	bf18      	it	ne
 80064de:	b21b      	sxthne	r3, r3
 80064e0:	e7cf      	b.n	8006482 <_printf_i+0x52>
 80064e2:	6813      	ldr	r3, [r2, #0]
 80064e4:	6825      	ldr	r5, [r4, #0]
 80064e6:	1d18      	adds	r0, r3, #4
 80064e8:	6010      	str	r0, [r2, #0]
 80064ea:	0628      	lsls	r0, r5, #24
 80064ec:	d501      	bpl.n	80064f2 <_printf_i+0xc2>
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	e002      	b.n	80064f8 <_printf_i+0xc8>
 80064f2:	0668      	lsls	r0, r5, #25
 80064f4:	d5fb      	bpl.n	80064ee <_printf_i+0xbe>
 80064f6:	881b      	ldrh	r3, [r3, #0]
 80064f8:	4854      	ldr	r0, [pc, #336]	; (800664c <_printf_i+0x21c>)
 80064fa:	296f      	cmp	r1, #111	; 0x6f
 80064fc:	bf14      	ite	ne
 80064fe:	220a      	movne	r2, #10
 8006500:	2208      	moveq	r2, #8
 8006502:	2100      	movs	r1, #0
 8006504:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006508:	6865      	ldr	r5, [r4, #4]
 800650a:	60a5      	str	r5, [r4, #8]
 800650c:	2d00      	cmp	r5, #0
 800650e:	f2c0 8095 	blt.w	800663c <_printf_i+0x20c>
 8006512:	6821      	ldr	r1, [r4, #0]
 8006514:	f021 0104 	bic.w	r1, r1, #4
 8006518:	6021      	str	r1, [r4, #0]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d13d      	bne.n	800659a <_printf_i+0x16a>
 800651e:	2d00      	cmp	r5, #0
 8006520:	f040 808e 	bne.w	8006640 <_printf_i+0x210>
 8006524:	4665      	mov	r5, ip
 8006526:	2a08      	cmp	r2, #8
 8006528:	d10b      	bne.n	8006542 <_printf_i+0x112>
 800652a:	6823      	ldr	r3, [r4, #0]
 800652c:	07db      	lsls	r3, r3, #31
 800652e:	d508      	bpl.n	8006542 <_printf_i+0x112>
 8006530:	6923      	ldr	r3, [r4, #16]
 8006532:	6862      	ldr	r2, [r4, #4]
 8006534:	429a      	cmp	r2, r3
 8006536:	bfde      	ittt	le
 8006538:	2330      	movle	r3, #48	; 0x30
 800653a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800653e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006542:	ebac 0305 	sub.w	r3, ip, r5
 8006546:	6123      	str	r3, [r4, #16]
 8006548:	f8cd 8000 	str.w	r8, [sp]
 800654c:	463b      	mov	r3, r7
 800654e:	aa03      	add	r2, sp, #12
 8006550:	4621      	mov	r1, r4
 8006552:	4630      	mov	r0, r6
 8006554:	f7ff fef6 	bl	8006344 <_printf_common>
 8006558:	3001      	adds	r0, #1
 800655a:	d14d      	bne.n	80065f8 <_printf_i+0x1c8>
 800655c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006560:	b005      	add	sp, #20
 8006562:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006566:	4839      	ldr	r0, [pc, #228]	; (800664c <_printf_i+0x21c>)
 8006568:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800656c:	6813      	ldr	r3, [r2, #0]
 800656e:	6821      	ldr	r1, [r4, #0]
 8006570:	1d1d      	adds	r5, r3, #4
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	6015      	str	r5, [r2, #0]
 8006576:	060a      	lsls	r2, r1, #24
 8006578:	d50b      	bpl.n	8006592 <_printf_i+0x162>
 800657a:	07ca      	lsls	r2, r1, #31
 800657c:	bf44      	itt	mi
 800657e:	f041 0120 	orrmi.w	r1, r1, #32
 8006582:	6021      	strmi	r1, [r4, #0]
 8006584:	b91b      	cbnz	r3, 800658e <_printf_i+0x15e>
 8006586:	6822      	ldr	r2, [r4, #0]
 8006588:	f022 0220 	bic.w	r2, r2, #32
 800658c:	6022      	str	r2, [r4, #0]
 800658e:	2210      	movs	r2, #16
 8006590:	e7b7      	b.n	8006502 <_printf_i+0xd2>
 8006592:	064d      	lsls	r5, r1, #25
 8006594:	bf48      	it	mi
 8006596:	b29b      	uxthmi	r3, r3
 8006598:	e7ef      	b.n	800657a <_printf_i+0x14a>
 800659a:	4665      	mov	r5, ip
 800659c:	fbb3 f1f2 	udiv	r1, r3, r2
 80065a0:	fb02 3311 	mls	r3, r2, r1, r3
 80065a4:	5cc3      	ldrb	r3, [r0, r3]
 80065a6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80065aa:	460b      	mov	r3, r1
 80065ac:	2900      	cmp	r1, #0
 80065ae:	d1f5      	bne.n	800659c <_printf_i+0x16c>
 80065b0:	e7b9      	b.n	8006526 <_printf_i+0xf6>
 80065b2:	6813      	ldr	r3, [r2, #0]
 80065b4:	6825      	ldr	r5, [r4, #0]
 80065b6:	6961      	ldr	r1, [r4, #20]
 80065b8:	1d18      	adds	r0, r3, #4
 80065ba:	6010      	str	r0, [r2, #0]
 80065bc:	0628      	lsls	r0, r5, #24
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	d501      	bpl.n	80065c6 <_printf_i+0x196>
 80065c2:	6019      	str	r1, [r3, #0]
 80065c4:	e002      	b.n	80065cc <_printf_i+0x19c>
 80065c6:	066a      	lsls	r2, r5, #25
 80065c8:	d5fb      	bpl.n	80065c2 <_printf_i+0x192>
 80065ca:	8019      	strh	r1, [r3, #0]
 80065cc:	2300      	movs	r3, #0
 80065ce:	6123      	str	r3, [r4, #16]
 80065d0:	4665      	mov	r5, ip
 80065d2:	e7b9      	b.n	8006548 <_printf_i+0x118>
 80065d4:	6813      	ldr	r3, [r2, #0]
 80065d6:	1d19      	adds	r1, r3, #4
 80065d8:	6011      	str	r1, [r2, #0]
 80065da:	681d      	ldr	r5, [r3, #0]
 80065dc:	6862      	ldr	r2, [r4, #4]
 80065de:	2100      	movs	r1, #0
 80065e0:	4628      	mov	r0, r5
 80065e2:	f7f9 fe05 	bl	80001f0 <memchr>
 80065e6:	b108      	cbz	r0, 80065ec <_printf_i+0x1bc>
 80065e8:	1b40      	subs	r0, r0, r5
 80065ea:	6060      	str	r0, [r4, #4]
 80065ec:	6863      	ldr	r3, [r4, #4]
 80065ee:	6123      	str	r3, [r4, #16]
 80065f0:	2300      	movs	r3, #0
 80065f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065f6:	e7a7      	b.n	8006548 <_printf_i+0x118>
 80065f8:	6923      	ldr	r3, [r4, #16]
 80065fa:	462a      	mov	r2, r5
 80065fc:	4639      	mov	r1, r7
 80065fe:	4630      	mov	r0, r6
 8006600:	47c0      	blx	r8
 8006602:	3001      	adds	r0, #1
 8006604:	d0aa      	beq.n	800655c <_printf_i+0x12c>
 8006606:	6823      	ldr	r3, [r4, #0]
 8006608:	079b      	lsls	r3, r3, #30
 800660a:	d413      	bmi.n	8006634 <_printf_i+0x204>
 800660c:	68e0      	ldr	r0, [r4, #12]
 800660e:	9b03      	ldr	r3, [sp, #12]
 8006610:	4298      	cmp	r0, r3
 8006612:	bfb8      	it	lt
 8006614:	4618      	movlt	r0, r3
 8006616:	e7a3      	b.n	8006560 <_printf_i+0x130>
 8006618:	2301      	movs	r3, #1
 800661a:	464a      	mov	r2, r9
 800661c:	4639      	mov	r1, r7
 800661e:	4630      	mov	r0, r6
 8006620:	47c0      	blx	r8
 8006622:	3001      	adds	r0, #1
 8006624:	d09a      	beq.n	800655c <_printf_i+0x12c>
 8006626:	3501      	adds	r5, #1
 8006628:	68e3      	ldr	r3, [r4, #12]
 800662a:	9a03      	ldr	r2, [sp, #12]
 800662c:	1a9b      	subs	r3, r3, r2
 800662e:	42ab      	cmp	r3, r5
 8006630:	dcf2      	bgt.n	8006618 <_printf_i+0x1e8>
 8006632:	e7eb      	b.n	800660c <_printf_i+0x1dc>
 8006634:	2500      	movs	r5, #0
 8006636:	f104 0919 	add.w	r9, r4, #25
 800663a:	e7f5      	b.n	8006628 <_printf_i+0x1f8>
 800663c:	2b00      	cmp	r3, #0
 800663e:	d1ac      	bne.n	800659a <_printf_i+0x16a>
 8006640:	7803      	ldrb	r3, [r0, #0]
 8006642:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006646:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800664a:	e76c      	b.n	8006526 <_printf_i+0xf6>
 800664c:	0800a66c 	.word	0x0800a66c
 8006650:	0800a67d 	.word	0x0800a67d

08006654 <_scanf_float>:
 8006654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006658:	469a      	mov	sl, r3
 800665a:	688b      	ldr	r3, [r1, #8]
 800665c:	4616      	mov	r6, r2
 800665e:	1e5a      	subs	r2, r3, #1
 8006660:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006664:	b087      	sub	sp, #28
 8006666:	bf83      	ittte	hi
 8006668:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800666c:	189b      	addhi	r3, r3, r2
 800666e:	9301      	strhi	r3, [sp, #4]
 8006670:	2300      	movls	r3, #0
 8006672:	bf86      	itte	hi
 8006674:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006678:	608b      	strhi	r3, [r1, #8]
 800667a:	9301      	strls	r3, [sp, #4]
 800667c:	680b      	ldr	r3, [r1, #0]
 800667e:	4688      	mov	r8, r1
 8006680:	f04f 0b00 	mov.w	fp, #0
 8006684:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006688:	f848 3b1c 	str.w	r3, [r8], #28
 800668c:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8006690:	4607      	mov	r7, r0
 8006692:	460c      	mov	r4, r1
 8006694:	4645      	mov	r5, r8
 8006696:	465a      	mov	r2, fp
 8006698:	46d9      	mov	r9, fp
 800669a:	f8cd b008 	str.w	fp, [sp, #8]
 800669e:	68a1      	ldr	r1, [r4, #8]
 80066a0:	b181      	cbz	r1, 80066c4 <_scanf_float+0x70>
 80066a2:	6833      	ldr	r3, [r6, #0]
 80066a4:	781b      	ldrb	r3, [r3, #0]
 80066a6:	2b49      	cmp	r3, #73	; 0x49
 80066a8:	d071      	beq.n	800678e <_scanf_float+0x13a>
 80066aa:	d84d      	bhi.n	8006748 <_scanf_float+0xf4>
 80066ac:	2b39      	cmp	r3, #57	; 0x39
 80066ae:	d840      	bhi.n	8006732 <_scanf_float+0xde>
 80066b0:	2b31      	cmp	r3, #49	; 0x31
 80066b2:	f080 8088 	bcs.w	80067c6 <_scanf_float+0x172>
 80066b6:	2b2d      	cmp	r3, #45	; 0x2d
 80066b8:	f000 8090 	beq.w	80067dc <_scanf_float+0x188>
 80066bc:	d815      	bhi.n	80066ea <_scanf_float+0x96>
 80066be:	2b2b      	cmp	r3, #43	; 0x2b
 80066c0:	f000 808c 	beq.w	80067dc <_scanf_float+0x188>
 80066c4:	f1b9 0f00 	cmp.w	r9, #0
 80066c8:	d003      	beq.n	80066d2 <_scanf_float+0x7e>
 80066ca:	6823      	ldr	r3, [r4, #0]
 80066cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066d0:	6023      	str	r3, [r4, #0]
 80066d2:	3a01      	subs	r2, #1
 80066d4:	2a01      	cmp	r2, #1
 80066d6:	f200 80ea 	bhi.w	80068ae <_scanf_float+0x25a>
 80066da:	4545      	cmp	r5, r8
 80066dc:	f200 80dc 	bhi.w	8006898 <_scanf_float+0x244>
 80066e0:	2601      	movs	r6, #1
 80066e2:	4630      	mov	r0, r6
 80066e4:	b007      	add	sp, #28
 80066e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066ea:	2b2e      	cmp	r3, #46	; 0x2e
 80066ec:	f000 809f 	beq.w	800682e <_scanf_float+0x1da>
 80066f0:	2b30      	cmp	r3, #48	; 0x30
 80066f2:	d1e7      	bne.n	80066c4 <_scanf_float+0x70>
 80066f4:	6820      	ldr	r0, [r4, #0]
 80066f6:	f410 7f80 	tst.w	r0, #256	; 0x100
 80066fa:	d064      	beq.n	80067c6 <_scanf_float+0x172>
 80066fc:	9b01      	ldr	r3, [sp, #4]
 80066fe:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8006702:	6020      	str	r0, [r4, #0]
 8006704:	f109 0901 	add.w	r9, r9, #1
 8006708:	b11b      	cbz	r3, 8006712 <_scanf_float+0xbe>
 800670a:	3b01      	subs	r3, #1
 800670c:	3101      	adds	r1, #1
 800670e:	9301      	str	r3, [sp, #4]
 8006710:	60a1      	str	r1, [r4, #8]
 8006712:	68a3      	ldr	r3, [r4, #8]
 8006714:	3b01      	subs	r3, #1
 8006716:	60a3      	str	r3, [r4, #8]
 8006718:	6923      	ldr	r3, [r4, #16]
 800671a:	3301      	adds	r3, #1
 800671c:	6123      	str	r3, [r4, #16]
 800671e:	6873      	ldr	r3, [r6, #4]
 8006720:	3b01      	subs	r3, #1
 8006722:	2b00      	cmp	r3, #0
 8006724:	6073      	str	r3, [r6, #4]
 8006726:	f340 80ac 	ble.w	8006882 <_scanf_float+0x22e>
 800672a:	6833      	ldr	r3, [r6, #0]
 800672c:	3301      	adds	r3, #1
 800672e:	6033      	str	r3, [r6, #0]
 8006730:	e7b5      	b.n	800669e <_scanf_float+0x4a>
 8006732:	2b45      	cmp	r3, #69	; 0x45
 8006734:	f000 8085 	beq.w	8006842 <_scanf_float+0x1ee>
 8006738:	2b46      	cmp	r3, #70	; 0x46
 800673a:	d06a      	beq.n	8006812 <_scanf_float+0x1be>
 800673c:	2b41      	cmp	r3, #65	; 0x41
 800673e:	d1c1      	bne.n	80066c4 <_scanf_float+0x70>
 8006740:	2a01      	cmp	r2, #1
 8006742:	d1bf      	bne.n	80066c4 <_scanf_float+0x70>
 8006744:	2202      	movs	r2, #2
 8006746:	e046      	b.n	80067d6 <_scanf_float+0x182>
 8006748:	2b65      	cmp	r3, #101	; 0x65
 800674a:	d07a      	beq.n	8006842 <_scanf_float+0x1ee>
 800674c:	d818      	bhi.n	8006780 <_scanf_float+0x12c>
 800674e:	2b54      	cmp	r3, #84	; 0x54
 8006750:	d066      	beq.n	8006820 <_scanf_float+0x1cc>
 8006752:	d811      	bhi.n	8006778 <_scanf_float+0x124>
 8006754:	2b4e      	cmp	r3, #78	; 0x4e
 8006756:	d1b5      	bne.n	80066c4 <_scanf_float+0x70>
 8006758:	2a00      	cmp	r2, #0
 800675a:	d146      	bne.n	80067ea <_scanf_float+0x196>
 800675c:	f1b9 0f00 	cmp.w	r9, #0
 8006760:	d145      	bne.n	80067ee <_scanf_float+0x19a>
 8006762:	6821      	ldr	r1, [r4, #0]
 8006764:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8006768:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800676c:	d13f      	bne.n	80067ee <_scanf_float+0x19a>
 800676e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8006772:	6021      	str	r1, [r4, #0]
 8006774:	2201      	movs	r2, #1
 8006776:	e02e      	b.n	80067d6 <_scanf_float+0x182>
 8006778:	2b59      	cmp	r3, #89	; 0x59
 800677a:	d01e      	beq.n	80067ba <_scanf_float+0x166>
 800677c:	2b61      	cmp	r3, #97	; 0x61
 800677e:	e7de      	b.n	800673e <_scanf_float+0xea>
 8006780:	2b6e      	cmp	r3, #110	; 0x6e
 8006782:	d0e9      	beq.n	8006758 <_scanf_float+0x104>
 8006784:	d815      	bhi.n	80067b2 <_scanf_float+0x15e>
 8006786:	2b66      	cmp	r3, #102	; 0x66
 8006788:	d043      	beq.n	8006812 <_scanf_float+0x1be>
 800678a:	2b69      	cmp	r3, #105	; 0x69
 800678c:	d19a      	bne.n	80066c4 <_scanf_float+0x70>
 800678e:	f1bb 0f00 	cmp.w	fp, #0
 8006792:	d138      	bne.n	8006806 <_scanf_float+0x1b2>
 8006794:	f1b9 0f00 	cmp.w	r9, #0
 8006798:	d197      	bne.n	80066ca <_scanf_float+0x76>
 800679a:	6821      	ldr	r1, [r4, #0]
 800679c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80067a0:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80067a4:	d195      	bne.n	80066d2 <_scanf_float+0x7e>
 80067a6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80067aa:	6021      	str	r1, [r4, #0]
 80067ac:	f04f 0b01 	mov.w	fp, #1
 80067b0:	e011      	b.n	80067d6 <_scanf_float+0x182>
 80067b2:	2b74      	cmp	r3, #116	; 0x74
 80067b4:	d034      	beq.n	8006820 <_scanf_float+0x1cc>
 80067b6:	2b79      	cmp	r3, #121	; 0x79
 80067b8:	d184      	bne.n	80066c4 <_scanf_float+0x70>
 80067ba:	f1bb 0f07 	cmp.w	fp, #7
 80067be:	d181      	bne.n	80066c4 <_scanf_float+0x70>
 80067c0:	f04f 0b08 	mov.w	fp, #8
 80067c4:	e007      	b.n	80067d6 <_scanf_float+0x182>
 80067c6:	eb12 0f0b 	cmn.w	r2, fp
 80067ca:	f47f af7b 	bne.w	80066c4 <_scanf_float+0x70>
 80067ce:	6821      	ldr	r1, [r4, #0]
 80067d0:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80067d4:	6021      	str	r1, [r4, #0]
 80067d6:	702b      	strb	r3, [r5, #0]
 80067d8:	3501      	adds	r5, #1
 80067da:	e79a      	b.n	8006712 <_scanf_float+0xbe>
 80067dc:	6821      	ldr	r1, [r4, #0]
 80067de:	0608      	lsls	r0, r1, #24
 80067e0:	f57f af70 	bpl.w	80066c4 <_scanf_float+0x70>
 80067e4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80067e8:	e7f4      	b.n	80067d4 <_scanf_float+0x180>
 80067ea:	2a02      	cmp	r2, #2
 80067ec:	d047      	beq.n	800687e <_scanf_float+0x22a>
 80067ee:	f1bb 0f01 	cmp.w	fp, #1
 80067f2:	d003      	beq.n	80067fc <_scanf_float+0x1a8>
 80067f4:	f1bb 0f04 	cmp.w	fp, #4
 80067f8:	f47f af64 	bne.w	80066c4 <_scanf_float+0x70>
 80067fc:	f10b 0b01 	add.w	fp, fp, #1
 8006800:	fa5f fb8b 	uxtb.w	fp, fp
 8006804:	e7e7      	b.n	80067d6 <_scanf_float+0x182>
 8006806:	f1bb 0f03 	cmp.w	fp, #3
 800680a:	d0f7      	beq.n	80067fc <_scanf_float+0x1a8>
 800680c:	f1bb 0f05 	cmp.w	fp, #5
 8006810:	e7f2      	b.n	80067f8 <_scanf_float+0x1a4>
 8006812:	f1bb 0f02 	cmp.w	fp, #2
 8006816:	f47f af55 	bne.w	80066c4 <_scanf_float+0x70>
 800681a:	f04f 0b03 	mov.w	fp, #3
 800681e:	e7da      	b.n	80067d6 <_scanf_float+0x182>
 8006820:	f1bb 0f06 	cmp.w	fp, #6
 8006824:	f47f af4e 	bne.w	80066c4 <_scanf_float+0x70>
 8006828:	f04f 0b07 	mov.w	fp, #7
 800682c:	e7d3      	b.n	80067d6 <_scanf_float+0x182>
 800682e:	6821      	ldr	r1, [r4, #0]
 8006830:	0588      	lsls	r0, r1, #22
 8006832:	f57f af47 	bpl.w	80066c4 <_scanf_float+0x70>
 8006836:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800683a:	6021      	str	r1, [r4, #0]
 800683c:	f8cd 9008 	str.w	r9, [sp, #8]
 8006840:	e7c9      	b.n	80067d6 <_scanf_float+0x182>
 8006842:	6821      	ldr	r1, [r4, #0]
 8006844:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8006848:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800684c:	d006      	beq.n	800685c <_scanf_float+0x208>
 800684e:	0548      	lsls	r0, r1, #21
 8006850:	f57f af38 	bpl.w	80066c4 <_scanf_float+0x70>
 8006854:	f1b9 0f00 	cmp.w	r9, #0
 8006858:	f43f af3b 	beq.w	80066d2 <_scanf_float+0x7e>
 800685c:	0588      	lsls	r0, r1, #22
 800685e:	bf58      	it	pl
 8006860:	9802      	ldrpl	r0, [sp, #8]
 8006862:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8006866:	bf58      	it	pl
 8006868:	eba9 0000 	subpl.w	r0, r9, r0
 800686c:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8006870:	bf58      	it	pl
 8006872:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8006876:	6021      	str	r1, [r4, #0]
 8006878:	f04f 0900 	mov.w	r9, #0
 800687c:	e7ab      	b.n	80067d6 <_scanf_float+0x182>
 800687e:	2203      	movs	r2, #3
 8006880:	e7a9      	b.n	80067d6 <_scanf_float+0x182>
 8006882:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006886:	9205      	str	r2, [sp, #20]
 8006888:	4631      	mov	r1, r6
 800688a:	4638      	mov	r0, r7
 800688c:	4798      	blx	r3
 800688e:	9a05      	ldr	r2, [sp, #20]
 8006890:	2800      	cmp	r0, #0
 8006892:	f43f af04 	beq.w	800669e <_scanf_float+0x4a>
 8006896:	e715      	b.n	80066c4 <_scanf_float+0x70>
 8006898:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800689c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80068a0:	4632      	mov	r2, r6
 80068a2:	4638      	mov	r0, r7
 80068a4:	4798      	blx	r3
 80068a6:	6923      	ldr	r3, [r4, #16]
 80068a8:	3b01      	subs	r3, #1
 80068aa:	6123      	str	r3, [r4, #16]
 80068ac:	e715      	b.n	80066da <_scanf_float+0x86>
 80068ae:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 80068b2:	2b06      	cmp	r3, #6
 80068b4:	d80a      	bhi.n	80068cc <_scanf_float+0x278>
 80068b6:	f1bb 0f02 	cmp.w	fp, #2
 80068ba:	d968      	bls.n	800698e <_scanf_float+0x33a>
 80068bc:	f1ab 0b03 	sub.w	fp, fp, #3
 80068c0:	fa5f fb8b 	uxtb.w	fp, fp
 80068c4:	eba5 0b0b 	sub.w	fp, r5, fp
 80068c8:	455d      	cmp	r5, fp
 80068ca:	d14b      	bne.n	8006964 <_scanf_float+0x310>
 80068cc:	6823      	ldr	r3, [r4, #0]
 80068ce:	05da      	lsls	r2, r3, #23
 80068d0:	d51f      	bpl.n	8006912 <_scanf_float+0x2be>
 80068d2:	055b      	lsls	r3, r3, #21
 80068d4:	d468      	bmi.n	80069a8 <_scanf_float+0x354>
 80068d6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80068da:	6923      	ldr	r3, [r4, #16]
 80068dc:	2965      	cmp	r1, #101	; 0x65
 80068de:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80068e2:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 80068e6:	6123      	str	r3, [r4, #16]
 80068e8:	d00d      	beq.n	8006906 <_scanf_float+0x2b2>
 80068ea:	2945      	cmp	r1, #69	; 0x45
 80068ec:	d00b      	beq.n	8006906 <_scanf_float+0x2b2>
 80068ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80068f2:	4632      	mov	r2, r6
 80068f4:	4638      	mov	r0, r7
 80068f6:	4798      	blx	r3
 80068f8:	6923      	ldr	r3, [r4, #16]
 80068fa:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 80068fe:	3b01      	subs	r3, #1
 8006900:	f1a5 0b02 	sub.w	fp, r5, #2
 8006904:	6123      	str	r3, [r4, #16]
 8006906:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800690a:	4632      	mov	r2, r6
 800690c:	4638      	mov	r0, r7
 800690e:	4798      	blx	r3
 8006910:	465d      	mov	r5, fp
 8006912:	6826      	ldr	r6, [r4, #0]
 8006914:	f016 0610 	ands.w	r6, r6, #16
 8006918:	d17a      	bne.n	8006a10 <_scanf_float+0x3bc>
 800691a:	702e      	strb	r6, [r5, #0]
 800691c:	6823      	ldr	r3, [r4, #0]
 800691e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006922:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006926:	d142      	bne.n	80069ae <_scanf_float+0x35a>
 8006928:	9b02      	ldr	r3, [sp, #8]
 800692a:	eba9 0303 	sub.w	r3, r9, r3
 800692e:	425a      	negs	r2, r3
 8006930:	2b00      	cmp	r3, #0
 8006932:	d149      	bne.n	80069c8 <_scanf_float+0x374>
 8006934:	2200      	movs	r2, #0
 8006936:	4641      	mov	r1, r8
 8006938:	4638      	mov	r0, r7
 800693a:	f000 fed1 	bl	80076e0 <_strtod_r>
 800693e:	6825      	ldr	r5, [r4, #0]
 8006940:	f8da 3000 	ldr.w	r3, [sl]
 8006944:	f015 0f02 	tst.w	r5, #2
 8006948:	f103 0204 	add.w	r2, r3, #4
 800694c:	ec59 8b10 	vmov	r8, r9, d0
 8006950:	f8ca 2000 	str.w	r2, [sl]
 8006954:	d043      	beq.n	80069de <_scanf_float+0x38a>
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	e9c3 8900 	strd	r8, r9, [r3]
 800695c:	68e3      	ldr	r3, [r4, #12]
 800695e:	3301      	adds	r3, #1
 8006960:	60e3      	str	r3, [r4, #12]
 8006962:	e6be      	b.n	80066e2 <_scanf_float+0x8e>
 8006964:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006968:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800696c:	4632      	mov	r2, r6
 800696e:	4638      	mov	r0, r7
 8006970:	4798      	blx	r3
 8006972:	6923      	ldr	r3, [r4, #16]
 8006974:	3b01      	subs	r3, #1
 8006976:	6123      	str	r3, [r4, #16]
 8006978:	e7a6      	b.n	80068c8 <_scanf_float+0x274>
 800697a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800697e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006982:	4632      	mov	r2, r6
 8006984:	4638      	mov	r0, r7
 8006986:	4798      	blx	r3
 8006988:	6923      	ldr	r3, [r4, #16]
 800698a:	3b01      	subs	r3, #1
 800698c:	6123      	str	r3, [r4, #16]
 800698e:	4545      	cmp	r5, r8
 8006990:	d8f3      	bhi.n	800697a <_scanf_float+0x326>
 8006992:	e6a5      	b.n	80066e0 <_scanf_float+0x8c>
 8006994:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006998:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800699c:	4632      	mov	r2, r6
 800699e:	4638      	mov	r0, r7
 80069a0:	4798      	blx	r3
 80069a2:	6923      	ldr	r3, [r4, #16]
 80069a4:	3b01      	subs	r3, #1
 80069a6:	6123      	str	r3, [r4, #16]
 80069a8:	4545      	cmp	r5, r8
 80069aa:	d8f3      	bhi.n	8006994 <_scanf_float+0x340>
 80069ac:	e698      	b.n	80066e0 <_scanf_float+0x8c>
 80069ae:	9b03      	ldr	r3, [sp, #12]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d0bf      	beq.n	8006934 <_scanf_float+0x2e0>
 80069b4:	9904      	ldr	r1, [sp, #16]
 80069b6:	230a      	movs	r3, #10
 80069b8:	4632      	mov	r2, r6
 80069ba:	3101      	adds	r1, #1
 80069bc:	4638      	mov	r0, r7
 80069be:	f000 ff1b 	bl	80077f8 <_strtol_r>
 80069c2:	9b03      	ldr	r3, [sp, #12]
 80069c4:	9d04      	ldr	r5, [sp, #16]
 80069c6:	1ac2      	subs	r2, r0, r3
 80069c8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80069cc:	429d      	cmp	r5, r3
 80069ce:	bf28      	it	cs
 80069d0:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 80069d4:	490f      	ldr	r1, [pc, #60]	; (8006a14 <_scanf_float+0x3c0>)
 80069d6:	4628      	mov	r0, r5
 80069d8:	f000 f824 	bl	8006a24 <siprintf>
 80069dc:	e7aa      	b.n	8006934 <_scanf_float+0x2e0>
 80069de:	f015 0504 	ands.w	r5, r5, #4
 80069e2:	d1b8      	bne.n	8006956 <_scanf_float+0x302>
 80069e4:	681f      	ldr	r7, [r3, #0]
 80069e6:	ee10 2a10 	vmov	r2, s0
 80069ea:	464b      	mov	r3, r9
 80069ec:	ee10 0a10 	vmov	r0, s0
 80069f0:	4649      	mov	r1, r9
 80069f2:	f7fa f8a3 	bl	8000b3c <__aeabi_dcmpun>
 80069f6:	b128      	cbz	r0, 8006a04 <_scanf_float+0x3b0>
 80069f8:	4628      	mov	r0, r5
 80069fa:	f000 f80d 	bl	8006a18 <nanf>
 80069fe:	ed87 0a00 	vstr	s0, [r7]
 8006a02:	e7ab      	b.n	800695c <_scanf_float+0x308>
 8006a04:	4640      	mov	r0, r8
 8006a06:	4649      	mov	r1, r9
 8006a08:	f7fa f8f6 	bl	8000bf8 <__aeabi_d2f>
 8006a0c:	6038      	str	r0, [r7, #0]
 8006a0e:	e7a5      	b.n	800695c <_scanf_float+0x308>
 8006a10:	2600      	movs	r6, #0
 8006a12:	e666      	b.n	80066e2 <_scanf_float+0x8e>
 8006a14:	0800a68e 	.word	0x0800a68e

08006a18 <nanf>:
 8006a18:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006a20 <nanf+0x8>
 8006a1c:	4770      	bx	lr
 8006a1e:	bf00      	nop
 8006a20:	7fc00000 	.word	0x7fc00000

08006a24 <siprintf>:
 8006a24:	b40e      	push	{r1, r2, r3}
 8006a26:	b500      	push	{lr}
 8006a28:	b09c      	sub	sp, #112	; 0x70
 8006a2a:	ab1d      	add	r3, sp, #116	; 0x74
 8006a2c:	9002      	str	r0, [sp, #8]
 8006a2e:	9006      	str	r0, [sp, #24]
 8006a30:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006a34:	4809      	ldr	r0, [pc, #36]	; (8006a5c <siprintf+0x38>)
 8006a36:	9107      	str	r1, [sp, #28]
 8006a38:	9104      	str	r1, [sp, #16]
 8006a3a:	4909      	ldr	r1, [pc, #36]	; (8006a60 <siprintf+0x3c>)
 8006a3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a40:	9105      	str	r1, [sp, #20]
 8006a42:	6800      	ldr	r0, [r0, #0]
 8006a44:	9301      	str	r3, [sp, #4]
 8006a46:	a902      	add	r1, sp, #8
 8006a48:	f002 fda0 	bl	800958c <_svfiprintf_r>
 8006a4c:	9b02      	ldr	r3, [sp, #8]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	701a      	strb	r2, [r3, #0]
 8006a52:	b01c      	add	sp, #112	; 0x70
 8006a54:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a58:	b003      	add	sp, #12
 8006a5a:	4770      	bx	lr
 8006a5c:	20000014 	.word	0x20000014
 8006a60:	ffff0208 	.word	0xffff0208

08006a64 <siscanf>:
 8006a64:	b40e      	push	{r1, r2, r3}
 8006a66:	b530      	push	{r4, r5, lr}
 8006a68:	b09c      	sub	sp, #112	; 0x70
 8006a6a:	ac1f      	add	r4, sp, #124	; 0x7c
 8006a6c:	f44f 7201 	mov.w	r2, #516	; 0x204
 8006a70:	f854 5b04 	ldr.w	r5, [r4], #4
 8006a74:	f8ad 2014 	strh.w	r2, [sp, #20]
 8006a78:	9002      	str	r0, [sp, #8]
 8006a7a:	9006      	str	r0, [sp, #24]
 8006a7c:	f7f9 fbb0 	bl	80001e0 <strlen>
 8006a80:	4b0b      	ldr	r3, [pc, #44]	; (8006ab0 <siscanf+0x4c>)
 8006a82:	9003      	str	r0, [sp, #12]
 8006a84:	9007      	str	r0, [sp, #28]
 8006a86:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a88:	480a      	ldr	r0, [pc, #40]	; (8006ab4 <siscanf+0x50>)
 8006a8a:	9401      	str	r4, [sp, #4]
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006a90:	9314      	str	r3, [sp, #80]	; 0x50
 8006a92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006a96:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006a9a:	462a      	mov	r2, r5
 8006a9c:	4623      	mov	r3, r4
 8006a9e:	a902      	add	r1, sp, #8
 8006aa0:	6800      	ldr	r0, [r0, #0]
 8006aa2:	f002 fec5 	bl	8009830 <__ssvfiscanf_r>
 8006aa6:	b01c      	add	sp, #112	; 0x70
 8006aa8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006aac:	b003      	add	sp, #12
 8006aae:	4770      	bx	lr
 8006ab0:	08006ab9 	.word	0x08006ab9
 8006ab4:	20000014 	.word	0x20000014

08006ab8 <__seofread>:
 8006ab8:	2000      	movs	r0, #0
 8006aba:	4770      	bx	lr

08006abc <sulp>:
 8006abc:	b570      	push	{r4, r5, r6, lr}
 8006abe:	4604      	mov	r4, r0
 8006ac0:	460d      	mov	r5, r1
 8006ac2:	ec45 4b10 	vmov	d0, r4, r5
 8006ac6:	4616      	mov	r6, r2
 8006ac8:	f002 fb1c 	bl	8009104 <__ulp>
 8006acc:	ec51 0b10 	vmov	r0, r1, d0
 8006ad0:	b17e      	cbz	r6, 8006af2 <sulp+0x36>
 8006ad2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006ad6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	dd09      	ble.n	8006af2 <sulp+0x36>
 8006ade:	051b      	lsls	r3, r3, #20
 8006ae0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006ae4:	2400      	movs	r4, #0
 8006ae6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006aea:	4622      	mov	r2, r4
 8006aec:	462b      	mov	r3, r5
 8006aee:	f7f9 fd8b 	bl	8000608 <__aeabi_dmul>
 8006af2:	bd70      	pop	{r4, r5, r6, pc}
 8006af4:	0000      	movs	r0, r0
	...

08006af8 <_strtod_l>:
 8006af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006afc:	461f      	mov	r7, r3
 8006afe:	b0a1      	sub	sp, #132	; 0x84
 8006b00:	2300      	movs	r3, #0
 8006b02:	4681      	mov	r9, r0
 8006b04:	4638      	mov	r0, r7
 8006b06:	460e      	mov	r6, r1
 8006b08:	9217      	str	r2, [sp, #92]	; 0x5c
 8006b0a:	931c      	str	r3, [sp, #112]	; 0x70
 8006b0c:	f002 f804 	bl	8008b18 <__localeconv_l>
 8006b10:	4680      	mov	r8, r0
 8006b12:	6800      	ldr	r0, [r0, #0]
 8006b14:	f7f9 fb64 	bl	80001e0 <strlen>
 8006b18:	f04f 0a00 	mov.w	sl, #0
 8006b1c:	4604      	mov	r4, r0
 8006b1e:	f04f 0b00 	mov.w	fp, #0
 8006b22:	961b      	str	r6, [sp, #108]	; 0x6c
 8006b24:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006b26:	781a      	ldrb	r2, [r3, #0]
 8006b28:	2a0d      	cmp	r2, #13
 8006b2a:	d832      	bhi.n	8006b92 <_strtod_l+0x9a>
 8006b2c:	2a09      	cmp	r2, #9
 8006b2e:	d236      	bcs.n	8006b9e <_strtod_l+0xa6>
 8006b30:	2a00      	cmp	r2, #0
 8006b32:	d03e      	beq.n	8006bb2 <_strtod_l+0xba>
 8006b34:	2300      	movs	r3, #0
 8006b36:	930d      	str	r3, [sp, #52]	; 0x34
 8006b38:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8006b3a:	782b      	ldrb	r3, [r5, #0]
 8006b3c:	2b30      	cmp	r3, #48	; 0x30
 8006b3e:	f040 80ac 	bne.w	8006c9a <_strtod_l+0x1a2>
 8006b42:	786b      	ldrb	r3, [r5, #1]
 8006b44:	2b58      	cmp	r3, #88	; 0x58
 8006b46:	d001      	beq.n	8006b4c <_strtod_l+0x54>
 8006b48:	2b78      	cmp	r3, #120	; 0x78
 8006b4a:	d167      	bne.n	8006c1c <_strtod_l+0x124>
 8006b4c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b4e:	9301      	str	r3, [sp, #4]
 8006b50:	ab1c      	add	r3, sp, #112	; 0x70
 8006b52:	9300      	str	r3, [sp, #0]
 8006b54:	9702      	str	r7, [sp, #8]
 8006b56:	ab1d      	add	r3, sp, #116	; 0x74
 8006b58:	4a88      	ldr	r2, [pc, #544]	; (8006d7c <_strtod_l+0x284>)
 8006b5a:	a91b      	add	r1, sp, #108	; 0x6c
 8006b5c:	4648      	mov	r0, r9
 8006b5e:	f001 fcf2 	bl	8008546 <__gethex>
 8006b62:	f010 0407 	ands.w	r4, r0, #7
 8006b66:	4606      	mov	r6, r0
 8006b68:	d005      	beq.n	8006b76 <_strtod_l+0x7e>
 8006b6a:	2c06      	cmp	r4, #6
 8006b6c:	d12b      	bne.n	8006bc6 <_strtod_l+0xce>
 8006b6e:	3501      	adds	r5, #1
 8006b70:	2300      	movs	r3, #0
 8006b72:	951b      	str	r5, [sp, #108]	; 0x6c
 8006b74:	930d      	str	r3, [sp, #52]	; 0x34
 8006b76:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	f040 859a 	bne.w	80076b2 <_strtod_l+0xbba>
 8006b7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b80:	b1e3      	cbz	r3, 8006bbc <_strtod_l+0xc4>
 8006b82:	4652      	mov	r2, sl
 8006b84:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006b88:	ec43 2b10 	vmov	d0, r2, r3
 8006b8c:	b021      	add	sp, #132	; 0x84
 8006b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b92:	2a2b      	cmp	r2, #43	; 0x2b
 8006b94:	d015      	beq.n	8006bc2 <_strtod_l+0xca>
 8006b96:	2a2d      	cmp	r2, #45	; 0x2d
 8006b98:	d004      	beq.n	8006ba4 <_strtod_l+0xac>
 8006b9a:	2a20      	cmp	r2, #32
 8006b9c:	d1ca      	bne.n	8006b34 <_strtod_l+0x3c>
 8006b9e:	3301      	adds	r3, #1
 8006ba0:	931b      	str	r3, [sp, #108]	; 0x6c
 8006ba2:	e7bf      	b.n	8006b24 <_strtod_l+0x2c>
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	920d      	str	r2, [sp, #52]	; 0x34
 8006ba8:	1c5a      	adds	r2, r3, #1
 8006baa:	921b      	str	r2, [sp, #108]	; 0x6c
 8006bac:	785b      	ldrb	r3, [r3, #1]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d1c2      	bne.n	8006b38 <_strtod_l+0x40>
 8006bb2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006bb4:	961b      	str	r6, [sp, #108]	; 0x6c
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	f040 8579 	bne.w	80076ae <_strtod_l+0xbb6>
 8006bbc:	4652      	mov	r2, sl
 8006bbe:	465b      	mov	r3, fp
 8006bc0:	e7e2      	b.n	8006b88 <_strtod_l+0x90>
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	e7ef      	b.n	8006ba6 <_strtod_l+0xae>
 8006bc6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006bc8:	b13a      	cbz	r2, 8006bda <_strtod_l+0xe2>
 8006bca:	2135      	movs	r1, #53	; 0x35
 8006bcc:	a81e      	add	r0, sp, #120	; 0x78
 8006bce:	f002 fb91 	bl	80092f4 <__copybits>
 8006bd2:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006bd4:	4648      	mov	r0, r9
 8006bd6:	f001 fffd 	bl	8008bd4 <_Bfree>
 8006bda:	3c01      	subs	r4, #1
 8006bdc:	2c04      	cmp	r4, #4
 8006bde:	d806      	bhi.n	8006bee <_strtod_l+0xf6>
 8006be0:	e8df f004 	tbb	[pc, r4]
 8006be4:	1714030a 	.word	0x1714030a
 8006be8:	0a          	.byte	0x0a
 8006be9:	00          	.byte	0x00
 8006bea:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8006bee:	0730      	lsls	r0, r6, #28
 8006bf0:	d5c1      	bpl.n	8006b76 <_strtod_l+0x7e>
 8006bf2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006bf6:	e7be      	b.n	8006b76 <_strtod_l+0x7e>
 8006bf8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8006bfc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8006bfe:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006c02:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006c06:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006c0a:	e7f0      	b.n	8006bee <_strtod_l+0xf6>
 8006c0c:	f8df b170 	ldr.w	fp, [pc, #368]	; 8006d80 <_strtod_l+0x288>
 8006c10:	e7ed      	b.n	8006bee <_strtod_l+0xf6>
 8006c12:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8006c16:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8006c1a:	e7e8      	b.n	8006bee <_strtod_l+0xf6>
 8006c1c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006c1e:	1c5a      	adds	r2, r3, #1
 8006c20:	921b      	str	r2, [sp, #108]	; 0x6c
 8006c22:	785b      	ldrb	r3, [r3, #1]
 8006c24:	2b30      	cmp	r3, #48	; 0x30
 8006c26:	d0f9      	beq.n	8006c1c <_strtod_l+0x124>
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d0a4      	beq.n	8006b76 <_strtod_l+0x7e>
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	2500      	movs	r5, #0
 8006c30:	9306      	str	r3, [sp, #24]
 8006c32:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006c34:	9308      	str	r3, [sp, #32]
 8006c36:	9507      	str	r5, [sp, #28]
 8006c38:	9505      	str	r5, [sp, #20]
 8006c3a:	220a      	movs	r2, #10
 8006c3c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8006c3e:	7807      	ldrb	r7, [r0, #0]
 8006c40:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8006c44:	b2d9      	uxtb	r1, r3
 8006c46:	2909      	cmp	r1, #9
 8006c48:	d929      	bls.n	8006c9e <_strtod_l+0x1a6>
 8006c4a:	4622      	mov	r2, r4
 8006c4c:	f8d8 1000 	ldr.w	r1, [r8]
 8006c50:	f003 f8d8 	bl	8009e04 <strncmp>
 8006c54:	2800      	cmp	r0, #0
 8006c56:	d031      	beq.n	8006cbc <_strtod_l+0x1c4>
 8006c58:	2000      	movs	r0, #0
 8006c5a:	9c05      	ldr	r4, [sp, #20]
 8006c5c:	9004      	str	r0, [sp, #16]
 8006c5e:	463b      	mov	r3, r7
 8006c60:	4602      	mov	r2, r0
 8006c62:	2b65      	cmp	r3, #101	; 0x65
 8006c64:	d001      	beq.n	8006c6a <_strtod_l+0x172>
 8006c66:	2b45      	cmp	r3, #69	; 0x45
 8006c68:	d114      	bne.n	8006c94 <_strtod_l+0x19c>
 8006c6a:	b924      	cbnz	r4, 8006c76 <_strtod_l+0x17e>
 8006c6c:	b910      	cbnz	r0, 8006c74 <_strtod_l+0x17c>
 8006c6e:	9b06      	ldr	r3, [sp, #24]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d09e      	beq.n	8006bb2 <_strtod_l+0xba>
 8006c74:	2400      	movs	r4, #0
 8006c76:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8006c78:	1c73      	adds	r3, r6, #1
 8006c7a:	931b      	str	r3, [sp, #108]	; 0x6c
 8006c7c:	7873      	ldrb	r3, [r6, #1]
 8006c7e:	2b2b      	cmp	r3, #43	; 0x2b
 8006c80:	d078      	beq.n	8006d74 <_strtod_l+0x27c>
 8006c82:	2b2d      	cmp	r3, #45	; 0x2d
 8006c84:	d070      	beq.n	8006d68 <_strtod_l+0x270>
 8006c86:	f04f 0c00 	mov.w	ip, #0
 8006c8a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8006c8e:	2f09      	cmp	r7, #9
 8006c90:	d97c      	bls.n	8006d8c <_strtod_l+0x294>
 8006c92:	961b      	str	r6, [sp, #108]	; 0x6c
 8006c94:	f04f 0e00 	mov.w	lr, #0
 8006c98:	e09a      	b.n	8006dd0 <_strtod_l+0x2d8>
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	e7c7      	b.n	8006c2e <_strtod_l+0x136>
 8006c9e:	9905      	ldr	r1, [sp, #20]
 8006ca0:	2908      	cmp	r1, #8
 8006ca2:	bfdd      	ittte	le
 8006ca4:	9907      	ldrle	r1, [sp, #28]
 8006ca6:	fb02 3301 	mlale	r3, r2, r1, r3
 8006caa:	9307      	strle	r3, [sp, #28]
 8006cac:	fb02 3505 	mlagt	r5, r2, r5, r3
 8006cb0:	9b05      	ldr	r3, [sp, #20]
 8006cb2:	3001      	adds	r0, #1
 8006cb4:	3301      	adds	r3, #1
 8006cb6:	9305      	str	r3, [sp, #20]
 8006cb8:	901b      	str	r0, [sp, #108]	; 0x6c
 8006cba:	e7bf      	b.n	8006c3c <_strtod_l+0x144>
 8006cbc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006cbe:	191a      	adds	r2, r3, r4
 8006cc0:	921b      	str	r2, [sp, #108]	; 0x6c
 8006cc2:	9a05      	ldr	r2, [sp, #20]
 8006cc4:	5d1b      	ldrb	r3, [r3, r4]
 8006cc6:	2a00      	cmp	r2, #0
 8006cc8:	d037      	beq.n	8006d3a <_strtod_l+0x242>
 8006cca:	9c05      	ldr	r4, [sp, #20]
 8006ccc:	4602      	mov	r2, r0
 8006cce:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8006cd2:	2909      	cmp	r1, #9
 8006cd4:	d913      	bls.n	8006cfe <_strtod_l+0x206>
 8006cd6:	2101      	movs	r1, #1
 8006cd8:	9104      	str	r1, [sp, #16]
 8006cda:	e7c2      	b.n	8006c62 <_strtod_l+0x16a>
 8006cdc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006cde:	1c5a      	adds	r2, r3, #1
 8006ce0:	921b      	str	r2, [sp, #108]	; 0x6c
 8006ce2:	785b      	ldrb	r3, [r3, #1]
 8006ce4:	3001      	adds	r0, #1
 8006ce6:	2b30      	cmp	r3, #48	; 0x30
 8006ce8:	d0f8      	beq.n	8006cdc <_strtod_l+0x1e4>
 8006cea:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8006cee:	2a08      	cmp	r2, #8
 8006cf0:	f200 84e4 	bhi.w	80076bc <_strtod_l+0xbc4>
 8006cf4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006cf6:	9208      	str	r2, [sp, #32]
 8006cf8:	4602      	mov	r2, r0
 8006cfa:	2000      	movs	r0, #0
 8006cfc:	4604      	mov	r4, r0
 8006cfe:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8006d02:	f100 0101 	add.w	r1, r0, #1
 8006d06:	d012      	beq.n	8006d2e <_strtod_l+0x236>
 8006d08:	440a      	add	r2, r1
 8006d0a:	eb00 0c04 	add.w	ip, r0, r4
 8006d0e:	4621      	mov	r1, r4
 8006d10:	270a      	movs	r7, #10
 8006d12:	458c      	cmp	ip, r1
 8006d14:	d113      	bne.n	8006d3e <_strtod_l+0x246>
 8006d16:	1821      	adds	r1, r4, r0
 8006d18:	2908      	cmp	r1, #8
 8006d1a:	f104 0401 	add.w	r4, r4, #1
 8006d1e:	4404      	add	r4, r0
 8006d20:	dc19      	bgt.n	8006d56 <_strtod_l+0x25e>
 8006d22:	9b07      	ldr	r3, [sp, #28]
 8006d24:	210a      	movs	r1, #10
 8006d26:	fb01 e303 	mla	r3, r1, r3, lr
 8006d2a:	9307      	str	r3, [sp, #28]
 8006d2c:	2100      	movs	r1, #0
 8006d2e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006d30:	1c58      	adds	r0, r3, #1
 8006d32:	901b      	str	r0, [sp, #108]	; 0x6c
 8006d34:	785b      	ldrb	r3, [r3, #1]
 8006d36:	4608      	mov	r0, r1
 8006d38:	e7c9      	b.n	8006cce <_strtod_l+0x1d6>
 8006d3a:	9805      	ldr	r0, [sp, #20]
 8006d3c:	e7d3      	b.n	8006ce6 <_strtod_l+0x1ee>
 8006d3e:	2908      	cmp	r1, #8
 8006d40:	f101 0101 	add.w	r1, r1, #1
 8006d44:	dc03      	bgt.n	8006d4e <_strtod_l+0x256>
 8006d46:	9b07      	ldr	r3, [sp, #28]
 8006d48:	437b      	muls	r3, r7
 8006d4a:	9307      	str	r3, [sp, #28]
 8006d4c:	e7e1      	b.n	8006d12 <_strtod_l+0x21a>
 8006d4e:	2910      	cmp	r1, #16
 8006d50:	bfd8      	it	le
 8006d52:	437d      	mulle	r5, r7
 8006d54:	e7dd      	b.n	8006d12 <_strtod_l+0x21a>
 8006d56:	2c10      	cmp	r4, #16
 8006d58:	bfdc      	itt	le
 8006d5a:	210a      	movle	r1, #10
 8006d5c:	fb01 e505 	mlale	r5, r1, r5, lr
 8006d60:	e7e4      	b.n	8006d2c <_strtod_l+0x234>
 8006d62:	2301      	movs	r3, #1
 8006d64:	9304      	str	r3, [sp, #16]
 8006d66:	e781      	b.n	8006c6c <_strtod_l+0x174>
 8006d68:	f04f 0c01 	mov.w	ip, #1
 8006d6c:	1cb3      	adds	r3, r6, #2
 8006d6e:	931b      	str	r3, [sp, #108]	; 0x6c
 8006d70:	78b3      	ldrb	r3, [r6, #2]
 8006d72:	e78a      	b.n	8006c8a <_strtod_l+0x192>
 8006d74:	f04f 0c00 	mov.w	ip, #0
 8006d78:	e7f8      	b.n	8006d6c <_strtod_l+0x274>
 8006d7a:	bf00      	nop
 8006d7c:	0800a694 	.word	0x0800a694
 8006d80:	7ff00000 	.word	0x7ff00000
 8006d84:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006d86:	1c5f      	adds	r7, r3, #1
 8006d88:	971b      	str	r7, [sp, #108]	; 0x6c
 8006d8a:	785b      	ldrb	r3, [r3, #1]
 8006d8c:	2b30      	cmp	r3, #48	; 0x30
 8006d8e:	d0f9      	beq.n	8006d84 <_strtod_l+0x28c>
 8006d90:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8006d94:	2f08      	cmp	r7, #8
 8006d96:	f63f af7d 	bhi.w	8006c94 <_strtod_l+0x19c>
 8006d9a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8006d9e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006da0:	930a      	str	r3, [sp, #40]	; 0x28
 8006da2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006da4:	1c5f      	adds	r7, r3, #1
 8006da6:	971b      	str	r7, [sp, #108]	; 0x6c
 8006da8:	785b      	ldrb	r3, [r3, #1]
 8006daa:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8006dae:	f1b8 0f09 	cmp.w	r8, #9
 8006db2:	d937      	bls.n	8006e24 <_strtod_l+0x32c>
 8006db4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006db6:	1a7f      	subs	r7, r7, r1
 8006db8:	2f08      	cmp	r7, #8
 8006dba:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8006dbe:	dc37      	bgt.n	8006e30 <_strtod_l+0x338>
 8006dc0:	45be      	cmp	lr, r7
 8006dc2:	bfa8      	it	ge
 8006dc4:	46be      	movge	lr, r7
 8006dc6:	f1bc 0f00 	cmp.w	ip, #0
 8006dca:	d001      	beq.n	8006dd0 <_strtod_l+0x2d8>
 8006dcc:	f1ce 0e00 	rsb	lr, lr, #0
 8006dd0:	2c00      	cmp	r4, #0
 8006dd2:	d151      	bne.n	8006e78 <_strtod_l+0x380>
 8006dd4:	2800      	cmp	r0, #0
 8006dd6:	f47f aece 	bne.w	8006b76 <_strtod_l+0x7e>
 8006dda:	9a06      	ldr	r2, [sp, #24]
 8006ddc:	2a00      	cmp	r2, #0
 8006dde:	f47f aeca 	bne.w	8006b76 <_strtod_l+0x7e>
 8006de2:	9a04      	ldr	r2, [sp, #16]
 8006de4:	2a00      	cmp	r2, #0
 8006de6:	f47f aee4 	bne.w	8006bb2 <_strtod_l+0xba>
 8006dea:	2b4e      	cmp	r3, #78	; 0x4e
 8006dec:	d027      	beq.n	8006e3e <_strtod_l+0x346>
 8006dee:	dc21      	bgt.n	8006e34 <_strtod_l+0x33c>
 8006df0:	2b49      	cmp	r3, #73	; 0x49
 8006df2:	f47f aede 	bne.w	8006bb2 <_strtod_l+0xba>
 8006df6:	49a0      	ldr	r1, [pc, #640]	; (8007078 <_strtod_l+0x580>)
 8006df8:	a81b      	add	r0, sp, #108	; 0x6c
 8006dfa:	f001 fdd7 	bl	80089ac <__match>
 8006dfe:	2800      	cmp	r0, #0
 8006e00:	f43f aed7 	beq.w	8006bb2 <_strtod_l+0xba>
 8006e04:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006e06:	499d      	ldr	r1, [pc, #628]	; (800707c <_strtod_l+0x584>)
 8006e08:	3b01      	subs	r3, #1
 8006e0a:	a81b      	add	r0, sp, #108	; 0x6c
 8006e0c:	931b      	str	r3, [sp, #108]	; 0x6c
 8006e0e:	f001 fdcd 	bl	80089ac <__match>
 8006e12:	b910      	cbnz	r0, 8006e1a <_strtod_l+0x322>
 8006e14:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006e16:	3301      	adds	r3, #1
 8006e18:	931b      	str	r3, [sp, #108]	; 0x6c
 8006e1a:	f8df b274 	ldr.w	fp, [pc, #628]	; 8007090 <_strtod_l+0x598>
 8006e1e:	f04f 0a00 	mov.w	sl, #0
 8006e22:	e6a8      	b.n	8006b76 <_strtod_l+0x7e>
 8006e24:	210a      	movs	r1, #10
 8006e26:	fb01 3e0e 	mla	lr, r1, lr, r3
 8006e2a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006e2e:	e7b8      	b.n	8006da2 <_strtod_l+0x2aa>
 8006e30:	46be      	mov	lr, r7
 8006e32:	e7c8      	b.n	8006dc6 <_strtod_l+0x2ce>
 8006e34:	2b69      	cmp	r3, #105	; 0x69
 8006e36:	d0de      	beq.n	8006df6 <_strtod_l+0x2fe>
 8006e38:	2b6e      	cmp	r3, #110	; 0x6e
 8006e3a:	f47f aeba 	bne.w	8006bb2 <_strtod_l+0xba>
 8006e3e:	4990      	ldr	r1, [pc, #576]	; (8007080 <_strtod_l+0x588>)
 8006e40:	a81b      	add	r0, sp, #108	; 0x6c
 8006e42:	f001 fdb3 	bl	80089ac <__match>
 8006e46:	2800      	cmp	r0, #0
 8006e48:	f43f aeb3 	beq.w	8006bb2 <_strtod_l+0xba>
 8006e4c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006e4e:	781b      	ldrb	r3, [r3, #0]
 8006e50:	2b28      	cmp	r3, #40	; 0x28
 8006e52:	d10e      	bne.n	8006e72 <_strtod_l+0x37a>
 8006e54:	aa1e      	add	r2, sp, #120	; 0x78
 8006e56:	498b      	ldr	r1, [pc, #556]	; (8007084 <_strtod_l+0x58c>)
 8006e58:	a81b      	add	r0, sp, #108	; 0x6c
 8006e5a:	f001 fdbb 	bl	80089d4 <__hexnan>
 8006e5e:	2805      	cmp	r0, #5
 8006e60:	d107      	bne.n	8006e72 <_strtod_l+0x37a>
 8006e62:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006e64:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8006e68:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006e6c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006e70:	e681      	b.n	8006b76 <_strtod_l+0x7e>
 8006e72:	f8df b224 	ldr.w	fp, [pc, #548]	; 8007098 <_strtod_l+0x5a0>
 8006e76:	e7d2      	b.n	8006e1e <_strtod_l+0x326>
 8006e78:	ebae 0302 	sub.w	r3, lr, r2
 8006e7c:	9306      	str	r3, [sp, #24]
 8006e7e:	9b05      	ldr	r3, [sp, #20]
 8006e80:	9807      	ldr	r0, [sp, #28]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	bf08      	it	eq
 8006e86:	4623      	moveq	r3, r4
 8006e88:	2c10      	cmp	r4, #16
 8006e8a:	9305      	str	r3, [sp, #20]
 8006e8c:	46a0      	mov	r8, r4
 8006e8e:	bfa8      	it	ge
 8006e90:	f04f 0810 	movge.w	r8, #16
 8006e94:	f7f9 fb3e 	bl	8000514 <__aeabi_ui2d>
 8006e98:	2c09      	cmp	r4, #9
 8006e9a:	4682      	mov	sl, r0
 8006e9c:	468b      	mov	fp, r1
 8006e9e:	dc13      	bgt.n	8006ec8 <_strtod_l+0x3d0>
 8006ea0:	9b06      	ldr	r3, [sp, #24]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	f43f ae67 	beq.w	8006b76 <_strtod_l+0x7e>
 8006ea8:	9b06      	ldr	r3, [sp, #24]
 8006eaa:	dd7a      	ble.n	8006fa2 <_strtod_l+0x4aa>
 8006eac:	2b16      	cmp	r3, #22
 8006eae:	dc61      	bgt.n	8006f74 <_strtod_l+0x47c>
 8006eb0:	4a75      	ldr	r2, [pc, #468]	; (8007088 <_strtod_l+0x590>)
 8006eb2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8006eb6:	e9de 0100 	ldrd	r0, r1, [lr]
 8006eba:	4652      	mov	r2, sl
 8006ebc:	465b      	mov	r3, fp
 8006ebe:	f7f9 fba3 	bl	8000608 <__aeabi_dmul>
 8006ec2:	4682      	mov	sl, r0
 8006ec4:	468b      	mov	fp, r1
 8006ec6:	e656      	b.n	8006b76 <_strtod_l+0x7e>
 8006ec8:	4b6f      	ldr	r3, [pc, #444]	; (8007088 <_strtod_l+0x590>)
 8006eca:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006ece:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006ed2:	f7f9 fb99 	bl	8000608 <__aeabi_dmul>
 8006ed6:	4606      	mov	r6, r0
 8006ed8:	4628      	mov	r0, r5
 8006eda:	460f      	mov	r7, r1
 8006edc:	f7f9 fb1a 	bl	8000514 <__aeabi_ui2d>
 8006ee0:	4602      	mov	r2, r0
 8006ee2:	460b      	mov	r3, r1
 8006ee4:	4630      	mov	r0, r6
 8006ee6:	4639      	mov	r1, r7
 8006ee8:	f7f9 f9d8 	bl	800029c <__adddf3>
 8006eec:	2c0f      	cmp	r4, #15
 8006eee:	4682      	mov	sl, r0
 8006ef0:	468b      	mov	fp, r1
 8006ef2:	ddd5      	ble.n	8006ea0 <_strtod_l+0x3a8>
 8006ef4:	9b06      	ldr	r3, [sp, #24]
 8006ef6:	eba4 0808 	sub.w	r8, r4, r8
 8006efa:	4498      	add	r8, r3
 8006efc:	f1b8 0f00 	cmp.w	r8, #0
 8006f00:	f340 8096 	ble.w	8007030 <_strtod_l+0x538>
 8006f04:	f018 030f 	ands.w	r3, r8, #15
 8006f08:	d00a      	beq.n	8006f20 <_strtod_l+0x428>
 8006f0a:	495f      	ldr	r1, [pc, #380]	; (8007088 <_strtod_l+0x590>)
 8006f0c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006f10:	4652      	mov	r2, sl
 8006f12:	465b      	mov	r3, fp
 8006f14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f18:	f7f9 fb76 	bl	8000608 <__aeabi_dmul>
 8006f1c:	4682      	mov	sl, r0
 8006f1e:	468b      	mov	fp, r1
 8006f20:	f038 080f 	bics.w	r8, r8, #15
 8006f24:	d073      	beq.n	800700e <_strtod_l+0x516>
 8006f26:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8006f2a:	dd47      	ble.n	8006fbc <_strtod_l+0x4c4>
 8006f2c:	2400      	movs	r4, #0
 8006f2e:	46a0      	mov	r8, r4
 8006f30:	9407      	str	r4, [sp, #28]
 8006f32:	9405      	str	r4, [sp, #20]
 8006f34:	2322      	movs	r3, #34	; 0x22
 8006f36:	f8df b158 	ldr.w	fp, [pc, #344]	; 8007090 <_strtod_l+0x598>
 8006f3a:	f8c9 3000 	str.w	r3, [r9]
 8006f3e:	f04f 0a00 	mov.w	sl, #0
 8006f42:	9b07      	ldr	r3, [sp, #28]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	f43f ae16 	beq.w	8006b76 <_strtod_l+0x7e>
 8006f4a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006f4c:	4648      	mov	r0, r9
 8006f4e:	f001 fe41 	bl	8008bd4 <_Bfree>
 8006f52:	9905      	ldr	r1, [sp, #20]
 8006f54:	4648      	mov	r0, r9
 8006f56:	f001 fe3d 	bl	8008bd4 <_Bfree>
 8006f5a:	4641      	mov	r1, r8
 8006f5c:	4648      	mov	r0, r9
 8006f5e:	f001 fe39 	bl	8008bd4 <_Bfree>
 8006f62:	9907      	ldr	r1, [sp, #28]
 8006f64:	4648      	mov	r0, r9
 8006f66:	f001 fe35 	bl	8008bd4 <_Bfree>
 8006f6a:	4621      	mov	r1, r4
 8006f6c:	4648      	mov	r0, r9
 8006f6e:	f001 fe31 	bl	8008bd4 <_Bfree>
 8006f72:	e600      	b.n	8006b76 <_strtod_l+0x7e>
 8006f74:	9a06      	ldr	r2, [sp, #24]
 8006f76:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	dbba      	blt.n	8006ef4 <_strtod_l+0x3fc>
 8006f7e:	4d42      	ldr	r5, [pc, #264]	; (8007088 <_strtod_l+0x590>)
 8006f80:	f1c4 040f 	rsb	r4, r4, #15
 8006f84:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8006f88:	4652      	mov	r2, sl
 8006f8a:	465b      	mov	r3, fp
 8006f8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f90:	f7f9 fb3a 	bl	8000608 <__aeabi_dmul>
 8006f94:	9b06      	ldr	r3, [sp, #24]
 8006f96:	1b1c      	subs	r4, r3, r4
 8006f98:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8006f9c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006fa0:	e78d      	b.n	8006ebe <_strtod_l+0x3c6>
 8006fa2:	f113 0f16 	cmn.w	r3, #22
 8006fa6:	dba5      	blt.n	8006ef4 <_strtod_l+0x3fc>
 8006fa8:	4a37      	ldr	r2, [pc, #220]	; (8007088 <_strtod_l+0x590>)
 8006faa:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8006fae:	e9d2 2300 	ldrd	r2, r3, [r2]
 8006fb2:	4650      	mov	r0, sl
 8006fb4:	4659      	mov	r1, fp
 8006fb6:	f7f9 fc51 	bl	800085c <__aeabi_ddiv>
 8006fba:	e782      	b.n	8006ec2 <_strtod_l+0x3ca>
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	4e33      	ldr	r6, [pc, #204]	; (800708c <_strtod_l+0x594>)
 8006fc0:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006fc4:	4650      	mov	r0, sl
 8006fc6:	4659      	mov	r1, fp
 8006fc8:	461d      	mov	r5, r3
 8006fca:	f1b8 0f01 	cmp.w	r8, #1
 8006fce:	dc21      	bgt.n	8007014 <_strtod_l+0x51c>
 8006fd0:	b10b      	cbz	r3, 8006fd6 <_strtod_l+0x4de>
 8006fd2:	4682      	mov	sl, r0
 8006fd4:	468b      	mov	fp, r1
 8006fd6:	4b2d      	ldr	r3, [pc, #180]	; (800708c <_strtod_l+0x594>)
 8006fd8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006fdc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8006fe0:	4652      	mov	r2, sl
 8006fe2:	465b      	mov	r3, fp
 8006fe4:	e9d5 0100 	ldrd	r0, r1, [r5]
 8006fe8:	f7f9 fb0e 	bl	8000608 <__aeabi_dmul>
 8006fec:	4b28      	ldr	r3, [pc, #160]	; (8007090 <_strtod_l+0x598>)
 8006fee:	460a      	mov	r2, r1
 8006ff0:	400b      	ands	r3, r1
 8006ff2:	4928      	ldr	r1, [pc, #160]	; (8007094 <_strtod_l+0x59c>)
 8006ff4:	428b      	cmp	r3, r1
 8006ff6:	4682      	mov	sl, r0
 8006ff8:	d898      	bhi.n	8006f2c <_strtod_l+0x434>
 8006ffa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006ffe:	428b      	cmp	r3, r1
 8007000:	bf86      	itte	hi
 8007002:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800709c <_strtod_l+0x5a4>
 8007006:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800700a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800700e:	2300      	movs	r3, #0
 8007010:	9304      	str	r3, [sp, #16]
 8007012:	e077      	b.n	8007104 <_strtod_l+0x60c>
 8007014:	f018 0f01 	tst.w	r8, #1
 8007018:	d006      	beq.n	8007028 <_strtod_l+0x530>
 800701a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800701e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007022:	f7f9 faf1 	bl	8000608 <__aeabi_dmul>
 8007026:	2301      	movs	r3, #1
 8007028:	3501      	adds	r5, #1
 800702a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800702e:	e7cc      	b.n	8006fca <_strtod_l+0x4d2>
 8007030:	d0ed      	beq.n	800700e <_strtod_l+0x516>
 8007032:	f1c8 0800 	rsb	r8, r8, #0
 8007036:	f018 020f 	ands.w	r2, r8, #15
 800703a:	d00a      	beq.n	8007052 <_strtod_l+0x55a>
 800703c:	4b12      	ldr	r3, [pc, #72]	; (8007088 <_strtod_l+0x590>)
 800703e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007042:	4650      	mov	r0, sl
 8007044:	4659      	mov	r1, fp
 8007046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800704a:	f7f9 fc07 	bl	800085c <__aeabi_ddiv>
 800704e:	4682      	mov	sl, r0
 8007050:	468b      	mov	fp, r1
 8007052:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007056:	d0da      	beq.n	800700e <_strtod_l+0x516>
 8007058:	f1b8 0f1f 	cmp.w	r8, #31
 800705c:	dd20      	ble.n	80070a0 <_strtod_l+0x5a8>
 800705e:	2400      	movs	r4, #0
 8007060:	46a0      	mov	r8, r4
 8007062:	9407      	str	r4, [sp, #28]
 8007064:	9405      	str	r4, [sp, #20]
 8007066:	2322      	movs	r3, #34	; 0x22
 8007068:	f04f 0a00 	mov.w	sl, #0
 800706c:	f04f 0b00 	mov.w	fp, #0
 8007070:	f8c9 3000 	str.w	r3, [r9]
 8007074:	e765      	b.n	8006f42 <_strtod_l+0x44a>
 8007076:	bf00      	nop
 8007078:	0800a661 	.word	0x0800a661
 800707c:	0800a6eb 	.word	0x0800a6eb
 8007080:	0800a669 	.word	0x0800a669
 8007084:	0800a6a8 	.word	0x0800a6a8
 8007088:	0800a728 	.word	0x0800a728
 800708c:	0800a700 	.word	0x0800a700
 8007090:	7ff00000 	.word	0x7ff00000
 8007094:	7ca00000 	.word	0x7ca00000
 8007098:	fff80000 	.word	0xfff80000
 800709c:	7fefffff 	.word	0x7fefffff
 80070a0:	f018 0310 	ands.w	r3, r8, #16
 80070a4:	bf18      	it	ne
 80070a6:	236a      	movne	r3, #106	; 0x6a
 80070a8:	4da0      	ldr	r5, [pc, #640]	; (800732c <_strtod_l+0x834>)
 80070aa:	9304      	str	r3, [sp, #16]
 80070ac:	4650      	mov	r0, sl
 80070ae:	4659      	mov	r1, fp
 80070b0:	2300      	movs	r3, #0
 80070b2:	f1b8 0f00 	cmp.w	r8, #0
 80070b6:	f300 810a 	bgt.w	80072ce <_strtod_l+0x7d6>
 80070ba:	b10b      	cbz	r3, 80070c0 <_strtod_l+0x5c8>
 80070bc:	4682      	mov	sl, r0
 80070be:	468b      	mov	fp, r1
 80070c0:	9b04      	ldr	r3, [sp, #16]
 80070c2:	b1bb      	cbz	r3, 80070f4 <_strtod_l+0x5fc>
 80070c4:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80070c8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	4659      	mov	r1, fp
 80070d0:	dd10      	ble.n	80070f4 <_strtod_l+0x5fc>
 80070d2:	2b1f      	cmp	r3, #31
 80070d4:	f340 8107 	ble.w	80072e6 <_strtod_l+0x7ee>
 80070d8:	2b34      	cmp	r3, #52	; 0x34
 80070da:	bfde      	ittt	le
 80070dc:	3b20      	suble	r3, #32
 80070de:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 80070e2:	fa02 f303 	lslle.w	r3, r2, r3
 80070e6:	f04f 0a00 	mov.w	sl, #0
 80070ea:	bfcc      	ite	gt
 80070ec:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80070f0:	ea03 0b01 	andle.w	fp, r3, r1
 80070f4:	2200      	movs	r2, #0
 80070f6:	2300      	movs	r3, #0
 80070f8:	4650      	mov	r0, sl
 80070fa:	4659      	mov	r1, fp
 80070fc:	f7f9 fcec 	bl	8000ad8 <__aeabi_dcmpeq>
 8007100:	2800      	cmp	r0, #0
 8007102:	d1ac      	bne.n	800705e <_strtod_l+0x566>
 8007104:	9b07      	ldr	r3, [sp, #28]
 8007106:	9300      	str	r3, [sp, #0]
 8007108:	9a05      	ldr	r2, [sp, #20]
 800710a:	9908      	ldr	r1, [sp, #32]
 800710c:	4623      	mov	r3, r4
 800710e:	4648      	mov	r0, r9
 8007110:	f001 fdb2 	bl	8008c78 <__s2b>
 8007114:	9007      	str	r0, [sp, #28]
 8007116:	2800      	cmp	r0, #0
 8007118:	f43f af08 	beq.w	8006f2c <_strtod_l+0x434>
 800711c:	9a06      	ldr	r2, [sp, #24]
 800711e:	9b06      	ldr	r3, [sp, #24]
 8007120:	2a00      	cmp	r2, #0
 8007122:	f1c3 0300 	rsb	r3, r3, #0
 8007126:	bfa8      	it	ge
 8007128:	2300      	movge	r3, #0
 800712a:	930e      	str	r3, [sp, #56]	; 0x38
 800712c:	2400      	movs	r4, #0
 800712e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007132:	9316      	str	r3, [sp, #88]	; 0x58
 8007134:	46a0      	mov	r8, r4
 8007136:	9b07      	ldr	r3, [sp, #28]
 8007138:	4648      	mov	r0, r9
 800713a:	6859      	ldr	r1, [r3, #4]
 800713c:	f001 fd16 	bl	8008b6c <_Balloc>
 8007140:	9005      	str	r0, [sp, #20]
 8007142:	2800      	cmp	r0, #0
 8007144:	f43f aef6 	beq.w	8006f34 <_strtod_l+0x43c>
 8007148:	9b07      	ldr	r3, [sp, #28]
 800714a:	691a      	ldr	r2, [r3, #16]
 800714c:	3202      	adds	r2, #2
 800714e:	f103 010c 	add.w	r1, r3, #12
 8007152:	0092      	lsls	r2, r2, #2
 8007154:	300c      	adds	r0, #12
 8007156:	f7fe fe0d 	bl	8005d74 <memcpy>
 800715a:	aa1e      	add	r2, sp, #120	; 0x78
 800715c:	a91d      	add	r1, sp, #116	; 0x74
 800715e:	ec4b ab10 	vmov	d0, sl, fp
 8007162:	4648      	mov	r0, r9
 8007164:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8007168:	f002 f842 	bl	80091f0 <__d2b>
 800716c:	901c      	str	r0, [sp, #112]	; 0x70
 800716e:	2800      	cmp	r0, #0
 8007170:	f43f aee0 	beq.w	8006f34 <_strtod_l+0x43c>
 8007174:	2101      	movs	r1, #1
 8007176:	4648      	mov	r0, r9
 8007178:	f001 fe0a 	bl	8008d90 <__i2b>
 800717c:	4680      	mov	r8, r0
 800717e:	2800      	cmp	r0, #0
 8007180:	f43f aed8 	beq.w	8006f34 <_strtod_l+0x43c>
 8007184:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8007186:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007188:	2e00      	cmp	r6, #0
 800718a:	bfab      	itete	ge
 800718c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800718e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8007190:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8007192:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8007194:	bfac      	ite	ge
 8007196:	18f7      	addge	r7, r6, r3
 8007198:	1b9d      	sublt	r5, r3, r6
 800719a:	9b04      	ldr	r3, [sp, #16]
 800719c:	1af6      	subs	r6, r6, r3
 800719e:	4416      	add	r6, r2
 80071a0:	4b63      	ldr	r3, [pc, #396]	; (8007330 <_strtod_l+0x838>)
 80071a2:	3e01      	subs	r6, #1
 80071a4:	429e      	cmp	r6, r3
 80071a6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80071aa:	f280 80af 	bge.w	800730c <_strtod_l+0x814>
 80071ae:	1b9b      	subs	r3, r3, r6
 80071b0:	2b1f      	cmp	r3, #31
 80071b2:	eba2 0203 	sub.w	r2, r2, r3
 80071b6:	f04f 0101 	mov.w	r1, #1
 80071ba:	f300 809b 	bgt.w	80072f4 <_strtod_l+0x7fc>
 80071be:	fa01 f303 	lsl.w	r3, r1, r3
 80071c2:	930f      	str	r3, [sp, #60]	; 0x3c
 80071c4:	2300      	movs	r3, #0
 80071c6:	930a      	str	r3, [sp, #40]	; 0x28
 80071c8:	18be      	adds	r6, r7, r2
 80071ca:	9b04      	ldr	r3, [sp, #16]
 80071cc:	42b7      	cmp	r7, r6
 80071ce:	4415      	add	r5, r2
 80071d0:	441d      	add	r5, r3
 80071d2:	463b      	mov	r3, r7
 80071d4:	bfa8      	it	ge
 80071d6:	4633      	movge	r3, r6
 80071d8:	42ab      	cmp	r3, r5
 80071da:	bfa8      	it	ge
 80071dc:	462b      	movge	r3, r5
 80071de:	2b00      	cmp	r3, #0
 80071e0:	bfc2      	ittt	gt
 80071e2:	1af6      	subgt	r6, r6, r3
 80071e4:	1aed      	subgt	r5, r5, r3
 80071e6:	1aff      	subgt	r7, r7, r3
 80071e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80071ea:	b1bb      	cbz	r3, 800721c <_strtod_l+0x724>
 80071ec:	4641      	mov	r1, r8
 80071ee:	461a      	mov	r2, r3
 80071f0:	4648      	mov	r0, r9
 80071f2:	f001 fe6d 	bl	8008ed0 <__pow5mult>
 80071f6:	4680      	mov	r8, r0
 80071f8:	2800      	cmp	r0, #0
 80071fa:	f43f ae9b 	beq.w	8006f34 <_strtod_l+0x43c>
 80071fe:	4601      	mov	r1, r0
 8007200:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007202:	4648      	mov	r0, r9
 8007204:	f001 fdcd 	bl	8008da2 <__multiply>
 8007208:	900c      	str	r0, [sp, #48]	; 0x30
 800720a:	2800      	cmp	r0, #0
 800720c:	f43f ae92 	beq.w	8006f34 <_strtod_l+0x43c>
 8007210:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007212:	4648      	mov	r0, r9
 8007214:	f001 fcde 	bl	8008bd4 <_Bfree>
 8007218:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800721a:	931c      	str	r3, [sp, #112]	; 0x70
 800721c:	2e00      	cmp	r6, #0
 800721e:	dc7a      	bgt.n	8007316 <_strtod_l+0x81e>
 8007220:	9b06      	ldr	r3, [sp, #24]
 8007222:	2b00      	cmp	r3, #0
 8007224:	dd08      	ble.n	8007238 <_strtod_l+0x740>
 8007226:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007228:	9905      	ldr	r1, [sp, #20]
 800722a:	4648      	mov	r0, r9
 800722c:	f001 fe50 	bl	8008ed0 <__pow5mult>
 8007230:	9005      	str	r0, [sp, #20]
 8007232:	2800      	cmp	r0, #0
 8007234:	f43f ae7e 	beq.w	8006f34 <_strtod_l+0x43c>
 8007238:	2d00      	cmp	r5, #0
 800723a:	dd08      	ble.n	800724e <_strtod_l+0x756>
 800723c:	462a      	mov	r2, r5
 800723e:	9905      	ldr	r1, [sp, #20]
 8007240:	4648      	mov	r0, r9
 8007242:	f001 fe93 	bl	8008f6c <__lshift>
 8007246:	9005      	str	r0, [sp, #20]
 8007248:	2800      	cmp	r0, #0
 800724a:	f43f ae73 	beq.w	8006f34 <_strtod_l+0x43c>
 800724e:	2f00      	cmp	r7, #0
 8007250:	dd08      	ble.n	8007264 <_strtod_l+0x76c>
 8007252:	4641      	mov	r1, r8
 8007254:	463a      	mov	r2, r7
 8007256:	4648      	mov	r0, r9
 8007258:	f001 fe88 	bl	8008f6c <__lshift>
 800725c:	4680      	mov	r8, r0
 800725e:	2800      	cmp	r0, #0
 8007260:	f43f ae68 	beq.w	8006f34 <_strtod_l+0x43c>
 8007264:	9a05      	ldr	r2, [sp, #20]
 8007266:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007268:	4648      	mov	r0, r9
 800726a:	f001 feed 	bl	8009048 <__mdiff>
 800726e:	4604      	mov	r4, r0
 8007270:	2800      	cmp	r0, #0
 8007272:	f43f ae5f 	beq.w	8006f34 <_strtod_l+0x43c>
 8007276:	68c3      	ldr	r3, [r0, #12]
 8007278:	930c      	str	r3, [sp, #48]	; 0x30
 800727a:	2300      	movs	r3, #0
 800727c:	60c3      	str	r3, [r0, #12]
 800727e:	4641      	mov	r1, r8
 8007280:	f001 fec8 	bl	8009014 <__mcmp>
 8007284:	2800      	cmp	r0, #0
 8007286:	da55      	bge.n	8007334 <_strtod_l+0x83c>
 8007288:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800728a:	b9e3      	cbnz	r3, 80072c6 <_strtod_l+0x7ce>
 800728c:	f1ba 0f00 	cmp.w	sl, #0
 8007290:	d119      	bne.n	80072c6 <_strtod_l+0x7ce>
 8007292:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007296:	b9b3      	cbnz	r3, 80072c6 <_strtod_l+0x7ce>
 8007298:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800729c:	0d1b      	lsrs	r3, r3, #20
 800729e:	051b      	lsls	r3, r3, #20
 80072a0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80072a4:	d90f      	bls.n	80072c6 <_strtod_l+0x7ce>
 80072a6:	6963      	ldr	r3, [r4, #20]
 80072a8:	b913      	cbnz	r3, 80072b0 <_strtod_l+0x7b8>
 80072aa:	6923      	ldr	r3, [r4, #16]
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	dd0a      	ble.n	80072c6 <_strtod_l+0x7ce>
 80072b0:	4621      	mov	r1, r4
 80072b2:	2201      	movs	r2, #1
 80072b4:	4648      	mov	r0, r9
 80072b6:	f001 fe59 	bl	8008f6c <__lshift>
 80072ba:	4641      	mov	r1, r8
 80072bc:	4604      	mov	r4, r0
 80072be:	f001 fea9 	bl	8009014 <__mcmp>
 80072c2:	2800      	cmp	r0, #0
 80072c4:	dc67      	bgt.n	8007396 <_strtod_l+0x89e>
 80072c6:	9b04      	ldr	r3, [sp, #16]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d171      	bne.n	80073b0 <_strtod_l+0x8b8>
 80072cc:	e63d      	b.n	8006f4a <_strtod_l+0x452>
 80072ce:	f018 0f01 	tst.w	r8, #1
 80072d2:	d004      	beq.n	80072de <_strtod_l+0x7e6>
 80072d4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80072d8:	f7f9 f996 	bl	8000608 <__aeabi_dmul>
 80072dc:	2301      	movs	r3, #1
 80072de:	ea4f 0868 	mov.w	r8, r8, asr #1
 80072e2:	3508      	adds	r5, #8
 80072e4:	e6e5      	b.n	80070b2 <_strtod_l+0x5ba>
 80072e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80072ea:	fa02 f303 	lsl.w	r3, r2, r3
 80072ee:	ea03 0a0a 	and.w	sl, r3, sl
 80072f2:	e6ff      	b.n	80070f4 <_strtod_l+0x5fc>
 80072f4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80072f8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80072fc:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8007300:	36e2      	adds	r6, #226	; 0xe2
 8007302:	fa01 f306 	lsl.w	r3, r1, r6
 8007306:	930a      	str	r3, [sp, #40]	; 0x28
 8007308:	910f      	str	r1, [sp, #60]	; 0x3c
 800730a:	e75d      	b.n	80071c8 <_strtod_l+0x6d0>
 800730c:	2300      	movs	r3, #0
 800730e:	930a      	str	r3, [sp, #40]	; 0x28
 8007310:	2301      	movs	r3, #1
 8007312:	930f      	str	r3, [sp, #60]	; 0x3c
 8007314:	e758      	b.n	80071c8 <_strtod_l+0x6d0>
 8007316:	4632      	mov	r2, r6
 8007318:	991c      	ldr	r1, [sp, #112]	; 0x70
 800731a:	4648      	mov	r0, r9
 800731c:	f001 fe26 	bl	8008f6c <__lshift>
 8007320:	901c      	str	r0, [sp, #112]	; 0x70
 8007322:	2800      	cmp	r0, #0
 8007324:	f47f af7c 	bne.w	8007220 <_strtod_l+0x728>
 8007328:	e604      	b.n	8006f34 <_strtod_l+0x43c>
 800732a:	bf00      	nop
 800732c:	0800a6c0 	.word	0x0800a6c0
 8007330:	fffffc02 	.word	0xfffffc02
 8007334:	465d      	mov	r5, fp
 8007336:	f040 8086 	bne.w	8007446 <_strtod_l+0x94e>
 800733a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800733c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007340:	b32a      	cbz	r2, 800738e <_strtod_l+0x896>
 8007342:	4aaf      	ldr	r2, [pc, #700]	; (8007600 <_strtod_l+0xb08>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d153      	bne.n	80073f0 <_strtod_l+0x8f8>
 8007348:	9b04      	ldr	r3, [sp, #16]
 800734a:	4650      	mov	r0, sl
 800734c:	b1d3      	cbz	r3, 8007384 <_strtod_l+0x88c>
 800734e:	4aad      	ldr	r2, [pc, #692]	; (8007604 <_strtod_l+0xb0c>)
 8007350:	402a      	ands	r2, r5
 8007352:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8007356:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800735a:	d816      	bhi.n	800738a <_strtod_l+0x892>
 800735c:	0d12      	lsrs	r2, r2, #20
 800735e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007362:	fa01 f303 	lsl.w	r3, r1, r3
 8007366:	4298      	cmp	r0, r3
 8007368:	d142      	bne.n	80073f0 <_strtod_l+0x8f8>
 800736a:	4ba7      	ldr	r3, [pc, #668]	; (8007608 <_strtod_l+0xb10>)
 800736c:	429d      	cmp	r5, r3
 800736e:	d102      	bne.n	8007376 <_strtod_l+0x87e>
 8007370:	3001      	adds	r0, #1
 8007372:	f43f addf 	beq.w	8006f34 <_strtod_l+0x43c>
 8007376:	4ba3      	ldr	r3, [pc, #652]	; (8007604 <_strtod_l+0xb0c>)
 8007378:	402b      	ands	r3, r5
 800737a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800737e:	f04f 0a00 	mov.w	sl, #0
 8007382:	e7a0      	b.n	80072c6 <_strtod_l+0x7ce>
 8007384:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007388:	e7ed      	b.n	8007366 <_strtod_l+0x86e>
 800738a:	460b      	mov	r3, r1
 800738c:	e7eb      	b.n	8007366 <_strtod_l+0x86e>
 800738e:	bb7b      	cbnz	r3, 80073f0 <_strtod_l+0x8f8>
 8007390:	f1ba 0f00 	cmp.w	sl, #0
 8007394:	d12c      	bne.n	80073f0 <_strtod_l+0x8f8>
 8007396:	9904      	ldr	r1, [sp, #16]
 8007398:	4a9a      	ldr	r2, [pc, #616]	; (8007604 <_strtod_l+0xb0c>)
 800739a:	465b      	mov	r3, fp
 800739c:	b1f1      	cbz	r1, 80073dc <_strtod_l+0x8e4>
 800739e:	ea02 010b 	and.w	r1, r2, fp
 80073a2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80073a6:	dc19      	bgt.n	80073dc <_strtod_l+0x8e4>
 80073a8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80073ac:	f77f ae5b 	ble.w	8007066 <_strtod_l+0x56e>
 80073b0:	4a96      	ldr	r2, [pc, #600]	; (800760c <_strtod_l+0xb14>)
 80073b2:	2300      	movs	r3, #0
 80073b4:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80073b8:	4650      	mov	r0, sl
 80073ba:	4659      	mov	r1, fp
 80073bc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80073c0:	f7f9 f922 	bl	8000608 <__aeabi_dmul>
 80073c4:	4682      	mov	sl, r0
 80073c6:	468b      	mov	fp, r1
 80073c8:	2900      	cmp	r1, #0
 80073ca:	f47f adbe 	bne.w	8006f4a <_strtod_l+0x452>
 80073ce:	2800      	cmp	r0, #0
 80073d0:	f47f adbb 	bne.w	8006f4a <_strtod_l+0x452>
 80073d4:	2322      	movs	r3, #34	; 0x22
 80073d6:	f8c9 3000 	str.w	r3, [r9]
 80073da:	e5b6      	b.n	8006f4a <_strtod_l+0x452>
 80073dc:	4013      	ands	r3, r2
 80073de:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80073e2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80073e6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80073ea:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80073ee:	e76a      	b.n	80072c6 <_strtod_l+0x7ce>
 80073f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073f2:	b193      	cbz	r3, 800741a <_strtod_l+0x922>
 80073f4:	422b      	tst	r3, r5
 80073f6:	f43f af66 	beq.w	80072c6 <_strtod_l+0x7ce>
 80073fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80073fc:	9a04      	ldr	r2, [sp, #16]
 80073fe:	4650      	mov	r0, sl
 8007400:	4659      	mov	r1, fp
 8007402:	b173      	cbz	r3, 8007422 <_strtod_l+0x92a>
 8007404:	f7ff fb5a 	bl	8006abc <sulp>
 8007408:	4602      	mov	r2, r0
 800740a:	460b      	mov	r3, r1
 800740c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007410:	f7f8 ff44 	bl	800029c <__adddf3>
 8007414:	4682      	mov	sl, r0
 8007416:	468b      	mov	fp, r1
 8007418:	e755      	b.n	80072c6 <_strtod_l+0x7ce>
 800741a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800741c:	ea13 0f0a 	tst.w	r3, sl
 8007420:	e7e9      	b.n	80073f6 <_strtod_l+0x8fe>
 8007422:	f7ff fb4b 	bl	8006abc <sulp>
 8007426:	4602      	mov	r2, r0
 8007428:	460b      	mov	r3, r1
 800742a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800742e:	f7f8 ff33 	bl	8000298 <__aeabi_dsub>
 8007432:	2200      	movs	r2, #0
 8007434:	2300      	movs	r3, #0
 8007436:	4682      	mov	sl, r0
 8007438:	468b      	mov	fp, r1
 800743a:	f7f9 fb4d 	bl	8000ad8 <__aeabi_dcmpeq>
 800743e:	2800      	cmp	r0, #0
 8007440:	f47f ae11 	bne.w	8007066 <_strtod_l+0x56e>
 8007444:	e73f      	b.n	80072c6 <_strtod_l+0x7ce>
 8007446:	4641      	mov	r1, r8
 8007448:	4620      	mov	r0, r4
 800744a:	f001 ff20 	bl	800928e <__ratio>
 800744e:	ec57 6b10 	vmov	r6, r7, d0
 8007452:	2200      	movs	r2, #0
 8007454:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007458:	ee10 0a10 	vmov	r0, s0
 800745c:	4639      	mov	r1, r7
 800745e:	f7f9 fb4f 	bl	8000b00 <__aeabi_dcmple>
 8007462:	2800      	cmp	r0, #0
 8007464:	d077      	beq.n	8007556 <_strtod_l+0xa5e>
 8007466:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007468:	2b00      	cmp	r3, #0
 800746a:	d04a      	beq.n	8007502 <_strtod_l+0xa0a>
 800746c:	4b68      	ldr	r3, [pc, #416]	; (8007610 <_strtod_l+0xb18>)
 800746e:	2200      	movs	r2, #0
 8007470:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007474:	4f66      	ldr	r7, [pc, #408]	; (8007610 <_strtod_l+0xb18>)
 8007476:	2600      	movs	r6, #0
 8007478:	4b62      	ldr	r3, [pc, #392]	; (8007604 <_strtod_l+0xb0c>)
 800747a:	402b      	ands	r3, r5
 800747c:	930f      	str	r3, [sp, #60]	; 0x3c
 800747e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007480:	4b64      	ldr	r3, [pc, #400]	; (8007614 <_strtod_l+0xb1c>)
 8007482:	429a      	cmp	r2, r3
 8007484:	f040 80ce 	bne.w	8007624 <_strtod_l+0xb2c>
 8007488:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800748c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007490:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8007494:	ec4b ab10 	vmov	d0, sl, fp
 8007498:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800749c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80074a0:	f001 fe30 	bl	8009104 <__ulp>
 80074a4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80074a8:	ec53 2b10 	vmov	r2, r3, d0
 80074ac:	f7f9 f8ac 	bl	8000608 <__aeabi_dmul>
 80074b0:	4652      	mov	r2, sl
 80074b2:	465b      	mov	r3, fp
 80074b4:	f7f8 fef2 	bl	800029c <__adddf3>
 80074b8:	460b      	mov	r3, r1
 80074ba:	4952      	ldr	r1, [pc, #328]	; (8007604 <_strtod_l+0xb0c>)
 80074bc:	4a56      	ldr	r2, [pc, #344]	; (8007618 <_strtod_l+0xb20>)
 80074be:	4019      	ands	r1, r3
 80074c0:	4291      	cmp	r1, r2
 80074c2:	4682      	mov	sl, r0
 80074c4:	d95b      	bls.n	800757e <_strtod_l+0xa86>
 80074c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074c8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d103      	bne.n	80074d8 <_strtod_l+0x9e0>
 80074d0:	9b08      	ldr	r3, [sp, #32]
 80074d2:	3301      	adds	r3, #1
 80074d4:	f43f ad2e 	beq.w	8006f34 <_strtod_l+0x43c>
 80074d8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8007608 <_strtod_l+0xb10>
 80074dc:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80074e0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80074e2:	4648      	mov	r0, r9
 80074e4:	f001 fb76 	bl	8008bd4 <_Bfree>
 80074e8:	9905      	ldr	r1, [sp, #20]
 80074ea:	4648      	mov	r0, r9
 80074ec:	f001 fb72 	bl	8008bd4 <_Bfree>
 80074f0:	4641      	mov	r1, r8
 80074f2:	4648      	mov	r0, r9
 80074f4:	f001 fb6e 	bl	8008bd4 <_Bfree>
 80074f8:	4621      	mov	r1, r4
 80074fa:	4648      	mov	r0, r9
 80074fc:	f001 fb6a 	bl	8008bd4 <_Bfree>
 8007500:	e619      	b.n	8007136 <_strtod_l+0x63e>
 8007502:	f1ba 0f00 	cmp.w	sl, #0
 8007506:	d11a      	bne.n	800753e <_strtod_l+0xa46>
 8007508:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800750c:	b9eb      	cbnz	r3, 800754a <_strtod_l+0xa52>
 800750e:	2200      	movs	r2, #0
 8007510:	4b3f      	ldr	r3, [pc, #252]	; (8007610 <_strtod_l+0xb18>)
 8007512:	4630      	mov	r0, r6
 8007514:	4639      	mov	r1, r7
 8007516:	f7f9 fae9 	bl	8000aec <__aeabi_dcmplt>
 800751a:	b9c8      	cbnz	r0, 8007550 <_strtod_l+0xa58>
 800751c:	4630      	mov	r0, r6
 800751e:	4639      	mov	r1, r7
 8007520:	2200      	movs	r2, #0
 8007522:	4b3e      	ldr	r3, [pc, #248]	; (800761c <_strtod_l+0xb24>)
 8007524:	f7f9 f870 	bl	8000608 <__aeabi_dmul>
 8007528:	4606      	mov	r6, r0
 800752a:	460f      	mov	r7, r1
 800752c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007530:	9618      	str	r6, [sp, #96]	; 0x60
 8007532:	9319      	str	r3, [sp, #100]	; 0x64
 8007534:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8007538:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800753c:	e79c      	b.n	8007478 <_strtod_l+0x980>
 800753e:	f1ba 0f01 	cmp.w	sl, #1
 8007542:	d102      	bne.n	800754a <_strtod_l+0xa52>
 8007544:	2d00      	cmp	r5, #0
 8007546:	f43f ad8e 	beq.w	8007066 <_strtod_l+0x56e>
 800754a:	2200      	movs	r2, #0
 800754c:	4b34      	ldr	r3, [pc, #208]	; (8007620 <_strtod_l+0xb28>)
 800754e:	e78f      	b.n	8007470 <_strtod_l+0x978>
 8007550:	2600      	movs	r6, #0
 8007552:	4f32      	ldr	r7, [pc, #200]	; (800761c <_strtod_l+0xb24>)
 8007554:	e7ea      	b.n	800752c <_strtod_l+0xa34>
 8007556:	4b31      	ldr	r3, [pc, #196]	; (800761c <_strtod_l+0xb24>)
 8007558:	4630      	mov	r0, r6
 800755a:	4639      	mov	r1, r7
 800755c:	2200      	movs	r2, #0
 800755e:	f7f9 f853 	bl	8000608 <__aeabi_dmul>
 8007562:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007564:	4606      	mov	r6, r0
 8007566:	460f      	mov	r7, r1
 8007568:	b933      	cbnz	r3, 8007578 <_strtod_l+0xa80>
 800756a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800756e:	9010      	str	r0, [sp, #64]	; 0x40
 8007570:	9311      	str	r3, [sp, #68]	; 0x44
 8007572:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007576:	e7df      	b.n	8007538 <_strtod_l+0xa40>
 8007578:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800757c:	e7f9      	b.n	8007572 <_strtod_l+0xa7a>
 800757e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007582:	9b04      	ldr	r3, [sp, #16]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d1ab      	bne.n	80074e0 <_strtod_l+0x9e8>
 8007588:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800758c:	0d1b      	lsrs	r3, r3, #20
 800758e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007590:	051b      	lsls	r3, r3, #20
 8007592:	429a      	cmp	r2, r3
 8007594:	465d      	mov	r5, fp
 8007596:	d1a3      	bne.n	80074e0 <_strtod_l+0x9e8>
 8007598:	4639      	mov	r1, r7
 800759a:	4630      	mov	r0, r6
 800759c:	f7f9 fae4 	bl	8000b68 <__aeabi_d2iz>
 80075a0:	f7f8 ffc8 	bl	8000534 <__aeabi_i2d>
 80075a4:	460b      	mov	r3, r1
 80075a6:	4602      	mov	r2, r0
 80075a8:	4639      	mov	r1, r7
 80075aa:	4630      	mov	r0, r6
 80075ac:	f7f8 fe74 	bl	8000298 <__aeabi_dsub>
 80075b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80075b2:	4606      	mov	r6, r0
 80075b4:	460f      	mov	r7, r1
 80075b6:	b933      	cbnz	r3, 80075c6 <_strtod_l+0xace>
 80075b8:	f1ba 0f00 	cmp.w	sl, #0
 80075bc:	d103      	bne.n	80075c6 <_strtod_l+0xace>
 80075be:	f3cb 0513 	ubfx	r5, fp, #0, #20
 80075c2:	2d00      	cmp	r5, #0
 80075c4:	d06d      	beq.n	80076a2 <_strtod_l+0xbaa>
 80075c6:	a30a      	add	r3, pc, #40	; (adr r3, 80075f0 <_strtod_l+0xaf8>)
 80075c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075cc:	4630      	mov	r0, r6
 80075ce:	4639      	mov	r1, r7
 80075d0:	f7f9 fa8c 	bl	8000aec <__aeabi_dcmplt>
 80075d4:	2800      	cmp	r0, #0
 80075d6:	f47f acb8 	bne.w	8006f4a <_strtod_l+0x452>
 80075da:	a307      	add	r3, pc, #28	; (adr r3, 80075f8 <_strtod_l+0xb00>)
 80075dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e0:	4630      	mov	r0, r6
 80075e2:	4639      	mov	r1, r7
 80075e4:	f7f9 faa0 	bl	8000b28 <__aeabi_dcmpgt>
 80075e8:	2800      	cmp	r0, #0
 80075ea:	f43f af79 	beq.w	80074e0 <_strtod_l+0x9e8>
 80075ee:	e4ac      	b.n	8006f4a <_strtod_l+0x452>
 80075f0:	94a03595 	.word	0x94a03595
 80075f4:	3fdfffff 	.word	0x3fdfffff
 80075f8:	35afe535 	.word	0x35afe535
 80075fc:	3fe00000 	.word	0x3fe00000
 8007600:	000fffff 	.word	0x000fffff
 8007604:	7ff00000 	.word	0x7ff00000
 8007608:	7fefffff 	.word	0x7fefffff
 800760c:	39500000 	.word	0x39500000
 8007610:	3ff00000 	.word	0x3ff00000
 8007614:	7fe00000 	.word	0x7fe00000
 8007618:	7c9fffff 	.word	0x7c9fffff
 800761c:	3fe00000 	.word	0x3fe00000
 8007620:	bff00000 	.word	0xbff00000
 8007624:	9b04      	ldr	r3, [sp, #16]
 8007626:	b333      	cbz	r3, 8007676 <_strtod_l+0xb7e>
 8007628:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800762a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800762e:	d822      	bhi.n	8007676 <_strtod_l+0xb7e>
 8007630:	a327      	add	r3, pc, #156	; (adr r3, 80076d0 <_strtod_l+0xbd8>)
 8007632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007636:	4630      	mov	r0, r6
 8007638:	4639      	mov	r1, r7
 800763a:	f7f9 fa61 	bl	8000b00 <__aeabi_dcmple>
 800763e:	b1a0      	cbz	r0, 800766a <_strtod_l+0xb72>
 8007640:	4639      	mov	r1, r7
 8007642:	4630      	mov	r0, r6
 8007644:	f7f9 fab8 	bl	8000bb8 <__aeabi_d2uiz>
 8007648:	2800      	cmp	r0, #0
 800764a:	bf08      	it	eq
 800764c:	2001      	moveq	r0, #1
 800764e:	f7f8 ff61 	bl	8000514 <__aeabi_ui2d>
 8007652:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007654:	4606      	mov	r6, r0
 8007656:	460f      	mov	r7, r1
 8007658:	bb03      	cbnz	r3, 800769c <_strtod_l+0xba4>
 800765a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800765e:	9012      	str	r0, [sp, #72]	; 0x48
 8007660:	9313      	str	r3, [sp, #76]	; 0x4c
 8007662:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8007666:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800766a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800766c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800766e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007672:	1a9b      	subs	r3, r3, r2
 8007674:	930b      	str	r3, [sp, #44]	; 0x2c
 8007676:	ed9d 0b08 	vldr	d0, [sp, #32]
 800767a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800767e:	f001 fd41 	bl	8009104 <__ulp>
 8007682:	4650      	mov	r0, sl
 8007684:	ec53 2b10 	vmov	r2, r3, d0
 8007688:	4659      	mov	r1, fp
 800768a:	f7f8 ffbd 	bl	8000608 <__aeabi_dmul>
 800768e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007692:	f7f8 fe03 	bl	800029c <__adddf3>
 8007696:	4682      	mov	sl, r0
 8007698:	468b      	mov	fp, r1
 800769a:	e772      	b.n	8007582 <_strtod_l+0xa8a>
 800769c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80076a0:	e7df      	b.n	8007662 <_strtod_l+0xb6a>
 80076a2:	a30d      	add	r3, pc, #52	; (adr r3, 80076d8 <_strtod_l+0xbe0>)
 80076a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076a8:	f7f9 fa20 	bl	8000aec <__aeabi_dcmplt>
 80076ac:	e79c      	b.n	80075e8 <_strtod_l+0xaf0>
 80076ae:	2300      	movs	r3, #0
 80076b0:	930d      	str	r3, [sp, #52]	; 0x34
 80076b2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80076b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80076b6:	6013      	str	r3, [r2, #0]
 80076b8:	f7ff ba61 	b.w	8006b7e <_strtod_l+0x86>
 80076bc:	2b65      	cmp	r3, #101	; 0x65
 80076be:	f04f 0200 	mov.w	r2, #0
 80076c2:	f43f ab4e 	beq.w	8006d62 <_strtod_l+0x26a>
 80076c6:	2101      	movs	r1, #1
 80076c8:	4614      	mov	r4, r2
 80076ca:	9104      	str	r1, [sp, #16]
 80076cc:	f7ff bacb 	b.w	8006c66 <_strtod_l+0x16e>
 80076d0:	ffc00000 	.word	0xffc00000
 80076d4:	41dfffff 	.word	0x41dfffff
 80076d8:	94a03595 	.word	0x94a03595
 80076dc:	3fcfffff 	.word	0x3fcfffff

080076e0 <_strtod_r>:
 80076e0:	4b05      	ldr	r3, [pc, #20]	; (80076f8 <_strtod_r+0x18>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	b410      	push	{r4}
 80076e6:	6a1b      	ldr	r3, [r3, #32]
 80076e8:	4c04      	ldr	r4, [pc, #16]	; (80076fc <_strtod_r+0x1c>)
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	bf08      	it	eq
 80076ee:	4623      	moveq	r3, r4
 80076f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076f4:	f7ff ba00 	b.w	8006af8 <_strtod_l>
 80076f8:	20000014 	.word	0x20000014
 80076fc:	20000078 	.word	0x20000078

08007700 <_strtol_l.isra.0>:
 8007700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007704:	4680      	mov	r8, r0
 8007706:	4689      	mov	r9, r1
 8007708:	4692      	mov	sl, r2
 800770a:	461e      	mov	r6, r3
 800770c:	460f      	mov	r7, r1
 800770e:	463d      	mov	r5, r7
 8007710:	9808      	ldr	r0, [sp, #32]
 8007712:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007716:	f001 f9ed 	bl	8008af4 <__locale_ctype_ptr_l>
 800771a:	4420      	add	r0, r4
 800771c:	7843      	ldrb	r3, [r0, #1]
 800771e:	f013 0308 	ands.w	r3, r3, #8
 8007722:	d132      	bne.n	800778a <_strtol_l.isra.0+0x8a>
 8007724:	2c2d      	cmp	r4, #45	; 0x2d
 8007726:	d132      	bne.n	800778e <_strtol_l.isra.0+0x8e>
 8007728:	787c      	ldrb	r4, [r7, #1]
 800772a:	1cbd      	adds	r5, r7, #2
 800772c:	2201      	movs	r2, #1
 800772e:	2e00      	cmp	r6, #0
 8007730:	d05d      	beq.n	80077ee <_strtol_l.isra.0+0xee>
 8007732:	2e10      	cmp	r6, #16
 8007734:	d109      	bne.n	800774a <_strtol_l.isra.0+0x4a>
 8007736:	2c30      	cmp	r4, #48	; 0x30
 8007738:	d107      	bne.n	800774a <_strtol_l.isra.0+0x4a>
 800773a:	782b      	ldrb	r3, [r5, #0]
 800773c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007740:	2b58      	cmp	r3, #88	; 0x58
 8007742:	d14f      	bne.n	80077e4 <_strtol_l.isra.0+0xe4>
 8007744:	786c      	ldrb	r4, [r5, #1]
 8007746:	2610      	movs	r6, #16
 8007748:	3502      	adds	r5, #2
 800774a:	2a00      	cmp	r2, #0
 800774c:	bf14      	ite	ne
 800774e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8007752:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8007756:	2700      	movs	r7, #0
 8007758:	fbb1 fcf6 	udiv	ip, r1, r6
 800775c:	4638      	mov	r0, r7
 800775e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8007762:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8007766:	2b09      	cmp	r3, #9
 8007768:	d817      	bhi.n	800779a <_strtol_l.isra.0+0x9a>
 800776a:	461c      	mov	r4, r3
 800776c:	42a6      	cmp	r6, r4
 800776e:	dd23      	ble.n	80077b8 <_strtol_l.isra.0+0xb8>
 8007770:	1c7b      	adds	r3, r7, #1
 8007772:	d007      	beq.n	8007784 <_strtol_l.isra.0+0x84>
 8007774:	4584      	cmp	ip, r0
 8007776:	d31c      	bcc.n	80077b2 <_strtol_l.isra.0+0xb2>
 8007778:	d101      	bne.n	800777e <_strtol_l.isra.0+0x7e>
 800777a:	45a6      	cmp	lr, r4
 800777c:	db19      	blt.n	80077b2 <_strtol_l.isra.0+0xb2>
 800777e:	fb00 4006 	mla	r0, r0, r6, r4
 8007782:	2701      	movs	r7, #1
 8007784:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007788:	e7eb      	b.n	8007762 <_strtol_l.isra.0+0x62>
 800778a:	462f      	mov	r7, r5
 800778c:	e7bf      	b.n	800770e <_strtol_l.isra.0+0xe>
 800778e:	2c2b      	cmp	r4, #43	; 0x2b
 8007790:	bf04      	itt	eq
 8007792:	1cbd      	addeq	r5, r7, #2
 8007794:	787c      	ldrbeq	r4, [r7, #1]
 8007796:	461a      	mov	r2, r3
 8007798:	e7c9      	b.n	800772e <_strtol_l.isra.0+0x2e>
 800779a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800779e:	2b19      	cmp	r3, #25
 80077a0:	d801      	bhi.n	80077a6 <_strtol_l.isra.0+0xa6>
 80077a2:	3c37      	subs	r4, #55	; 0x37
 80077a4:	e7e2      	b.n	800776c <_strtol_l.isra.0+0x6c>
 80077a6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80077aa:	2b19      	cmp	r3, #25
 80077ac:	d804      	bhi.n	80077b8 <_strtol_l.isra.0+0xb8>
 80077ae:	3c57      	subs	r4, #87	; 0x57
 80077b0:	e7dc      	b.n	800776c <_strtol_l.isra.0+0x6c>
 80077b2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80077b6:	e7e5      	b.n	8007784 <_strtol_l.isra.0+0x84>
 80077b8:	1c7b      	adds	r3, r7, #1
 80077ba:	d108      	bne.n	80077ce <_strtol_l.isra.0+0xce>
 80077bc:	2322      	movs	r3, #34	; 0x22
 80077be:	f8c8 3000 	str.w	r3, [r8]
 80077c2:	4608      	mov	r0, r1
 80077c4:	f1ba 0f00 	cmp.w	sl, #0
 80077c8:	d107      	bne.n	80077da <_strtol_l.isra.0+0xda>
 80077ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077ce:	b102      	cbz	r2, 80077d2 <_strtol_l.isra.0+0xd2>
 80077d0:	4240      	negs	r0, r0
 80077d2:	f1ba 0f00 	cmp.w	sl, #0
 80077d6:	d0f8      	beq.n	80077ca <_strtol_l.isra.0+0xca>
 80077d8:	b10f      	cbz	r7, 80077de <_strtol_l.isra.0+0xde>
 80077da:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 80077de:	f8ca 9000 	str.w	r9, [sl]
 80077e2:	e7f2      	b.n	80077ca <_strtol_l.isra.0+0xca>
 80077e4:	2430      	movs	r4, #48	; 0x30
 80077e6:	2e00      	cmp	r6, #0
 80077e8:	d1af      	bne.n	800774a <_strtol_l.isra.0+0x4a>
 80077ea:	2608      	movs	r6, #8
 80077ec:	e7ad      	b.n	800774a <_strtol_l.isra.0+0x4a>
 80077ee:	2c30      	cmp	r4, #48	; 0x30
 80077f0:	d0a3      	beq.n	800773a <_strtol_l.isra.0+0x3a>
 80077f2:	260a      	movs	r6, #10
 80077f4:	e7a9      	b.n	800774a <_strtol_l.isra.0+0x4a>
	...

080077f8 <_strtol_r>:
 80077f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80077fa:	4c06      	ldr	r4, [pc, #24]	; (8007814 <_strtol_r+0x1c>)
 80077fc:	4d06      	ldr	r5, [pc, #24]	; (8007818 <_strtol_r+0x20>)
 80077fe:	6824      	ldr	r4, [r4, #0]
 8007800:	6a24      	ldr	r4, [r4, #32]
 8007802:	2c00      	cmp	r4, #0
 8007804:	bf08      	it	eq
 8007806:	462c      	moveq	r4, r5
 8007808:	9400      	str	r4, [sp, #0]
 800780a:	f7ff ff79 	bl	8007700 <_strtol_l.isra.0>
 800780e:	b003      	add	sp, #12
 8007810:	bd30      	pop	{r4, r5, pc}
 8007812:	bf00      	nop
 8007814:	20000014 	.word	0x20000014
 8007818:	20000078 	.word	0x20000078

0800781c <quorem>:
 800781c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007820:	6903      	ldr	r3, [r0, #16]
 8007822:	690c      	ldr	r4, [r1, #16]
 8007824:	42a3      	cmp	r3, r4
 8007826:	4680      	mov	r8, r0
 8007828:	f2c0 8082 	blt.w	8007930 <quorem+0x114>
 800782c:	3c01      	subs	r4, #1
 800782e:	f101 0714 	add.w	r7, r1, #20
 8007832:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8007836:	f100 0614 	add.w	r6, r0, #20
 800783a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800783e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8007842:	eb06 030c 	add.w	r3, r6, ip
 8007846:	3501      	adds	r5, #1
 8007848:	eb07 090c 	add.w	r9, r7, ip
 800784c:	9301      	str	r3, [sp, #4]
 800784e:	fbb0 f5f5 	udiv	r5, r0, r5
 8007852:	b395      	cbz	r5, 80078ba <quorem+0x9e>
 8007854:	f04f 0a00 	mov.w	sl, #0
 8007858:	4638      	mov	r0, r7
 800785a:	46b6      	mov	lr, r6
 800785c:	46d3      	mov	fp, sl
 800785e:	f850 2b04 	ldr.w	r2, [r0], #4
 8007862:	b293      	uxth	r3, r2
 8007864:	fb05 a303 	mla	r3, r5, r3, sl
 8007868:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800786c:	b29b      	uxth	r3, r3
 800786e:	ebab 0303 	sub.w	r3, fp, r3
 8007872:	0c12      	lsrs	r2, r2, #16
 8007874:	f8de b000 	ldr.w	fp, [lr]
 8007878:	fb05 a202 	mla	r2, r5, r2, sl
 800787c:	fa13 f38b 	uxtah	r3, r3, fp
 8007880:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007884:	fa1f fb82 	uxth.w	fp, r2
 8007888:	f8de 2000 	ldr.w	r2, [lr]
 800788c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007890:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007894:	b29b      	uxth	r3, r3
 8007896:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800789a:	4581      	cmp	r9, r0
 800789c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80078a0:	f84e 3b04 	str.w	r3, [lr], #4
 80078a4:	d2db      	bcs.n	800785e <quorem+0x42>
 80078a6:	f856 300c 	ldr.w	r3, [r6, ip]
 80078aa:	b933      	cbnz	r3, 80078ba <quorem+0x9e>
 80078ac:	9b01      	ldr	r3, [sp, #4]
 80078ae:	3b04      	subs	r3, #4
 80078b0:	429e      	cmp	r6, r3
 80078b2:	461a      	mov	r2, r3
 80078b4:	d330      	bcc.n	8007918 <quorem+0xfc>
 80078b6:	f8c8 4010 	str.w	r4, [r8, #16]
 80078ba:	4640      	mov	r0, r8
 80078bc:	f001 fbaa 	bl	8009014 <__mcmp>
 80078c0:	2800      	cmp	r0, #0
 80078c2:	db25      	blt.n	8007910 <quorem+0xf4>
 80078c4:	3501      	adds	r5, #1
 80078c6:	4630      	mov	r0, r6
 80078c8:	f04f 0c00 	mov.w	ip, #0
 80078cc:	f857 2b04 	ldr.w	r2, [r7], #4
 80078d0:	f8d0 e000 	ldr.w	lr, [r0]
 80078d4:	b293      	uxth	r3, r2
 80078d6:	ebac 0303 	sub.w	r3, ip, r3
 80078da:	0c12      	lsrs	r2, r2, #16
 80078dc:	fa13 f38e 	uxtah	r3, r3, lr
 80078e0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80078e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80078e8:	b29b      	uxth	r3, r3
 80078ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80078ee:	45b9      	cmp	r9, r7
 80078f0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80078f4:	f840 3b04 	str.w	r3, [r0], #4
 80078f8:	d2e8      	bcs.n	80078cc <quorem+0xb0>
 80078fa:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80078fe:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8007902:	b92a      	cbnz	r2, 8007910 <quorem+0xf4>
 8007904:	3b04      	subs	r3, #4
 8007906:	429e      	cmp	r6, r3
 8007908:	461a      	mov	r2, r3
 800790a:	d30b      	bcc.n	8007924 <quorem+0x108>
 800790c:	f8c8 4010 	str.w	r4, [r8, #16]
 8007910:	4628      	mov	r0, r5
 8007912:	b003      	add	sp, #12
 8007914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007918:	6812      	ldr	r2, [r2, #0]
 800791a:	3b04      	subs	r3, #4
 800791c:	2a00      	cmp	r2, #0
 800791e:	d1ca      	bne.n	80078b6 <quorem+0x9a>
 8007920:	3c01      	subs	r4, #1
 8007922:	e7c5      	b.n	80078b0 <quorem+0x94>
 8007924:	6812      	ldr	r2, [r2, #0]
 8007926:	3b04      	subs	r3, #4
 8007928:	2a00      	cmp	r2, #0
 800792a:	d1ef      	bne.n	800790c <quorem+0xf0>
 800792c:	3c01      	subs	r4, #1
 800792e:	e7ea      	b.n	8007906 <quorem+0xea>
 8007930:	2000      	movs	r0, #0
 8007932:	e7ee      	b.n	8007912 <quorem+0xf6>
 8007934:	0000      	movs	r0, r0
	...

08007938 <_dtoa_r>:
 8007938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800793c:	ec57 6b10 	vmov	r6, r7, d0
 8007940:	b097      	sub	sp, #92	; 0x5c
 8007942:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007944:	9106      	str	r1, [sp, #24]
 8007946:	4604      	mov	r4, r0
 8007948:	920b      	str	r2, [sp, #44]	; 0x2c
 800794a:	9312      	str	r3, [sp, #72]	; 0x48
 800794c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007950:	e9cd 6700 	strd	r6, r7, [sp]
 8007954:	b93d      	cbnz	r5, 8007966 <_dtoa_r+0x2e>
 8007956:	2010      	movs	r0, #16
 8007958:	f001 f8ee 	bl	8008b38 <malloc>
 800795c:	6260      	str	r0, [r4, #36]	; 0x24
 800795e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007962:	6005      	str	r5, [r0, #0]
 8007964:	60c5      	str	r5, [r0, #12]
 8007966:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007968:	6819      	ldr	r1, [r3, #0]
 800796a:	b151      	cbz	r1, 8007982 <_dtoa_r+0x4a>
 800796c:	685a      	ldr	r2, [r3, #4]
 800796e:	604a      	str	r2, [r1, #4]
 8007970:	2301      	movs	r3, #1
 8007972:	4093      	lsls	r3, r2
 8007974:	608b      	str	r3, [r1, #8]
 8007976:	4620      	mov	r0, r4
 8007978:	f001 f92c 	bl	8008bd4 <_Bfree>
 800797c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800797e:	2200      	movs	r2, #0
 8007980:	601a      	str	r2, [r3, #0]
 8007982:	1e3b      	subs	r3, r7, #0
 8007984:	bfbb      	ittet	lt
 8007986:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800798a:	9301      	strlt	r3, [sp, #4]
 800798c:	2300      	movge	r3, #0
 800798e:	2201      	movlt	r2, #1
 8007990:	bfac      	ite	ge
 8007992:	f8c8 3000 	strge.w	r3, [r8]
 8007996:	f8c8 2000 	strlt.w	r2, [r8]
 800799a:	4baf      	ldr	r3, [pc, #700]	; (8007c58 <_dtoa_r+0x320>)
 800799c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80079a0:	ea33 0308 	bics.w	r3, r3, r8
 80079a4:	d114      	bne.n	80079d0 <_dtoa_r+0x98>
 80079a6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80079a8:	f242 730f 	movw	r3, #9999	; 0x270f
 80079ac:	6013      	str	r3, [r2, #0]
 80079ae:	9b00      	ldr	r3, [sp, #0]
 80079b0:	b923      	cbnz	r3, 80079bc <_dtoa_r+0x84>
 80079b2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80079b6:	2800      	cmp	r0, #0
 80079b8:	f000 8542 	beq.w	8008440 <_dtoa_r+0xb08>
 80079bc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80079be:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8007c6c <_dtoa_r+0x334>
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	f000 8544 	beq.w	8008450 <_dtoa_r+0xb18>
 80079c8:	f10b 0303 	add.w	r3, fp, #3
 80079cc:	f000 bd3e 	b.w	800844c <_dtoa_r+0xb14>
 80079d0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80079d4:	2200      	movs	r2, #0
 80079d6:	2300      	movs	r3, #0
 80079d8:	4630      	mov	r0, r6
 80079da:	4639      	mov	r1, r7
 80079dc:	f7f9 f87c 	bl	8000ad8 <__aeabi_dcmpeq>
 80079e0:	4681      	mov	r9, r0
 80079e2:	b168      	cbz	r0, 8007a00 <_dtoa_r+0xc8>
 80079e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80079e6:	2301      	movs	r3, #1
 80079e8:	6013      	str	r3, [r2, #0]
 80079ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	f000 8524 	beq.w	800843a <_dtoa_r+0xb02>
 80079f2:	4b9a      	ldr	r3, [pc, #616]	; (8007c5c <_dtoa_r+0x324>)
 80079f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80079f6:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 80079fa:	6013      	str	r3, [r2, #0]
 80079fc:	f000 bd28 	b.w	8008450 <_dtoa_r+0xb18>
 8007a00:	aa14      	add	r2, sp, #80	; 0x50
 8007a02:	a915      	add	r1, sp, #84	; 0x54
 8007a04:	ec47 6b10 	vmov	d0, r6, r7
 8007a08:	4620      	mov	r0, r4
 8007a0a:	f001 fbf1 	bl	80091f0 <__d2b>
 8007a0e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007a12:	9004      	str	r0, [sp, #16]
 8007a14:	2d00      	cmp	r5, #0
 8007a16:	d07c      	beq.n	8007b12 <_dtoa_r+0x1da>
 8007a18:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007a1c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8007a20:	46b2      	mov	sl, r6
 8007a22:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8007a26:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007a2a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8007a2e:	2200      	movs	r2, #0
 8007a30:	4b8b      	ldr	r3, [pc, #556]	; (8007c60 <_dtoa_r+0x328>)
 8007a32:	4650      	mov	r0, sl
 8007a34:	4659      	mov	r1, fp
 8007a36:	f7f8 fc2f 	bl	8000298 <__aeabi_dsub>
 8007a3a:	a381      	add	r3, pc, #516	; (adr r3, 8007c40 <_dtoa_r+0x308>)
 8007a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a40:	f7f8 fde2 	bl	8000608 <__aeabi_dmul>
 8007a44:	a380      	add	r3, pc, #512	; (adr r3, 8007c48 <_dtoa_r+0x310>)
 8007a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a4a:	f7f8 fc27 	bl	800029c <__adddf3>
 8007a4e:	4606      	mov	r6, r0
 8007a50:	4628      	mov	r0, r5
 8007a52:	460f      	mov	r7, r1
 8007a54:	f7f8 fd6e 	bl	8000534 <__aeabi_i2d>
 8007a58:	a37d      	add	r3, pc, #500	; (adr r3, 8007c50 <_dtoa_r+0x318>)
 8007a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a5e:	f7f8 fdd3 	bl	8000608 <__aeabi_dmul>
 8007a62:	4602      	mov	r2, r0
 8007a64:	460b      	mov	r3, r1
 8007a66:	4630      	mov	r0, r6
 8007a68:	4639      	mov	r1, r7
 8007a6a:	f7f8 fc17 	bl	800029c <__adddf3>
 8007a6e:	4606      	mov	r6, r0
 8007a70:	460f      	mov	r7, r1
 8007a72:	f7f9 f879 	bl	8000b68 <__aeabi_d2iz>
 8007a76:	2200      	movs	r2, #0
 8007a78:	4682      	mov	sl, r0
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	4630      	mov	r0, r6
 8007a7e:	4639      	mov	r1, r7
 8007a80:	f7f9 f834 	bl	8000aec <__aeabi_dcmplt>
 8007a84:	b148      	cbz	r0, 8007a9a <_dtoa_r+0x162>
 8007a86:	4650      	mov	r0, sl
 8007a88:	f7f8 fd54 	bl	8000534 <__aeabi_i2d>
 8007a8c:	4632      	mov	r2, r6
 8007a8e:	463b      	mov	r3, r7
 8007a90:	f7f9 f822 	bl	8000ad8 <__aeabi_dcmpeq>
 8007a94:	b908      	cbnz	r0, 8007a9a <_dtoa_r+0x162>
 8007a96:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007a9a:	f1ba 0f16 	cmp.w	sl, #22
 8007a9e:	d859      	bhi.n	8007b54 <_dtoa_r+0x21c>
 8007aa0:	4970      	ldr	r1, [pc, #448]	; (8007c64 <_dtoa_r+0x32c>)
 8007aa2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007aa6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007aaa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007aae:	f7f9 f83b 	bl	8000b28 <__aeabi_dcmpgt>
 8007ab2:	2800      	cmp	r0, #0
 8007ab4:	d050      	beq.n	8007b58 <_dtoa_r+0x220>
 8007ab6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007aba:	2300      	movs	r3, #0
 8007abc:	930f      	str	r3, [sp, #60]	; 0x3c
 8007abe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007ac0:	1b5d      	subs	r5, r3, r5
 8007ac2:	f1b5 0801 	subs.w	r8, r5, #1
 8007ac6:	bf49      	itett	mi
 8007ac8:	f1c5 0301 	rsbmi	r3, r5, #1
 8007acc:	2300      	movpl	r3, #0
 8007ace:	9305      	strmi	r3, [sp, #20]
 8007ad0:	f04f 0800 	movmi.w	r8, #0
 8007ad4:	bf58      	it	pl
 8007ad6:	9305      	strpl	r3, [sp, #20]
 8007ad8:	f1ba 0f00 	cmp.w	sl, #0
 8007adc:	db3e      	blt.n	8007b5c <_dtoa_r+0x224>
 8007ade:	2300      	movs	r3, #0
 8007ae0:	44d0      	add	r8, sl
 8007ae2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8007ae6:	9307      	str	r3, [sp, #28]
 8007ae8:	9b06      	ldr	r3, [sp, #24]
 8007aea:	2b09      	cmp	r3, #9
 8007aec:	f200 8090 	bhi.w	8007c10 <_dtoa_r+0x2d8>
 8007af0:	2b05      	cmp	r3, #5
 8007af2:	bfc4      	itt	gt
 8007af4:	3b04      	subgt	r3, #4
 8007af6:	9306      	strgt	r3, [sp, #24]
 8007af8:	9b06      	ldr	r3, [sp, #24]
 8007afa:	f1a3 0302 	sub.w	r3, r3, #2
 8007afe:	bfcc      	ite	gt
 8007b00:	2500      	movgt	r5, #0
 8007b02:	2501      	movle	r5, #1
 8007b04:	2b03      	cmp	r3, #3
 8007b06:	f200 808f 	bhi.w	8007c28 <_dtoa_r+0x2f0>
 8007b0a:	e8df f003 	tbb	[pc, r3]
 8007b0e:	7f7d      	.short	0x7f7d
 8007b10:	7131      	.short	0x7131
 8007b12:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8007b16:	441d      	add	r5, r3
 8007b18:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8007b1c:	2820      	cmp	r0, #32
 8007b1e:	dd13      	ble.n	8007b48 <_dtoa_r+0x210>
 8007b20:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8007b24:	9b00      	ldr	r3, [sp, #0]
 8007b26:	fa08 f800 	lsl.w	r8, r8, r0
 8007b2a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8007b2e:	fa23 f000 	lsr.w	r0, r3, r0
 8007b32:	ea48 0000 	orr.w	r0, r8, r0
 8007b36:	f7f8 fced 	bl	8000514 <__aeabi_ui2d>
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	4682      	mov	sl, r0
 8007b3e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8007b42:	3d01      	subs	r5, #1
 8007b44:	9313      	str	r3, [sp, #76]	; 0x4c
 8007b46:	e772      	b.n	8007a2e <_dtoa_r+0xf6>
 8007b48:	9b00      	ldr	r3, [sp, #0]
 8007b4a:	f1c0 0020 	rsb	r0, r0, #32
 8007b4e:	fa03 f000 	lsl.w	r0, r3, r0
 8007b52:	e7f0      	b.n	8007b36 <_dtoa_r+0x1fe>
 8007b54:	2301      	movs	r3, #1
 8007b56:	e7b1      	b.n	8007abc <_dtoa_r+0x184>
 8007b58:	900f      	str	r0, [sp, #60]	; 0x3c
 8007b5a:	e7b0      	b.n	8007abe <_dtoa_r+0x186>
 8007b5c:	9b05      	ldr	r3, [sp, #20]
 8007b5e:	eba3 030a 	sub.w	r3, r3, sl
 8007b62:	9305      	str	r3, [sp, #20]
 8007b64:	f1ca 0300 	rsb	r3, sl, #0
 8007b68:	9307      	str	r3, [sp, #28]
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	930e      	str	r3, [sp, #56]	; 0x38
 8007b6e:	e7bb      	b.n	8007ae8 <_dtoa_r+0x1b0>
 8007b70:	2301      	movs	r3, #1
 8007b72:	930a      	str	r3, [sp, #40]	; 0x28
 8007b74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	dd59      	ble.n	8007c2e <_dtoa_r+0x2f6>
 8007b7a:	9302      	str	r3, [sp, #8]
 8007b7c:	4699      	mov	r9, r3
 8007b7e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007b80:	2200      	movs	r2, #0
 8007b82:	6072      	str	r2, [r6, #4]
 8007b84:	2204      	movs	r2, #4
 8007b86:	f102 0014 	add.w	r0, r2, #20
 8007b8a:	4298      	cmp	r0, r3
 8007b8c:	6871      	ldr	r1, [r6, #4]
 8007b8e:	d953      	bls.n	8007c38 <_dtoa_r+0x300>
 8007b90:	4620      	mov	r0, r4
 8007b92:	f000 ffeb 	bl	8008b6c <_Balloc>
 8007b96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b98:	6030      	str	r0, [r6, #0]
 8007b9a:	f1b9 0f0e 	cmp.w	r9, #14
 8007b9e:	f8d3 b000 	ldr.w	fp, [r3]
 8007ba2:	f200 80e6 	bhi.w	8007d72 <_dtoa_r+0x43a>
 8007ba6:	2d00      	cmp	r5, #0
 8007ba8:	f000 80e3 	beq.w	8007d72 <_dtoa_r+0x43a>
 8007bac:	ed9d 7b00 	vldr	d7, [sp]
 8007bb0:	f1ba 0f00 	cmp.w	sl, #0
 8007bb4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8007bb8:	dd74      	ble.n	8007ca4 <_dtoa_r+0x36c>
 8007bba:	4a2a      	ldr	r2, [pc, #168]	; (8007c64 <_dtoa_r+0x32c>)
 8007bbc:	f00a 030f 	and.w	r3, sl, #15
 8007bc0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007bc4:	ed93 7b00 	vldr	d7, [r3]
 8007bc8:	ea4f 162a 	mov.w	r6, sl, asr #4
 8007bcc:	06f0      	lsls	r0, r6, #27
 8007bce:	ed8d 7b08 	vstr	d7, [sp, #32]
 8007bd2:	d565      	bpl.n	8007ca0 <_dtoa_r+0x368>
 8007bd4:	4b24      	ldr	r3, [pc, #144]	; (8007c68 <_dtoa_r+0x330>)
 8007bd6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007bda:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007bde:	f7f8 fe3d 	bl	800085c <__aeabi_ddiv>
 8007be2:	e9cd 0100 	strd	r0, r1, [sp]
 8007be6:	f006 060f 	and.w	r6, r6, #15
 8007bea:	2503      	movs	r5, #3
 8007bec:	4f1e      	ldr	r7, [pc, #120]	; (8007c68 <_dtoa_r+0x330>)
 8007bee:	e04c      	b.n	8007c8a <_dtoa_r+0x352>
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	930a      	str	r3, [sp, #40]	; 0x28
 8007bf4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bf6:	4453      	add	r3, sl
 8007bf8:	f103 0901 	add.w	r9, r3, #1
 8007bfc:	9302      	str	r3, [sp, #8]
 8007bfe:	464b      	mov	r3, r9
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	bfb8      	it	lt
 8007c04:	2301      	movlt	r3, #1
 8007c06:	e7ba      	b.n	8007b7e <_dtoa_r+0x246>
 8007c08:	2300      	movs	r3, #0
 8007c0a:	e7b2      	b.n	8007b72 <_dtoa_r+0x23a>
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	e7f0      	b.n	8007bf2 <_dtoa_r+0x2ba>
 8007c10:	2501      	movs	r5, #1
 8007c12:	2300      	movs	r3, #0
 8007c14:	9306      	str	r3, [sp, #24]
 8007c16:	950a      	str	r5, [sp, #40]	; 0x28
 8007c18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c1c:	9302      	str	r3, [sp, #8]
 8007c1e:	4699      	mov	r9, r3
 8007c20:	2200      	movs	r2, #0
 8007c22:	2312      	movs	r3, #18
 8007c24:	920b      	str	r2, [sp, #44]	; 0x2c
 8007c26:	e7aa      	b.n	8007b7e <_dtoa_r+0x246>
 8007c28:	2301      	movs	r3, #1
 8007c2a:	930a      	str	r3, [sp, #40]	; 0x28
 8007c2c:	e7f4      	b.n	8007c18 <_dtoa_r+0x2e0>
 8007c2e:	2301      	movs	r3, #1
 8007c30:	9302      	str	r3, [sp, #8]
 8007c32:	4699      	mov	r9, r3
 8007c34:	461a      	mov	r2, r3
 8007c36:	e7f5      	b.n	8007c24 <_dtoa_r+0x2ec>
 8007c38:	3101      	adds	r1, #1
 8007c3a:	6071      	str	r1, [r6, #4]
 8007c3c:	0052      	lsls	r2, r2, #1
 8007c3e:	e7a2      	b.n	8007b86 <_dtoa_r+0x24e>
 8007c40:	636f4361 	.word	0x636f4361
 8007c44:	3fd287a7 	.word	0x3fd287a7
 8007c48:	8b60c8b3 	.word	0x8b60c8b3
 8007c4c:	3fc68a28 	.word	0x3fc68a28
 8007c50:	509f79fb 	.word	0x509f79fb
 8007c54:	3fd34413 	.word	0x3fd34413
 8007c58:	7ff00000 	.word	0x7ff00000
 8007c5c:	0800a824 	.word	0x0800a824
 8007c60:	3ff80000 	.word	0x3ff80000
 8007c64:	0800a728 	.word	0x0800a728
 8007c68:	0800a700 	.word	0x0800a700
 8007c6c:	0800a6f1 	.word	0x0800a6f1
 8007c70:	07f1      	lsls	r1, r6, #31
 8007c72:	d508      	bpl.n	8007c86 <_dtoa_r+0x34e>
 8007c74:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007c78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c7c:	f7f8 fcc4 	bl	8000608 <__aeabi_dmul>
 8007c80:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007c84:	3501      	adds	r5, #1
 8007c86:	1076      	asrs	r6, r6, #1
 8007c88:	3708      	adds	r7, #8
 8007c8a:	2e00      	cmp	r6, #0
 8007c8c:	d1f0      	bne.n	8007c70 <_dtoa_r+0x338>
 8007c8e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007c92:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c96:	f7f8 fde1 	bl	800085c <__aeabi_ddiv>
 8007c9a:	e9cd 0100 	strd	r0, r1, [sp]
 8007c9e:	e01a      	b.n	8007cd6 <_dtoa_r+0x39e>
 8007ca0:	2502      	movs	r5, #2
 8007ca2:	e7a3      	b.n	8007bec <_dtoa_r+0x2b4>
 8007ca4:	f000 80a0 	beq.w	8007de8 <_dtoa_r+0x4b0>
 8007ca8:	f1ca 0600 	rsb	r6, sl, #0
 8007cac:	4b9f      	ldr	r3, [pc, #636]	; (8007f2c <_dtoa_r+0x5f4>)
 8007cae:	4fa0      	ldr	r7, [pc, #640]	; (8007f30 <_dtoa_r+0x5f8>)
 8007cb0:	f006 020f 	and.w	r2, r6, #15
 8007cb4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cbc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007cc0:	f7f8 fca2 	bl	8000608 <__aeabi_dmul>
 8007cc4:	e9cd 0100 	strd	r0, r1, [sp]
 8007cc8:	1136      	asrs	r6, r6, #4
 8007cca:	2300      	movs	r3, #0
 8007ccc:	2502      	movs	r5, #2
 8007cce:	2e00      	cmp	r6, #0
 8007cd0:	d17f      	bne.n	8007dd2 <_dtoa_r+0x49a>
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d1e1      	bne.n	8007c9a <_dtoa_r+0x362>
 8007cd6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	f000 8087 	beq.w	8007dec <_dtoa_r+0x4b4>
 8007cde:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	4b93      	ldr	r3, [pc, #588]	; (8007f34 <_dtoa_r+0x5fc>)
 8007ce6:	4630      	mov	r0, r6
 8007ce8:	4639      	mov	r1, r7
 8007cea:	f7f8 feff 	bl	8000aec <__aeabi_dcmplt>
 8007cee:	2800      	cmp	r0, #0
 8007cf0:	d07c      	beq.n	8007dec <_dtoa_r+0x4b4>
 8007cf2:	f1b9 0f00 	cmp.w	r9, #0
 8007cf6:	d079      	beq.n	8007dec <_dtoa_r+0x4b4>
 8007cf8:	9b02      	ldr	r3, [sp, #8]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	dd35      	ble.n	8007d6a <_dtoa_r+0x432>
 8007cfe:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8007d02:	9308      	str	r3, [sp, #32]
 8007d04:	4639      	mov	r1, r7
 8007d06:	2200      	movs	r2, #0
 8007d08:	4b8b      	ldr	r3, [pc, #556]	; (8007f38 <_dtoa_r+0x600>)
 8007d0a:	4630      	mov	r0, r6
 8007d0c:	f7f8 fc7c 	bl	8000608 <__aeabi_dmul>
 8007d10:	e9cd 0100 	strd	r0, r1, [sp]
 8007d14:	9f02      	ldr	r7, [sp, #8]
 8007d16:	3501      	adds	r5, #1
 8007d18:	4628      	mov	r0, r5
 8007d1a:	f7f8 fc0b 	bl	8000534 <__aeabi_i2d>
 8007d1e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d22:	f7f8 fc71 	bl	8000608 <__aeabi_dmul>
 8007d26:	2200      	movs	r2, #0
 8007d28:	4b84      	ldr	r3, [pc, #528]	; (8007f3c <_dtoa_r+0x604>)
 8007d2a:	f7f8 fab7 	bl	800029c <__adddf3>
 8007d2e:	4605      	mov	r5, r0
 8007d30:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007d34:	2f00      	cmp	r7, #0
 8007d36:	d15d      	bne.n	8007df4 <_dtoa_r+0x4bc>
 8007d38:	2200      	movs	r2, #0
 8007d3a:	4b81      	ldr	r3, [pc, #516]	; (8007f40 <_dtoa_r+0x608>)
 8007d3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007d40:	f7f8 faaa 	bl	8000298 <__aeabi_dsub>
 8007d44:	462a      	mov	r2, r5
 8007d46:	4633      	mov	r3, r6
 8007d48:	e9cd 0100 	strd	r0, r1, [sp]
 8007d4c:	f7f8 feec 	bl	8000b28 <__aeabi_dcmpgt>
 8007d50:	2800      	cmp	r0, #0
 8007d52:	f040 8288 	bne.w	8008266 <_dtoa_r+0x92e>
 8007d56:	462a      	mov	r2, r5
 8007d58:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007d5c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007d60:	f7f8 fec4 	bl	8000aec <__aeabi_dcmplt>
 8007d64:	2800      	cmp	r0, #0
 8007d66:	f040 827c 	bne.w	8008262 <_dtoa_r+0x92a>
 8007d6a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007d6e:	e9cd 2300 	strd	r2, r3, [sp]
 8007d72:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	f2c0 8150 	blt.w	800801a <_dtoa_r+0x6e2>
 8007d7a:	f1ba 0f0e 	cmp.w	sl, #14
 8007d7e:	f300 814c 	bgt.w	800801a <_dtoa_r+0x6e2>
 8007d82:	4b6a      	ldr	r3, [pc, #424]	; (8007f2c <_dtoa_r+0x5f4>)
 8007d84:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007d88:	ed93 7b00 	vldr	d7, [r3]
 8007d8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007d94:	f280 80d8 	bge.w	8007f48 <_dtoa_r+0x610>
 8007d98:	f1b9 0f00 	cmp.w	r9, #0
 8007d9c:	f300 80d4 	bgt.w	8007f48 <_dtoa_r+0x610>
 8007da0:	f040 825e 	bne.w	8008260 <_dtoa_r+0x928>
 8007da4:	2200      	movs	r2, #0
 8007da6:	4b66      	ldr	r3, [pc, #408]	; (8007f40 <_dtoa_r+0x608>)
 8007da8:	ec51 0b17 	vmov	r0, r1, d7
 8007dac:	f7f8 fc2c 	bl	8000608 <__aeabi_dmul>
 8007db0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007db4:	f7f8 feae 	bl	8000b14 <__aeabi_dcmpge>
 8007db8:	464f      	mov	r7, r9
 8007dba:	464e      	mov	r6, r9
 8007dbc:	2800      	cmp	r0, #0
 8007dbe:	f040 8234 	bne.w	800822a <_dtoa_r+0x8f2>
 8007dc2:	2331      	movs	r3, #49	; 0x31
 8007dc4:	f10b 0501 	add.w	r5, fp, #1
 8007dc8:	f88b 3000 	strb.w	r3, [fp]
 8007dcc:	f10a 0a01 	add.w	sl, sl, #1
 8007dd0:	e22f      	b.n	8008232 <_dtoa_r+0x8fa>
 8007dd2:	07f2      	lsls	r2, r6, #31
 8007dd4:	d505      	bpl.n	8007de2 <_dtoa_r+0x4aa>
 8007dd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007dda:	f7f8 fc15 	bl	8000608 <__aeabi_dmul>
 8007dde:	3501      	adds	r5, #1
 8007de0:	2301      	movs	r3, #1
 8007de2:	1076      	asrs	r6, r6, #1
 8007de4:	3708      	adds	r7, #8
 8007de6:	e772      	b.n	8007cce <_dtoa_r+0x396>
 8007de8:	2502      	movs	r5, #2
 8007dea:	e774      	b.n	8007cd6 <_dtoa_r+0x39e>
 8007dec:	f8cd a020 	str.w	sl, [sp, #32]
 8007df0:	464f      	mov	r7, r9
 8007df2:	e791      	b.n	8007d18 <_dtoa_r+0x3e0>
 8007df4:	4b4d      	ldr	r3, [pc, #308]	; (8007f2c <_dtoa_r+0x5f4>)
 8007df6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007dfa:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8007dfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d047      	beq.n	8007e94 <_dtoa_r+0x55c>
 8007e04:	4602      	mov	r2, r0
 8007e06:	460b      	mov	r3, r1
 8007e08:	2000      	movs	r0, #0
 8007e0a:	494e      	ldr	r1, [pc, #312]	; (8007f44 <_dtoa_r+0x60c>)
 8007e0c:	f7f8 fd26 	bl	800085c <__aeabi_ddiv>
 8007e10:	462a      	mov	r2, r5
 8007e12:	4633      	mov	r3, r6
 8007e14:	f7f8 fa40 	bl	8000298 <__aeabi_dsub>
 8007e18:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007e1c:	465d      	mov	r5, fp
 8007e1e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007e22:	f7f8 fea1 	bl	8000b68 <__aeabi_d2iz>
 8007e26:	4606      	mov	r6, r0
 8007e28:	f7f8 fb84 	bl	8000534 <__aeabi_i2d>
 8007e2c:	4602      	mov	r2, r0
 8007e2e:	460b      	mov	r3, r1
 8007e30:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007e34:	f7f8 fa30 	bl	8000298 <__aeabi_dsub>
 8007e38:	3630      	adds	r6, #48	; 0x30
 8007e3a:	f805 6b01 	strb.w	r6, [r5], #1
 8007e3e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007e42:	e9cd 0100 	strd	r0, r1, [sp]
 8007e46:	f7f8 fe51 	bl	8000aec <__aeabi_dcmplt>
 8007e4a:	2800      	cmp	r0, #0
 8007e4c:	d163      	bne.n	8007f16 <_dtoa_r+0x5de>
 8007e4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e52:	2000      	movs	r0, #0
 8007e54:	4937      	ldr	r1, [pc, #220]	; (8007f34 <_dtoa_r+0x5fc>)
 8007e56:	f7f8 fa1f 	bl	8000298 <__aeabi_dsub>
 8007e5a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007e5e:	f7f8 fe45 	bl	8000aec <__aeabi_dcmplt>
 8007e62:	2800      	cmp	r0, #0
 8007e64:	f040 80b7 	bne.w	8007fd6 <_dtoa_r+0x69e>
 8007e68:	eba5 030b 	sub.w	r3, r5, fp
 8007e6c:	429f      	cmp	r7, r3
 8007e6e:	f77f af7c 	ble.w	8007d6a <_dtoa_r+0x432>
 8007e72:	2200      	movs	r2, #0
 8007e74:	4b30      	ldr	r3, [pc, #192]	; (8007f38 <_dtoa_r+0x600>)
 8007e76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007e7a:	f7f8 fbc5 	bl	8000608 <__aeabi_dmul>
 8007e7e:	2200      	movs	r2, #0
 8007e80:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007e84:	4b2c      	ldr	r3, [pc, #176]	; (8007f38 <_dtoa_r+0x600>)
 8007e86:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007e8a:	f7f8 fbbd 	bl	8000608 <__aeabi_dmul>
 8007e8e:	e9cd 0100 	strd	r0, r1, [sp]
 8007e92:	e7c4      	b.n	8007e1e <_dtoa_r+0x4e6>
 8007e94:	462a      	mov	r2, r5
 8007e96:	4633      	mov	r3, r6
 8007e98:	f7f8 fbb6 	bl	8000608 <__aeabi_dmul>
 8007e9c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007ea0:	eb0b 0507 	add.w	r5, fp, r7
 8007ea4:	465e      	mov	r6, fp
 8007ea6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007eaa:	f7f8 fe5d 	bl	8000b68 <__aeabi_d2iz>
 8007eae:	4607      	mov	r7, r0
 8007eb0:	f7f8 fb40 	bl	8000534 <__aeabi_i2d>
 8007eb4:	3730      	adds	r7, #48	; 0x30
 8007eb6:	4602      	mov	r2, r0
 8007eb8:	460b      	mov	r3, r1
 8007eba:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007ebe:	f7f8 f9eb 	bl	8000298 <__aeabi_dsub>
 8007ec2:	f806 7b01 	strb.w	r7, [r6], #1
 8007ec6:	42ae      	cmp	r6, r5
 8007ec8:	e9cd 0100 	strd	r0, r1, [sp]
 8007ecc:	f04f 0200 	mov.w	r2, #0
 8007ed0:	d126      	bne.n	8007f20 <_dtoa_r+0x5e8>
 8007ed2:	4b1c      	ldr	r3, [pc, #112]	; (8007f44 <_dtoa_r+0x60c>)
 8007ed4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007ed8:	f7f8 f9e0 	bl	800029c <__adddf3>
 8007edc:	4602      	mov	r2, r0
 8007ede:	460b      	mov	r3, r1
 8007ee0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007ee4:	f7f8 fe20 	bl	8000b28 <__aeabi_dcmpgt>
 8007ee8:	2800      	cmp	r0, #0
 8007eea:	d174      	bne.n	8007fd6 <_dtoa_r+0x69e>
 8007eec:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007ef0:	2000      	movs	r0, #0
 8007ef2:	4914      	ldr	r1, [pc, #80]	; (8007f44 <_dtoa_r+0x60c>)
 8007ef4:	f7f8 f9d0 	bl	8000298 <__aeabi_dsub>
 8007ef8:	4602      	mov	r2, r0
 8007efa:	460b      	mov	r3, r1
 8007efc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007f00:	f7f8 fdf4 	bl	8000aec <__aeabi_dcmplt>
 8007f04:	2800      	cmp	r0, #0
 8007f06:	f43f af30 	beq.w	8007d6a <_dtoa_r+0x432>
 8007f0a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007f0e:	2b30      	cmp	r3, #48	; 0x30
 8007f10:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8007f14:	d002      	beq.n	8007f1c <_dtoa_r+0x5e4>
 8007f16:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007f1a:	e04a      	b.n	8007fb2 <_dtoa_r+0x67a>
 8007f1c:	4615      	mov	r5, r2
 8007f1e:	e7f4      	b.n	8007f0a <_dtoa_r+0x5d2>
 8007f20:	4b05      	ldr	r3, [pc, #20]	; (8007f38 <_dtoa_r+0x600>)
 8007f22:	f7f8 fb71 	bl	8000608 <__aeabi_dmul>
 8007f26:	e9cd 0100 	strd	r0, r1, [sp]
 8007f2a:	e7bc      	b.n	8007ea6 <_dtoa_r+0x56e>
 8007f2c:	0800a728 	.word	0x0800a728
 8007f30:	0800a700 	.word	0x0800a700
 8007f34:	3ff00000 	.word	0x3ff00000
 8007f38:	40240000 	.word	0x40240000
 8007f3c:	401c0000 	.word	0x401c0000
 8007f40:	40140000 	.word	0x40140000
 8007f44:	3fe00000 	.word	0x3fe00000
 8007f48:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007f4c:	465d      	mov	r5, fp
 8007f4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f52:	4630      	mov	r0, r6
 8007f54:	4639      	mov	r1, r7
 8007f56:	f7f8 fc81 	bl	800085c <__aeabi_ddiv>
 8007f5a:	f7f8 fe05 	bl	8000b68 <__aeabi_d2iz>
 8007f5e:	4680      	mov	r8, r0
 8007f60:	f7f8 fae8 	bl	8000534 <__aeabi_i2d>
 8007f64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f68:	f7f8 fb4e 	bl	8000608 <__aeabi_dmul>
 8007f6c:	4602      	mov	r2, r0
 8007f6e:	460b      	mov	r3, r1
 8007f70:	4630      	mov	r0, r6
 8007f72:	4639      	mov	r1, r7
 8007f74:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8007f78:	f7f8 f98e 	bl	8000298 <__aeabi_dsub>
 8007f7c:	f805 6b01 	strb.w	r6, [r5], #1
 8007f80:	eba5 060b 	sub.w	r6, r5, fp
 8007f84:	45b1      	cmp	r9, r6
 8007f86:	4602      	mov	r2, r0
 8007f88:	460b      	mov	r3, r1
 8007f8a:	d139      	bne.n	8008000 <_dtoa_r+0x6c8>
 8007f8c:	f7f8 f986 	bl	800029c <__adddf3>
 8007f90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f94:	4606      	mov	r6, r0
 8007f96:	460f      	mov	r7, r1
 8007f98:	f7f8 fdc6 	bl	8000b28 <__aeabi_dcmpgt>
 8007f9c:	b9c8      	cbnz	r0, 8007fd2 <_dtoa_r+0x69a>
 8007f9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007fa2:	4630      	mov	r0, r6
 8007fa4:	4639      	mov	r1, r7
 8007fa6:	f7f8 fd97 	bl	8000ad8 <__aeabi_dcmpeq>
 8007faa:	b110      	cbz	r0, 8007fb2 <_dtoa_r+0x67a>
 8007fac:	f018 0f01 	tst.w	r8, #1
 8007fb0:	d10f      	bne.n	8007fd2 <_dtoa_r+0x69a>
 8007fb2:	9904      	ldr	r1, [sp, #16]
 8007fb4:	4620      	mov	r0, r4
 8007fb6:	f000 fe0d 	bl	8008bd4 <_Bfree>
 8007fba:	2300      	movs	r3, #0
 8007fbc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007fbe:	702b      	strb	r3, [r5, #0]
 8007fc0:	f10a 0301 	add.w	r3, sl, #1
 8007fc4:	6013      	str	r3, [r2, #0]
 8007fc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	f000 8241 	beq.w	8008450 <_dtoa_r+0xb18>
 8007fce:	601d      	str	r5, [r3, #0]
 8007fd0:	e23e      	b.n	8008450 <_dtoa_r+0xb18>
 8007fd2:	f8cd a020 	str.w	sl, [sp, #32]
 8007fd6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007fda:	2a39      	cmp	r2, #57	; 0x39
 8007fdc:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8007fe0:	d108      	bne.n	8007ff4 <_dtoa_r+0x6bc>
 8007fe2:	459b      	cmp	fp, r3
 8007fe4:	d10a      	bne.n	8007ffc <_dtoa_r+0x6c4>
 8007fe6:	9b08      	ldr	r3, [sp, #32]
 8007fe8:	3301      	adds	r3, #1
 8007fea:	9308      	str	r3, [sp, #32]
 8007fec:	2330      	movs	r3, #48	; 0x30
 8007fee:	f88b 3000 	strb.w	r3, [fp]
 8007ff2:	465b      	mov	r3, fp
 8007ff4:	781a      	ldrb	r2, [r3, #0]
 8007ff6:	3201      	adds	r2, #1
 8007ff8:	701a      	strb	r2, [r3, #0]
 8007ffa:	e78c      	b.n	8007f16 <_dtoa_r+0x5de>
 8007ffc:	461d      	mov	r5, r3
 8007ffe:	e7ea      	b.n	8007fd6 <_dtoa_r+0x69e>
 8008000:	2200      	movs	r2, #0
 8008002:	4b9b      	ldr	r3, [pc, #620]	; (8008270 <_dtoa_r+0x938>)
 8008004:	f7f8 fb00 	bl	8000608 <__aeabi_dmul>
 8008008:	2200      	movs	r2, #0
 800800a:	2300      	movs	r3, #0
 800800c:	4606      	mov	r6, r0
 800800e:	460f      	mov	r7, r1
 8008010:	f7f8 fd62 	bl	8000ad8 <__aeabi_dcmpeq>
 8008014:	2800      	cmp	r0, #0
 8008016:	d09a      	beq.n	8007f4e <_dtoa_r+0x616>
 8008018:	e7cb      	b.n	8007fb2 <_dtoa_r+0x67a>
 800801a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800801c:	2a00      	cmp	r2, #0
 800801e:	f000 808b 	beq.w	8008138 <_dtoa_r+0x800>
 8008022:	9a06      	ldr	r2, [sp, #24]
 8008024:	2a01      	cmp	r2, #1
 8008026:	dc6e      	bgt.n	8008106 <_dtoa_r+0x7ce>
 8008028:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800802a:	2a00      	cmp	r2, #0
 800802c:	d067      	beq.n	80080fe <_dtoa_r+0x7c6>
 800802e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008032:	9f07      	ldr	r7, [sp, #28]
 8008034:	9d05      	ldr	r5, [sp, #20]
 8008036:	9a05      	ldr	r2, [sp, #20]
 8008038:	2101      	movs	r1, #1
 800803a:	441a      	add	r2, r3
 800803c:	4620      	mov	r0, r4
 800803e:	9205      	str	r2, [sp, #20]
 8008040:	4498      	add	r8, r3
 8008042:	f000 fea5 	bl	8008d90 <__i2b>
 8008046:	4606      	mov	r6, r0
 8008048:	2d00      	cmp	r5, #0
 800804a:	dd0c      	ble.n	8008066 <_dtoa_r+0x72e>
 800804c:	f1b8 0f00 	cmp.w	r8, #0
 8008050:	dd09      	ble.n	8008066 <_dtoa_r+0x72e>
 8008052:	4545      	cmp	r5, r8
 8008054:	9a05      	ldr	r2, [sp, #20]
 8008056:	462b      	mov	r3, r5
 8008058:	bfa8      	it	ge
 800805a:	4643      	movge	r3, r8
 800805c:	1ad2      	subs	r2, r2, r3
 800805e:	9205      	str	r2, [sp, #20]
 8008060:	1aed      	subs	r5, r5, r3
 8008062:	eba8 0803 	sub.w	r8, r8, r3
 8008066:	9b07      	ldr	r3, [sp, #28]
 8008068:	b1eb      	cbz	r3, 80080a6 <_dtoa_r+0x76e>
 800806a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800806c:	2b00      	cmp	r3, #0
 800806e:	d067      	beq.n	8008140 <_dtoa_r+0x808>
 8008070:	b18f      	cbz	r7, 8008096 <_dtoa_r+0x75e>
 8008072:	4631      	mov	r1, r6
 8008074:	463a      	mov	r2, r7
 8008076:	4620      	mov	r0, r4
 8008078:	f000 ff2a 	bl	8008ed0 <__pow5mult>
 800807c:	9a04      	ldr	r2, [sp, #16]
 800807e:	4601      	mov	r1, r0
 8008080:	4606      	mov	r6, r0
 8008082:	4620      	mov	r0, r4
 8008084:	f000 fe8d 	bl	8008da2 <__multiply>
 8008088:	9904      	ldr	r1, [sp, #16]
 800808a:	9008      	str	r0, [sp, #32]
 800808c:	4620      	mov	r0, r4
 800808e:	f000 fda1 	bl	8008bd4 <_Bfree>
 8008092:	9b08      	ldr	r3, [sp, #32]
 8008094:	9304      	str	r3, [sp, #16]
 8008096:	9b07      	ldr	r3, [sp, #28]
 8008098:	1bda      	subs	r2, r3, r7
 800809a:	d004      	beq.n	80080a6 <_dtoa_r+0x76e>
 800809c:	9904      	ldr	r1, [sp, #16]
 800809e:	4620      	mov	r0, r4
 80080a0:	f000 ff16 	bl	8008ed0 <__pow5mult>
 80080a4:	9004      	str	r0, [sp, #16]
 80080a6:	2101      	movs	r1, #1
 80080a8:	4620      	mov	r0, r4
 80080aa:	f000 fe71 	bl	8008d90 <__i2b>
 80080ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80080b0:	4607      	mov	r7, r0
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	f000 81d0 	beq.w	8008458 <_dtoa_r+0xb20>
 80080b8:	461a      	mov	r2, r3
 80080ba:	4601      	mov	r1, r0
 80080bc:	4620      	mov	r0, r4
 80080be:	f000 ff07 	bl	8008ed0 <__pow5mult>
 80080c2:	9b06      	ldr	r3, [sp, #24]
 80080c4:	2b01      	cmp	r3, #1
 80080c6:	4607      	mov	r7, r0
 80080c8:	dc40      	bgt.n	800814c <_dtoa_r+0x814>
 80080ca:	9b00      	ldr	r3, [sp, #0]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d139      	bne.n	8008144 <_dtoa_r+0x80c>
 80080d0:	9b01      	ldr	r3, [sp, #4]
 80080d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d136      	bne.n	8008148 <_dtoa_r+0x810>
 80080da:	9b01      	ldr	r3, [sp, #4]
 80080dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80080e0:	0d1b      	lsrs	r3, r3, #20
 80080e2:	051b      	lsls	r3, r3, #20
 80080e4:	b12b      	cbz	r3, 80080f2 <_dtoa_r+0x7ba>
 80080e6:	9b05      	ldr	r3, [sp, #20]
 80080e8:	3301      	adds	r3, #1
 80080ea:	9305      	str	r3, [sp, #20]
 80080ec:	f108 0801 	add.w	r8, r8, #1
 80080f0:	2301      	movs	r3, #1
 80080f2:	9307      	str	r3, [sp, #28]
 80080f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d12a      	bne.n	8008150 <_dtoa_r+0x818>
 80080fa:	2001      	movs	r0, #1
 80080fc:	e030      	b.n	8008160 <_dtoa_r+0x828>
 80080fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008100:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008104:	e795      	b.n	8008032 <_dtoa_r+0x6fa>
 8008106:	9b07      	ldr	r3, [sp, #28]
 8008108:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800810c:	42bb      	cmp	r3, r7
 800810e:	bfbf      	itttt	lt
 8008110:	9b07      	ldrlt	r3, [sp, #28]
 8008112:	9707      	strlt	r7, [sp, #28]
 8008114:	1afa      	sublt	r2, r7, r3
 8008116:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008118:	bfbb      	ittet	lt
 800811a:	189b      	addlt	r3, r3, r2
 800811c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800811e:	1bdf      	subge	r7, r3, r7
 8008120:	2700      	movlt	r7, #0
 8008122:	f1b9 0f00 	cmp.w	r9, #0
 8008126:	bfb5      	itete	lt
 8008128:	9b05      	ldrlt	r3, [sp, #20]
 800812a:	9d05      	ldrge	r5, [sp, #20]
 800812c:	eba3 0509 	sublt.w	r5, r3, r9
 8008130:	464b      	movge	r3, r9
 8008132:	bfb8      	it	lt
 8008134:	2300      	movlt	r3, #0
 8008136:	e77e      	b.n	8008036 <_dtoa_r+0x6fe>
 8008138:	9f07      	ldr	r7, [sp, #28]
 800813a:	9d05      	ldr	r5, [sp, #20]
 800813c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800813e:	e783      	b.n	8008048 <_dtoa_r+0x710>
 8008140:	9a07      	ldr	r2, [sp, #28]
 8008142:	e7ab      	b.n	800809c <_dtoa_r+0x764>
 8008144:	2300      	movs	r3, #0
 8008146:	e7d4      	b.n	80080f2 <_dtoa_r+0x7ba>
 8008148:	9b00      	ldr	r3, [sp, #0]
 800814a:	e7d2      	b.n	80080f2 <_dtoa_r+0x7ba>
 800814c:	2300      	movs	r3, #0
 800814e:	9307      	str	r3, [sp, #28]
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8008156:	6918      	ldr	r0, [r3, #16]
 8008158:	f000 fdcc 	bl	8008cf4 <__hi0bits>
 800815c:	f1c0 0020 	rsb	r0, r0, #32
 8008160:	4440      	add	r0, r8
 8008162:	f010 001f 	ands.w	r0, r0, #31
 8008166:	d047      	beq.n	80081f8 <_dtoa_r+0x8c0>
 8008168:	f1c0 0320 	rsb	r3, r0, #32
 800816c:	2b04      	cmp	r3, #4
 800816e:	dd3b      	ble.n	80081e8 <_dtoa_r+0x8b0>
 8008170:	9b05      	ldr	r3, [sp, #20]
 8008172:	f1c0 001c 	rsb	r0, r0, #28
 8008176:	4403      	add	r3, r0
 8008178:	9305      	str	r3, [sp, #20]
 800817a:	4405      	add	r5, r0
 800817c:	4480      	add	r8, r0
 800817e:	9b05      	ldr	r3, [sp, #20]
 8008180:	2b00      	cmp	r3, #0
 8008182:	dd05      	ble.n	8008190 <_dtoa_r+0x858>
 8008184:	461a      	mov	r2, r3
 8008186:	9904      	ldr	r1, [sp, #16]
 8008188:	4620      	mov	r0, r4
 800818a:	f000 feef 	bl	8008f6c <__lshift>
 800818e:	9004      	str	r0, [sp, #16]
 8008190:	f1b8 0f00 	cmp.w	r8, #0
 8008194:	dd05      	ble.n	80081a2 <_dtoa_r+0x86a>
 8008196:	4639      	mov	r1, r7
 8008198:	4642      	mov	r2, r8
 800819a:	4620      	mov	r0, r4
 800819c:	f000 fee6 	bl	8008f6c <__lshift>
 80081a0:	4607      	mov	r7, r0
 80081a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80081a4:	b353      	cbz	r3, 80081fc <_dtoa_r+0x8c4>
 80081a6:	4639      	mov	r1, r7
 80081a8:	9804      	ldr	r0, [sp, #16]
 80081aa:	f000 ff33 	bl	8009014 <__mcmp>
 80081ae:	2800      	cmp	r0, #0
 80081b0:	da24      	bge.n	80081fc <_dtoa_r+0x8c4>
 80081b2:	2300      	movs	r3, #0
 80081b4:	220a      	movs	r2, #10
 80081b6:	9904      	ldr	r1, [sp, #16]
 80081b8:	4620      	mov	r0, r4
 80081ba:	f000 fd22 	bl	8008c02 <__multadd>
 80081be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081c0:	9004      	str	r0, [sp, #16]
 80081c2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	f000 814d 	beq.w	8008466 <_dtoa_r+0xb2e>
 80081cc:	2300      	movs	r3, #0
 80081ce:	4631      	mov	r1, r6
 80081d0:	220a      	movs	r2, #10
 80081d2:	4620      	mov	r0, r4
 80081d4:	f000 fd15 	bl	8008c02 <__multadd>
 80081d8:	9b02      	ldr	r3, [sp, #8]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	4606      	mov	r6, r0
 80081de:	dc4f      	bgt.n	8008280 <_dtoa_r+0x948>
 80081e0:	9b06      	ldr	r3, [sp, #24]
 80081e2:	2b02      	cmp	r3, #2
 80081e4:	dd4c      	ble.n	8008280 <_dtoa_r+0x948>
 80081e6:	e011      	b.n	800820c <_dtoa_r+0x8d4>
 80081e8:	d0c9      	beq.n	800817e <_dtoa_r+0x846>
 80081ea:	9a05      	ldr	r2, [sp, #20]
 80081ec:	331c      	adds	r3, #28
 80081ee:	441a      	add	r2, r3
 80081f0:	9205      	str	r2, [sp, #20]
 80081f2:	441d      	add	r5, r3
 80081f4:	4498      	add	r8, r3
 80081f6:	e7c2      	b.n	800817e <_dtoa_r+0x846>
 80081f8:	4603      	mov	r3, r0
 80081fa:	e7f6      	b.n	80081ea <_dtoa_r+0x8b2>
 80081fc:	f1b9 0f00 	cmp.w	r9, #0
 8008200:	dc38      	bgt.n	8008274 <_dtoa_r+0x93c>
 8008202:	9b06      	ldr	r3, [sp, #24]
 8008204:	2b02      	cmp	r3, #2
 8008206:	dd35      	ble.n	8008274 <_dtoa_r+0x93c>
 8008208:	f8cd 9008 	str.w	r9, [sp, #8]
 800820c:	9b02      	ldr	r3, [sp, #8]
 800820e:	b963      	cbnz	r3, 800822a <_dtoa_r+0x8f2>
 8008210:	4639      	mov	r1, r7
 8008212:	2205      	movs	r2, #5
 8008214:	4620      	mov	r0, r4
 8008216:	f000 fcf4 	bl	8008c02 <__multadd>
 800821a:	4601      	mov	r1, r0
 800821c:	4607      	mov	r7, r0
 800821e:	9804      	ldr	r0, [sp, #16]
 8008220:	f000 fef8 	bl	8009014 <__mcmp>
 8008224:	2800      	cmp	r0, #0
 8008226:	f73f adcc 	bgt.w	8007dc2 <_dtoa_r+0x48a>
 800822a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800822c:	465d      	mov	r5, fp
 800822e:	ea6f 0a03 	mvn.w	sl, r3
 8008232:	f04f 0900 	mov.w	r9, #0
 8008236:	4639      	mov	r1, r7
 8008238:	4620      	mov	r0, r4
 800823a:	f000 fccb 	bl	8008bd4 <_Bfree>
 800823e:	2e00      	cmp	r6, #0
 8008240:	f43f aeb7 	beq.w	8007fb2 <_dtoa_r+0x67a>
 8008244:	f1b9 0f00 	cmp.w	r9, #0
 8008248:	d005      	beq.n	8008256 <_dtoa_r+0x91e>
 800824a:	45b1      	cmp	r9, r6
 800824c:	d003      	beq.n	8008256 <_dtoa_r+0x91e>
 800824e:	4649      	mov	r1, r9
 8008250:	4620      	mov	r0, r4
 8008252:	f000 fcbf 	bl	8008bd4 <_Bfree>
 8008256:	4631      	mov	r1, r6
 8008258:	4620      	mov	r0, r4
 800825a:	f000 fcbb 	bl	8008bd4 <_Bfree>
 800825e:	e6a8      	b.n	8007fb2 <_dtoa_r+0x67a>
 8008260:	2700      	movs	r7, #0
 8008262:	463e      	mov	r6, r7
 8008264:	e7e1      	b.n	800822a <_dtoa_r+0x8f2>
 8008266:	f8dd a020 	ldr.w	sl, [sp, #32]
 800826a:	463e      	mov	r6, r7
 800826c:	e5a9      	b.n	8007dc2 <_dtoa_r+0x48a>
 800826e:	bf00      	nop
 8008270:	40240000 	.word	0x40240000
 8008274:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008276:	f8cd 9008 	str.w	r9, [sp, #8]
 800827a:	2b00      	cmp	r3, #0
 800827c:	f000 80fa 	beq.w	8008474 <_dtoa_r+0xb3c>
 8008280:	2d00      	cmp	r5, #0
 8008282:	dd05      	ble.n	8008290 <_dtoa_r+0x958>
 8008284:	4631      	mov	r1, r6
 8008286:	462a      	mov	r2, r5
 8008288:	4620      	mov	r0, r4
 800828a:	f000 fe6f 	bl	8008f6c <__lshift>
 800828e:	4606      	mov	r6, r0
 8008290:	9b07      	ldr	r3, [sp, #28]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d04c      	beq.n	8008330 <_dtoa_r+0x9f8>
 8008296:	6871      	ldr	r1, [r6, #4]
 8008298:	4620      	mov	r0, r4
 800829a:	f000 fc67 	bl	8008b6c <_Balloc>
 800829e:	6932      	ldr	r2, [r6, #16]
 80082a0:	3202      	adds	r2, #2
 80082a2:	4605      	mov	r5, r0
 80082a4:	0092      	lsls	r2, r2, #2
 80082a6:	f106 010c 	add.w	r1, r6, #12
 80082aa:	300c      	adds	r0, #12
 80082ac:	f7fd fd62 	bl	8005d74 <memcpy>
 80082b0:	2201      	movs	r2, #1
 80082b2:	4629      	mov	r1, r5
 80082b4:	4620      	mov	r0, r4
 80082b6:	f000 fe59 	bl	8008f6c <__lshift>
 80082ba:	9b00      	ldr	r3, [sp, #0]
 80082bc:	f8cd b014 	str.w	fp, [sp, #20]
 80082c0:	f003 0301 	and.w	r3, r3, #1
 80082c4:	46b1      	mov	r9, r6
 80082c6:	9307      	str	r3, [sp, #28]
 80082c8:	4606      	mov	r6, r0
 80082ca:	4639      	mov	r1, r7
 80082cc:	9804      	ldr	r0, [sp, #16]
 80082ce:	f7ff faa5 	bl	800781c <quorem>
 80082d2:	4649      	mov	r1, r9
 80082d4:	4605      	mov	r5, r0
 80082d6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80082da:	9804      	ldr	r0, [sp, #16]
 80082dc:	f000 fe9a 	bl	8009014 <__mcmp>
 80082e0:	4632      	mov	r2, r6
 80082e2:	9000      	str	r0, [sp, #0]
 80082e4:	4639      	mov	r1, r7
 80082e6:	4620      	mov	r0, r4
 80082e8:	f000 feae 	bl	8009048 <__mdiff>
 80082ec:	68c3      	ldr	r3, [r0, #12]
 80082ee:	4602      	mov	r2, r0
 80082f0:	bb03      	cbnz	r3, 8008334 <_dtoa_r+0x9fc>
 80082f2:	4601      	mov	r1, r0
 80082f4:	9008      	str	r0, [sp, #32]
 80082f6:	9804      	ldr	r0, [sp, #16]
 80082f8:	f000 fe8c 	bl	8009014 <__mcmp>
 80082fc:	9a08      	ldr	r2, [sp, #32]
 80082fe:	4603      	mov	r3, r0
 8008300:	4611      	mov	r1, r2
 8008302:	4620      	mov	r0, r4
 8008304:	9308      	str	r3, [sp, #32]
 8008306:	f000 fc65 	bl	8008bd4 <_Bfree>
 800830a:	9b08      	ldr	r3, [sp, #32]
 800830c:	b9a3      	cbnz	r3, 8008338 <_dtoa_r+0xa00>
 800830e:	9a06      	ldr	r2, [sp, #24]
 8008310:	b992      	cbnz	r2, 8008338 <_dtoa_r+0xa00>
 8008312:	9a07      	ldr	r2, [sp, #28]
 8008314:	b982      	cbnz	r2, 8008338 <_dtoa_r+0xa00>
 8008316:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800831a:	d029      	beq.n	8008370 <_dtoa_r+0xa38>
 800831c:	9b00      	ldr	r3, [sp, #0]
 800831e:	2b00      	cmp	r3, #0
 8008320:	dd01      	ble.n	8008326 <_dtoa_r+0x9ee>
 8008322:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8008326:	9b05      	ldr	r3, [sp, #20]
 8008328:	1c5d      	adds	r5, r3, #1
 800832a:	f883 8000 	strb.w	r8, [r3]
 800832e:	e782      	b.n	8008236 <_dtoa_r+0x8fe>
 8008330:	4630      	mov	r0, r6
 8008332:	e7c2      	b.n	80082ba <_dtoa_r+0x982>
 8008334:	2301      	movs	r3, #1
 8008336:	e7e3      	b.n	8008300 <_dtoa_r+0x9c8>
 8008338:	9a00      	ldr	r2, [sp, #0]
 800833a:	2a00      	cmp	r2, #0
 800833c:	db04      	blt.n	8008348 <_dtoa_r+0xa10>
 800833e:	d125      	bne.n	800838c <_dtoa_r+0xa54>
 8008340:	9a06      	ldr	r2, [sp, #24]
 8008342:	bb1a      	cbnz	r2, 800838c <_dtoa_r+0xa54>
 8008344:	9a07      	ldr	r2, [sp, #28]
 8008346:	bb0a      	cbnz	r2, 800838c <_dtoa_r+0xa54>
 8008348:	2b00      	cmp	r3, #0
 800834a:	ddec      	ble.n	8008326 <_dtoa_r+0x9ee>
 800834c:	2201      	movs	r2, #1
 800834e:	9904      	ldr	r1, [sp, #16]
 8008350:	4620      	mov	r0, r4
 8008352:	f000 fe0b 	bl	8008f6c <__lshift>
 8008356:	4639      	mov	r1, r7
 8008358:	9004      	str	r0, [sp, #16]
 800835a:	f000 fe5b 	bl	8009014 <__mcmp>
 800835e:	2800      	cmp	r0, #0
 8008360:	dc03      	bgt.n	800836a <_dtoa_r+0xa32>
 8008362:	d1e0      	bne.n	8008326 <_dtoa_r+0x9ee>
 8008364:	f018 0f01 	tst.w	r8, #1
 8008368:	d0dd      	beq.n	8008326 <_dtoa_r+0x9ee>
 800836a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800836e:	d1d8      	bne.n	8008322 <_dtoa_r+0x9ea>
 8008370:	9b05      	ldr	r3, [sp, #20]
 8008372:	9a05      	ldr	r2, [sp, #20]
 8008374:	1c5d      	adds	r5, r3, #1
 8008376:	2339      	movs	r3, #57	; 0x39
 8008378:	7013      	strb	r3, [r2, #0]
 800837a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800837e:	2b39      	cmp	r3, #57	; 0x39
 8008380:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8008384:	d04f      	beq.n	8008426 <_dtoa_r+0xaee>
 8008386:	3301      	adds	r3, #1
 8008388:	7013      	strb	r3, [r2, #0]
 800838a:	e754      	b.n	8008236 <_dtoa_r+0x8fe>
 800838c:	9a05      	ldr	r2, [sp, #20]
 800838e:	2b00      	cmp	r3, #0
 8008390:	f102 0501 	add.w	r5, r2, #1
 8008394:	dd06      	ble.n	80083a4 <_dtoa_r+0xa6c>
 8008396:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800839a:	d0e9      	beq.n	8008370 <_dtoa_r+0xa38>
 800839c:	f108 0801 	add.w	r8, r8, #1
 80083a0:	9b05      	ldr	r3, [sp, #20]
 80083a2:	e7c2      	b.n	800832a <_dtoa_r+0x9f2>
 80083a4:	9a02      	ldr	r2, [sp, #8]
 80083a6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80083aa:	eba5 030b 	sub.w	r3, r5, fp
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d021      	beq.n	80083f6 <_dtoa_r+0xabe>
 80083b2:	2300      	movs	r3, #0
 80083b4:	220a      	movs	r2, #10
 80083b6:	9904      	ldr	r1, [sp, #16]
 80083b8:	4620      	mov	r0, r4
 80083ba:	f000 fc22 	bl	8008c02 <__multadd>
 80083be:	45b1      	cmp	r9, r6
 80083c0:	9004      	str	r0, [sp, #16]
 80083c2:	f04f 0300 	mov.w	r3, #0
 80083c6:	f04f 020a 	mov.w	r2, #10
 80083ca:	4649      	mov	r1, r9
 80083cc:	4620      	mov	r0, r4
 80083ce:	d105      	bne.n	80083dc <_dtoa_r+0xaa4>
 80083d0:	f000 fc17 	bl	8008c02 <__multadd>
 80083d4:	4681      	mov	r9, r0
 80083d6:	4606      	mov	r6, r0
 80083d8:	9505      	str	r5, [sp, #20]
 80083da:	e776      	b.n	80082ca <_dtoa_r+0x992>
 80083dc:	f000 fc11 	bl	8008c02 <__multadd>
 80083e0:	4631      	mov	r1, r6
 80083e2:	4681      	mov	r9, r0
 80083e4:	2300      	movs	r3, #0
 80083e6:	220a      	movs	r2, #10
 80083e8:	4620      	mov	r0, r4
 80083ea:	f000 fc0a 	bl	8008c02 <__multadd>
 80083ee:	4606      	mov	r6, r0
 80083f0:	e7f2      	b.n	80083d8 <_dtoa_r+0xaa0>
 80083f2:	f04f 0900 	mov.w	r9, #0
 80083f6:	2201      	movs	r2, #1
 80083f8:	9904      	ldr	r1, [sp, #16]
 80083fa:	4620      	mov	r0, r4
 80083fc:	f000 fdb6 	bl	8008f6c <__lshift>
 8008400:	4639      	mov	r1, r7
 8008402:	9004      	str	r0, [sp, #16]
 8008404:	f000 fe06 	bl	8009014 <__mcmp>
 8008408:	2800      	cmp	r0, #0
 800840a:	dcb6      	bgt.n	800837a <_dtoa_r+0xa42>
 800840c:	d102      	bne.n	8008414 <_dtoa_r+0xadc>
 800840e:	f018 0f01 	tst.w	r8, #1
 8008412:	d1b2      	bne.n	800837a <_dtoa_r+0xa42>
 8008414:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008418:	2b30      	cmp	r3, #48	; 0x30
 800841a:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800841e:	f47f af0a 	bne.w	8008236 <_dtoa_r+0x8fe>
 8008422:	4615      	mov	r5, r2
 8008424:	e7f6      	b.n	8008414 <_dtoa_r+0xadc>
 8008426:	4593      	cmp	fp, r2
 8008428:	d105      	bne.n	8008436 <_dtoa_r+0xafe>
 800842a:	2331      	movs	r3, #49	; 0x31
 800842c:	f10a 0a01 	add.w	sl, sl, #1
 8008430:	f88b 3000 	strb.w	r3, [fp]
 8008434:	e6ff      	b.n	8008236 <_dtoa_r+0x8fe>
 8008436:	4615      	mov	r5, r2
 8008438:	e79f      	b.n	800837a <_dtoa_r+0xa42>
 800843a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80084a0 <_dtoa_r+0xb68>
 800843e:	e007      	b.n	8008450 <_dtoa_r+0xb18>
 8008440:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008442:	f8df b060 	ldr.w	fp, [pc, #96]	; 80084a4 <_dtoa_r+0xb6c>
 8008446:	b11b      	cbz	r3, 8008450 <_dtoa_r+0xb18>
 8008448:	f10b 0308 	add.w	r3, fp, #8
 800844c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800844e:	6013      	str	r3, [r2, #0]
 8008450:	4658      	mov	r0, fp
 8008452:	b017      	add	sp, #92	; 0x5c
 8008454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008458:	9b06      	ldr	r3, [sp, #24]
 800845a:	2b01      	cmp	r3, #1
 800845c:	f77f ae35 	ble.w	80080ca <_dtoa_r+0x792>
 8008460:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008462:	9307      	str	r3, [sp, #28]
 8008464:	e649      	b.n	80080fa <_dtoa_r+0x7c2>
 8008466:	9b02      	ldr	r3, [sp, #8]
 8008468:	2b00      	cmp	r3, #0
 800846a:	dc03      	bgt.n	8008474 <_dtoa_r+0xb3c>
 800846c:	9b06      	ldr	r3, [sp, #24]
 800846e:	2b02      	cmp	r3, #2
 8008470:	f73f aecc 	bgt.w	800820c <_dtoa_r+0x8d4>
 8008474:	465d      	mov	r5, fp
 8008476:	4639      	mov	r1, r7
 8008478:	9804      	ldr	r0, [sp, #16]
 800847a:	f7ff f9cf 	bl	800781c <quorem>
 800847e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008482:	f805 8b01 	strb.w	r8, [r5], #1
 8008486:	9a02      	ldr	r2, [sp, #8]
 8008488:	eba5 030b 	sub.w	r3, r5, fp
 800848c:	429a      	cmp	r2, r3
 800848e:	ddb0      	ble.n	80083f2 <_dtoa_r+0xaba>
 8008490:	2300      	movs	r3, #0
 8008492:	220a      	movs	r2, #10
 8008494:	9904      	ldr	r1, [sp, #16]
 8008496:	4620      	mov	r0, r4
 8008498:	f000 fbb3 	bl	8008c02 <__multadd>
 800849c:	9004      	str	r0, [sp, #16]
 800849e:	e7ea      	b.n	8008476 <_dtoa_r+0xb3e>
 80084a0:	0800a823 	.word	0x0800a823
 80084a4:	0800a6e8 	.word	0x0800a6e8

080084a8 <rshift>:
 80084a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084aa:	6906      	ldr	r6, [r0, #16]
 80084ac:	114b      	asrs	r3, r1, #5
 80084ae:	429e      	cmp	r6, r3
 80084b0:	f100 0414 	add.w	r4, r0, #20
 80084b4:	dd30      	ble.n	8008518 <rshift+0x70>
 80084b6:	f011 011f 	ands.w	r1, r1, #31
 80084ba:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80084be:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80084c2:	d108      	bne.n	80084d6 <rshift+0x2e>
 80084c4:	4621      	mov	r1, r4
 80084c6:	42b2      	cmp	r2, r6
 80084c8:	460b      	mov	r3, r1
 80084ca:	d211      	bcs.n	80084f0 <rshift+0x48>
 80084cc:	f852 3b04 	ldr.w	r3, [r2], #4
 80084d0:	f841 3b04 	str.w	r3, [r1], #4
 80084d4:	e7f7      	b.n	80084c6 <rshift+0x1e>
 80084d6:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80084da:	f1c1 0c20 	rsb	ip, r1, #32
 80084de:	40cd      	lsrs	r5, r1
 80084e0:	3204      	adds	r2, #4
 80084e2:	4623      	mov	r3, r4
 80084e4:	42b2      	cmp	r2, r6
 80084e6:	4617      	mov	r7, r2
 80084e8:	d30c      	bcc.n	8008504 <rshift+0x5c>
 80084ea:	601d      	str	r5, [r3, #0]
 80084ec:	b105      	cbz	r5, 80084f0 <rshift+0x48>
 80084ee:	3304      	adds	r3, #4
 80084f0:	1b1a      	subs	r2, r3, r4
 80084f2:	42a3      	cmp	r3, r4
 80084f4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80084f8:	bf08      	it	eq
 80084fa:	2300      	moveq	r3, #0
 80084fc:	6102      	str	r2, [r0, #16]
 80084fe:	bf08      	it	eq
 8008500:	6143      	streq	r3, [r0, #20]
 8008502:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008504:	683f      	ldr	r7, [r7, #0]
 8008506:	fa07 f70c 	lsl.w	r7, r7, ip
 800850a:	433d      	orrs	r5, r7
 800850c:	f843 5b04 	str.w	r5, [r3], #4
 8008510:	f852 5b04 	ldr.w	r5, [r2], #4
 8008514:	40cd      	lsrs	r5, r1
 8008516:	e7e5      	b.n	80084e4 <rshift+0x3c>
 8008518:	4623      	mov	r3, r4
 800851a:	e7e9      	b.n	80084f0 <rshift+0x48>

0800851c <__hexdig_fun>:
 800851c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008520:	2b09      	cmp	r3, #9
 8008522:	d802      	bhi.n	800852a <__hexdig_fun+0xe>
 8008524:	3820      	subs	r0, #32
 8008526:	b2c0      	uxtb	r0, r0
 8008528:	4770      	bx	lr
 800852a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800852e:	2b05      	cmp	r3, #5
 8008530:	d801      	bhi.n	8008536 <__hexdig_fun+0x1a>
 8008532:	3847      	subs	r0, #71	; 0x47
 8008534:	e7f7      	b.n	8008526 <__hexdig_fun+0xa>
 8008536:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800853a:	2b05      	cmp	r3, #5
 800853c:	d801      	bhi.n	8008542 <__hexdig_fun+0x26>
 800853e:	3827      	subs	r0, #39	; 0x27
 8008540:	e7f1      	b.n	8008526 <__hexdig_fun+0xa>
 8008542:	2000      	movs	r0, #0
 8008544:	4770      	bx	lr

08008546 <__gethex>:
 8008546:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800854a:	b08b      	sub	sp, #44	; 0x2c
 800854c:	468a      	mov	sl, r1
 800854e:	9002      	str	r0, [sp, #8]
 8008550:	9816      	ldr	r0, [sp, #88]	; 0x58
 8008552:	9306      	str	r3, [sp, #24]
 8008554:	4690      	mov	r8, r2
 8008556:	f000 fadf 	bl	8008b18 <__localeconv_l>
 800855a:	6803      	ldr	r3, [r0, #0]
 800855c:	9303      	str	r3, [sp, #12]
 800855e:	4618      	mov	r0, r3
 8008560:	f7f7 fe3e 	bl	80001e0 <strlen>
 8008564:	9b03      	ldr	r3, [sp, #12]
 8008566:	9001      	str	r0, [sp, #4]
 8008568:	4403      	add	r3, r0
 800856a:	f04f 0b00 	mov.w	fp, #0
 800856e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008572:	9307      	str	r3, [sp, #28]
 8008574:	f8da 3000 	ldr.w	r3, [sl]
 8008578:	3302      	adds	r3, #2
 800857a:	461f      	mov	r7, r3
 800857c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008580:	2830      	cmp	r0, #48	; 0x30
 8008582:	d06c      	beq.n	800865e <__gethex+0x118>
 8008584:	f7ff ffca 	bl	800851c <__hexdig_fun>
 8008588:	4604      	mov	r4, r0
 800858a:	2800      	cmp	r0, #0
 800858c:	d16a      	bne.n	8008664 <__gethex+0x11e>
 800858e:	9a01      	ldr	r2, [sp, #4]
 8008590:	9903      	ldr	r1, [sp, #12]
 8008592:	4638      	mov	r0, r7
 8008594:	f001 fc36 	bl	8009e04 <strncmp>
 8008598:	2800      	cmp	r0, #0
 800859a:	d166      	bne.n	800866a <__gethex+0x124>
 800859c:	9b01      	ldr	r3, [sp, #4]
 800859e:	5cf8      	ldrb	r0, [r7, r3]
 80085a0:	18fe      	adds	r6, r7, r3
 80085a2:	f7ff ffbb 	bl	800851c <__hexdig_fun>
 80085a6:	2800      	cmp	r0, #0
 80085a8:	d062      	beq.n	8008670 <__gethex+0x12a>
 80085aa:	4633      	mov	r3, r6
 80085ac:	7818      	ldrb	r0, [r3, #0]
 80085ae:	2830      	cmp	r0, #48	; 0x30
 80085b0:	461f      	mov	r7, r3
 80085b2:	f103 0301 	add.w	r3, r3, #1
 80085b6:	d0f9      	beq.n	80085ac <__gethex+0x66>
 80085b8:	f7ff ffb0 	bl	800851c <__hexdig_fun>
 80085bc:	fab0 f580 	clz	r5, r0
 80085c0:	096d      	lsrs	r5, r5, #5
 80085c2:	4634      	mov	r4, r6
 80085c4:	f04f 0b01 	mov.w	fp, #1
 80085c8:	463a      	mov	r2, r7
 80085ca:	4616      	mov	r6, r2
 80085cc:	3201      	adds	r2, #1
 80085ce:	7830      	ldrb	r0, [r6, #0]
 80085d0:	f7ff ffa4 	bl	800851c <__hexdig_fun>
 80085d4:	2800      	cmp	r0, #0
 80085d6:	d1f8      	bne.n	80085ca <__gethex+0x84>
 80085d8:	9a01      	ldr	r2, [sp, #4]
 80085da:	9903      	ldr	r1, [sp, #12]
 80085dc:	4630      	mov	r0, r6
 80085de:	f001 fc11 	bl	8009e04 <strncmp>
 80085e2:	b950      	cbnz	r0, 80085fa <__gethex+0xb4>
 80085e4:	b954      	cbnz	r4, 80085fc <__gethex+0xb6>
 80085e6:	9b01      	ldr	r3, [sp, #4]
 80085e8:	18f4      	adds	r4, r6, r3
 80085ea:	4622      	mov	r2, r4
 80085ec:	4616      	mov	r6, r2
 80085ee:	3201      	adds	r2, #1
 80085f0:	7830      	ldrb	r0, [r6, #0]
 80085f2:	f7ff ff93 	bl	800851c <__hexdig_fun>
 80085f6:	2800      	cmp	r0, #0
 80085f8:	d1f8      	bne.n	80085ec <__gethex+0xa6>
 80085fa:	b10c      	cbz	r4, 8008600 <__gethex+0xba>
 80085fc:	1ba4      	subs	r4, r4, r6
 80085fe:	00a4      	lsls	r4, r4, #2
 8008600:	7833      	ldrb	r3, [r6, #0]
 8008602:	2b50      	cmp	r3, #80	; 0x50
 8008604:	d001      	beq.n	800860a <__gethex+0xc4>
 8008606:	2b70      	cmp	r3, #112	; 0x70
 8008608:	d140      	bne.n	800868c <__gethex+0x146>
 800860a:	7873      	ldrb	r3, [r6, #1]
 800860c:	2b2b      	cmp	r3, #43	; 0x2b
 800860e:	d031      	beq.n	8008674 <__gethex+0x12e>
 8008610:	2b2d      	cmp	r3, #45	; 0x2d
 8008612:	d033      	beq.n	800867c <__gethex+0x136>
 8008614:	1c71      	adds	r1, r6, #1
 8008616:	f04f 0900 	mov.w	r9, #0
 800861a:	7808      	ldrb	r0, [r1, #0]
 800861c:	f7ff ff7e 	bl	800851c <__hexdig_fun>
 8008620:	1e43      	subs	r3, r0, #1
 8008622:	b2db      	uxtb	r3, r3
 8008624:	2b18      	cmp	r3, #24
 8008626:	d831      	bhi.n	800868c <__gethex+0x146>
 8008628:	f1a0 0210 	sub.w	r2, r0, #16
 800862c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008630:	f7ff ff74 	bl	800851c <__hexdig_fun>
 8008634:	1e43      	subs	r3, r0, #1
 8008636:	b2db      	uxtb	r3, r3
 8008638:	2b18      	cmp	r3, #24
 800863a:	d922      	bls.n	8008682 <__gethex+0x13c>
 800863c:	f1b9 0f00 	cmp.w	r9, #0
 8008640:	d000      	beq.n	8008644 <__gethex+0xfe>
 8008642:	4252      	negs	r2, r2
 8008644:	4414      	add	r4, r2
 8008646:	f8ca 1000 	str.w	r1, [sl]
 800864a:	b30d      	cbz	r5, 8008690 <__gethex+0x14a>
 800864c:	f1bb 0f00 	cmp.w	fp, #0
 8008650:	bf0c      	ite	eq
 8008652:	2706      	moveq	r7, #6
 8008654:	2700      	movne	r7, #0
 8008656:	4638      	mov	r0, r7
 8008658:	b00b      	add	sp, #44	; 0x2c
 800865a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800865e:	f10b 0b01 	add.w	fp, fp, #1
 8008662:	e78a      	b.n	800857a <__gethex+0x34>
 8008664:	2500      	movs	r5, #0
 8008666:	462c      	mov	r4, r5
 8008668:	e7ae      	b.n	80085c8 <__gethex+0x82>
 800866a:	463e      	mov	r6, r7
 800866c:	2501      	movs	r5, #1
 800866e:	e7c7      	b.n	8008600 <__gethex+0xba>
 8008670:	4604      	mov	r4, r0
 8008672:	e7fb      	b.n	800866c <__gethex+0x126>
 8008674:	f04f 0900 	mov.w	r9, #0
 8008678:	1cb1      	adds	r1, r6, #2
 800867a:	e7ce      	b.n	800861a <__gethex+0xd4>
 800867c:	f04f 0901 	mov.w	r9, #1
 8008680:	e7fa      	b.n	8008678 <__gethex+0x132>
 8008682:	230a      	movs	r3, #10
 8008684:	fb03 0202 	mla	r2, r3, r2, r0
 8008688:	3a10      	subs	r2, #16
 800868a:	e7cf      	b.n	800862c <__gethex+0xe6>
 800868c:	4631      	mov	r1, r6
 800868e:	e7da      	b.n	8008646 <__gethex+0x100>
 8008690:	1bf3      	subs	r3, r6, r7
 8008692:	3b01      	subs	r3, #1
 8008694:	4629      	mov	r1, r5
 8008696:	2b07      	cmp	r3, #7
 8008698:	dc49      	bgt.n	800872e <__gethex+0x1e8>
 800869a:	9802      	ldr	r0, [sp, #8]
 800869c:	f000 fa66 	bl	8008b6c <_Balloc>
 80086a0:	9b01      	ldr	r3, [sp, #4]
 80086a2:	f100 0914 	add.w	r9, r0, #20
 80086a6:	f04f 0b00 	mov.w	fp, #0
 80086aa:	f1c3 0301 	rsb	r3, r3, #1
 80086ae:	4605      	mov	r5, r0
 80086b0:	f8cd 9010 	str.w	r9, [sp, #16]
 80086b4:	46da      	mov	sl, fp
 80086b6:	9308      	str	r3, [sp, #32]
 80086b8:	42b7      	cmp	r7, r6
 80086ba:	d33b      	bcc.n	8008734 <__gethex+0x1ee>
 80086bc:	9804      	ldr	r0, [sp, #16]
 80086be:	f840 ab04 	str.w	sl, [r0], #4
 80086c2:	eba0 0009 	sub.w	r0, r0, r9
 80086c6:	1080      	asrs	r0, r0, #2
 80086c8:	6128      	str	r0, [r5, #16]
 80086ca:	0147      	lsls	r7, r0, #5
 80086cc:	4650      	mov	r0, sl
 80086ce:	f000 fb11 	bl	8008cf4 <__hi0bits>
 80086d2:	f8d8 6000 	ldr.w	r6, [r8]
 80086d6:	1a3f      	subs	r7, r7, r0
 80086d8:	42b7      	cmp	r7, r6
 80086da:	dd64      	ble.n	80087a6 <__gethex+0x260>
 80086dc:	1bbf      	subs	r7, r7, r6
 80086de:	4639      	mov	r1, r7
 80086e0:	4628      	mov	r0, r5
 80086e2:	f000 fe21 	bl	8009328 <__any_on>
 80086e6:	4682      	mov	sl, r0
 80086e8:	b178      	cbz	r0, 800870a <__gethex+0x1c4>
 80086ea:	1e7b      	subs	r3, r7, #1
 80086ec:	1159      	asrs	r1, r3, #5
 80086ee:	f003 021f 	and.w	r2, r3, #31
 80086f2:	f04f 0a01 	mov.w	sl, #1
 80086f6:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80086fa:	fa0a f202 	lsl.w	r2, sl, r2
 80086fe:	420a      	tst	r2, r1
 8008700:	d003      	beq.n	800870a <__gethex+0x1c4>
 8008702:	4553      	cmp	r3, sl
 8008704:	dc46      	bgt.n	8008794 <__gethex+0x24e>
 8008706:	f04f 0a02 	mov.w	sl, #2
 800870a:	4639      	mov	r1, r7
 800870c:	4628      	mov	r0, r5
 800870e:	f7ff fecb 	bl	80084a8 <rshift>
 8008712:	443c      	add	r4, r7
 8008714:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008718:	42a3      	cmp	r3, r4
 800871a:	da52      	bge.n	80087c2 <__gethex+0x27c>
 800871c:	4629      	mov	r1, r5
 800871e:	9802      	ldr	r0, [sp, #8]
 8008720:	f000 fa58 	bl	8008bd4 <_Bfree>
 8008724:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008726:	2300      	movs	r3, #0
 8008728:	6013      	str	r3, [r2, #0]
 800872a:	27a3      	movs	r7, #163	; 0xa3
 800872c:	e793      	b.n	8008656 <__gethex+0x110>
 800872e:	3101      	adds	r1, #1
 8008730:	105b      	asrs	r3, r3, #1
 8008732:	e7b0      	b.n	8008696 <__gethex+0x150>
 8008734:	1e73      	subs	r3, r6, #1
 8008736:	9305      	str	r3, [sp, #20]
 8008738:	9a07      	ldr	r2, [sp, #28]
 800873a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800873e:	4293      	cmp	r3, r2
 8008740:	d018      	beq.n	8008774 <__gethex+0x22e>
 8008742:	f1bb 0f20 	cmp.w	fp, #32
 8008746:	d107      	bne.n	8008758 <__gethex+0x212>
 8008748:	9b04      	ldr	r3, [sp, #16]
 800874a:	f8c3 a000 	str.w	sl, [r3]
 800874e:	3304      	adds	r3, #4
 8008750:	f04f 0a00 	mov.w	sl, #0
 8008754:	9304      	str	r3, [sp, #16]
 8008756:	46d3      	mov	fp, sl
 8008758:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800875c:	f7ff fede 	bl	800851c <__hexdig_fun>
 8008760:	f000 000f 	and.w	r0, r0, #15
 8008764:	fa00 f00b 	lsl.w	r0, r0, fp
 8008768:	ea4a 0a00 	orr.w	sl, sl, r0
 800876c:	f10b 0b04 	add.w	fp, fp, #4
 8008770:	9b05      	ldr	r3, [sp, #20]
 8008772:	e00d      	b.n	8008790 <__gethex+0x24a>
 8008774:	9b05      	ldr	r3, [sp, #20]
 8008776:	9a08      	ldr	r2, [sp, #32]
 8008778:	4413      	add	r3, r2
 800877a:	42bb      	cmp	r3, r7
 800877c:	d3e1      	bcc.n	8008742 <__gethex+0x1fc>
 800877e:	4618      	mov	r0, r3
 8008780:	9a01      	ldr	r2, [sp, #4]
 8008782:	9903      	ldr	r1, [sp, #12]
 8008784:	9309      	str	r3, [sp, #36]	; 0x24
 8008786:	f001 fb3d 	bl	8009e04 <strncmp>
 800878a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800878c:	2800      	cmp	r0, #0
 800878e:	d1d8      	bne.n	8008742 <__gethex+0x1fc>
 8008790:	461e      	mov	r6, r3
 8008792:	e791      	b.n	80086b8 <__gethex+0x172>
 8008794:	1eb9      	subs	r1, r7, #2
 8008796:	4628      	mov	r0, r5
 8008798:	f000 fdc6 	bl	8009328 <__any_on>
 800879c:	2800      	cmp	r0, #0
 800879e:	d0b2      	beq.n	8008706 <__gethex+0x1c0>
 80087a0:	f04f 0a03 	mov.w	sl, #3
 80087a4:	e7b1      	b.n	800870a <__gethex+0x1c4>
 80087a6:	da09      	bge.n	80087bc <__gethex+0x276>
 80087a8:	1bf7      	subs	r7, r6, r7
 80087aa:	4629      	mov	r1, r5
 80087ac:	463a      	mov	r2, r7
 80087ae:	9802      	ldr	r0, [sp, #8]
 80087b0:	f000 fbdc 	bl	8008f6c <__lshift>
 80087b4:	1be4      	subs	r4, r4, r7
 80087b6:	4605      	mov	r5, r0
 80087b8:	f100 0914 	add.w	r9, r0, #20
 80087bc:	f04f 0a00 	mov.w	sl, #0
 80087c0:	e7a8      	b.n	8008714 <__gethex+0x1ce>
 80087c2:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80087c6:	42a0      	cmp	r0, r4
 80087c8:	dd6a      	ble.n	80088a0 <__gethex+0x35a>
 80087ca:	1b04      	subs	r4, r0, r4
 80087cc:	42a6      	cmp	r6, r4
 80087ce:	dc2e      	bgt.n	800882e <__gethex+0x2e8>
 80087d0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80087d4:	2b02      	cmp	r3, #2
 80087d6:	d022      	beq.n	800881e <__gethex+0x2d8>
 80087d8:	2b03      	cmp	r3, #3
 80087da:	d024      	beq.n	8008826 <__gethex+0x2e0>
 80087dc:	2b01      	cmp	r3, #1
 80087de:	d115      	bne.n	800880c <__gethex+0x2c6>
 80087e0:	42a6      	cmp	r6, r4
 80087e2:	d113      	bne.n	800880c <__gethex+0x2c6>
 80087e4:	2e01      	cmp	r6, #1
 80087e6:	dc0b      	bgt.n	8008800 <__gethex+0x2ba>
 80087e8:	9a06      	ldr	r2, [sp, #24]
 80087ea:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80087ee:	6013      	str	r3, [r2, #0]
 80087f0:	2301      	movs	r3, #1
 80087f2:	612b      	str	r3, [r5, #16]
 80087f4:	f8c9 3000 	str.w	r3, [r9]
 80087f8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80087fa:	2762      	movs	r7, #98	; 0x62
 80087fc:	601d      	str	r5, [r3, #0]
 80087fe:	e72a      	b.n	8008656 <__gethex+0x110>
 8008800:	1e71      	subs	r1, r6, #1
 8008802:	4628      	mov	r0, r5
 8008804:	f000 fd90 	bl	8009328 <__any_on>
 8008808:	2800      	cmp	r0, #0
 800880a:	d1ed      	bne.n	80087e8 <__gethex+0x2a2>
 800880c:	4629      	mov	r1, r5
 800880e:	9802      	ldr	r0, [sp, #8]
 8008810:	f000 f9e0 	bl	8008bd4 <_Bfree>
 8008814:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008816:	2300      	movs	r3, #0
 8008818:	6013      	str	r3, [r2, #0]
 800881a:	2750      	movs	r7, #80	; 0x50
 800881c:	e71b      	b.n	8008656 <__gethex+0x110>
 800881e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008820:	2b00      	cmp	r3, #0
 8008822:	d0e1      	beq.n	80087e8 <__gethex+0x2a2>
 8008824:	e7f2      	b.n	800880c <__gethex+0x2c6>
 8008826:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008828:	2b00      	cmp	r3, #0
 800882a:	d1dd      	bne.n	80087e8 <__gethex+0x2a2>
 800882c:	e7ee      	b.n	800880c <__gethex+0x2c6>
 800882e:	1e67      	subs	r7, r4, #1
 8008830:	f1ba 0f00 	cmp.w	sl, #0
 8008834:	d131      	bne.n	800889a <__gethex+0x354>
 8008836:	b127      	cbz	r7, 8008842 <__gethex+0x2fc>
 8008838:	4639      	mov	r1, r7
 800883a:	4628      	mov	r0, r5
 800883c:	f000 fd74 	bl	8009328 <__any_on>
 8008840:	4682      	mov	sl, r0
 8008842:	117a      	asrs	r2, r7, #5
 8008844:	2301      	movs	r3, #1
 8008846:	f007 071f 	and.w	r7, r7, #31
 800884a:	fa03 f707 	lsl.w	r7, r3, r7
 800884e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8008852:	4621      	mov	r1, r4
 8008854:	421f      	tst	r7, r3
 8008856:	4628      	mov	r0, r5
 8008858:	bf18      	it	ne
 800885a:	f04a 0a02 	orrne.w	sl, sl, #2
 800885e:	1b36      	subs	r6, r6, r4
 8008860:	f7ff fe22 	bl	80084a8 <rshift>
 8008864:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8008868:	2702      	movs	r7, #2
 800886a:	f1ba 0f00 	cmp.w	sl, #0
 800886e:	d048      	beq.n	8008902 <__gethex+0x3bc>
 8008870:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008874:	2b02      	cmp	r3, #2
 8008876:	d015      	beq.n	80088a4 <__gethex+0x35e>
 8008878:	2b03      	cmp	r3, #3
 800887a:	d017      	beq.n	80088ac <__gethex+0x366>
 800887c:	2b01      	cmp	r3, #1
 800887e:	d109      	bne.n	8008894 <__gethex+0x34e>
 8008880:	f01a 0f02 	tst.w	sl, #2
 8008884:	d006      	beq.n	8008894 <__gethex+0x34e>
 8008886:	f8d9 3000 	ldr.w	r3, [r9]
 800888a:	ea4a 0a03 	orr.w	sl, sl, r3
 800888e:	f01a 0f01 	tst.w	sl, #1
 8008892:	d10e      	bne.n	80088b2 <__gethex+0x36c>
 8008894:	f047 0710 	orr.w	r7, r7, #16
 8008898:	e033      	b.n	8008902 <__gethex+0x3bc>
 800889a:	f04f 0a01 	mov.w	sl, #1
 800889e:	e7d0      	b.n	8008842 <__gethex+0x2fc>
 80088a0:	2701      	movs	r7, #1
 80088a2:	e7e2      	b.n	800886a <__gethex+0x324>
 80088a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80088a6:	f1c3 0301 	rsb	r3, r3, #1
 80088aa:	9315      	str	r3, [sp, #84]	; 0x54
 80088ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d0f0      	beq.n	8008894 <__gethex+0x34e>
 80088b2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80088b6:	f105 0314 	add.w	r3, r5, #20
 80088ba:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80088be:	eb03 010a 	add.w	r1, r3, sl
 80088c2:	f04f 0c00 	mov.w	ip, #0
 80088c6:	4618      	mov	r0, r3
 80088c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80088cc:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80088d0:	d01c      	beq.n	800890c <__gethex+0x3c6>
 80088d2:	3201      	adds	r2, #1
 80088d4:	6002      	str	r2, [r0, #0]
 80088d6:	2f02      	cmp	r7, #2
 80088d8:	f105 0314 	add.w	r3, r5, #20
 80088dc:	d138      	bne.n	8008950 <__gethex+0x40a>
 80088de:	f8d8 2000 	ldr.w	r2, [r8]
 80088e2:	3a01      	subs	r2, #1
 80088e4:	42b2      	cmp	r2, r6
 80088e6:	d10a      	bne.n	80088fe <__gethex+0x3b8>
 80088e8:	1171      	asrs	r1, r6, #5
 80088ea:	2201      	movs	r2, #1
 80088ec:	f006 061f 	and.w	r6, r6, #31
 80088f0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80088f4:	fa02 f606 	lsl.w	r6, r2, r6
 80088f8:	421e      	tst	r6, r3
 80088fa:	bf18      	it	ne
 80088fc:	4617      	movne	r7, r2
 80088fe:	f047 0720 	orr.w	r7, r7, #32
 8008902:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008904:	601d      	str	r5, [r3, #0]
 8008906:	9b06      	ldr	r3, [sp, #24]
 8008908:	601c      	str	r4, [r3, #0]
 800890a:	e6a4      	b.n	8008656 <__gethex+0x110>
 800890c:	4299      	cmp	r1, r3
 800890e:	f843 cc04 	str.w	ip, [r3, #-4]
 8008912:	d8d8      	bhi.n	80088c6 <__gethex+0x380>
 8008914:	68ab      	ldr	r3, [r5, #8]
 8008916:	4599      	cmp	r9, r3
 8008918:	db12      	blt.n	8008940 <__gethex+0x3fa>
 800891a:	6869      	ldr	r1, [r5, #4]
 800891c:	9802      	ldr	r0, [sp, #8]
 800891e:	3101      	adds	r1, #1
 8008920:	f000 f924 	bl	8008b6c <_Balloc>
 8008924:	692a      	ldr	r2, [r5, #16]
 8008926:	3202      	adds	r2, #2
 8008928:	f105 010c 	add.w	r1, r5, #12
 800892c:	4683      	mov	fp, r0
 800892e:	0092      	lsls	r2, r2, #2
 8008930:	300c      	adds	r0, #12
 8008932:	f7fd fa1f 	bl	8005d74 <memcpy>
 8008936:	4629      	mov	r1, r5
 8008938:	9802      	ldr	r0, [sp, #8]
 800893a:	f000 f94b 	bl	8008bd4 <_Bfree>
 800893e:	465d      	mov	r5, fp
 8008940:	692b      	ldr	r3, [r5, #16]
 8008942:	1c5a      	adds	r2, r3, #1
 8008944:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8008948:	612a      	str	r2, [r5, #16]
 800894a:	2201      	movs	r2, #1
 800894c:	615a      	str	r2, [r3, #20]
 800894e:	e7c2      	b.n	80088d6 <__gethex+0x390>
 8008950:	692a      	ldr	r2, [r5, #16]
 8008952:	454a      	cmp	r2, r9
 8008954:	dd0b      	ble.n	800896e <__gethex+0x428>
 8008956:	2101      	movs	r1, #1
 8008958:	4628      	mov	r0, r5
 800895a:	f7ff fda5 	bl	80084a8 <rshift>
 800895e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008962:	3401      	adds	r4, #1
 8008964:	42a3      	cmp	r3, r4
 8008966:	f6ff aed9 	blt.w	800871c <__gethex+0x1d6>
 800896a:	2701      	movs	r7, #1
 800896c:	e7c7      	b.n	80088fe <__gethex+0x3b8>
 800896e:	f016 061f 	ands.w	r6, r6, #31
 8008972:	d0fa      	beq.n	800896a <__gethex+0x424>
 8008974:	449a      	add	sl, r3
 8008976:	f1c6 0620 	rsb	r6, r6, #32
 800897a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800897e:	f000 f9b9 	bl	8008cf4 <__hi0bits>
 8008982:	42b0      	cmp	r0, r6
 8008984:	dbe7      	blt.n	8008956 <__gethex+0x410>
 8008986:	e7f0      	b.n	800896a <__gethex+0x424>

08008988 <L_shift>:
 8008988:	f1c2 0208 	rsb	r2, r2, #8
 800898c:	0092      	lsls	r2, r2, #2
 800898e:	b570      	push	{r4, r5, r6, lr}
 8008990:	f1c2 0620 	rsb	r6, r2, #32
 8008994:	6843      	ldr	r3, [r0, #4]
 8008996:	6804      	ldr	r4, [r0, #0]
 8008998:	fa03 f506 	lsl.w	r5, r3, r6
 800899c:	432c      	orrs	r4, r5
 800899e:	40d3      	lsrs	r3, r2
 80089a0:	6004      	str	r4, [r0, #0]
 80089a2:	f840 3f04 	str.w	r3, [r0, #4]!
 80089a6:	4288      	cmp	r0, r1
 80089a8:	d3f4      	bcc.n	8008994 <L_shift+0xc>
 80089aa:	bd70      	pop	{r4, r5, r6, pc}

080089ac <__match>:
 80089ac:	b530      	push	{r4, r5, lr}
 80089ae:	6803      	ldr	r3, [r0, #0]
 80089b0:	3301      	adds	r3, #1
 80089b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089b6:	b914      	cbnz	r4, 80089be <__match+0x12>
 80089b8:	6003      	str	r3, [r0, #0]
 80089ba:	2001      	movs	r0, #1
 80089bc:	bd30      	pop	{r4, r5, pc}
 80089be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089c2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80089c6:	2d19      	cmp	r5, #25
 80089c8:	bf98      	it	ls
 80089ca:	3220      	addls	r2, #32
 80089cc:	42a2      	cmp	r2, r4
 80089ce:	d0f0      	beq.n	80089b2 <__match+0x6>
 80089d0:	2000      	movs	r0, #0
 80089d2:	e7f3      	b.n	80089bc <__match+0x10>

080089d4 <__hexnan>:
 80089d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089d8:	680b      	ldr	r3, [r1, #0]
 80089da:	6801      	ldr	r1, [r0, #0]
 80089dc:	115f      	asrs	r7, r3, #5
 80089de:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80089e2:	f013 031f 	ands.w	r3, r3, #31
 80089e6:	b087      	sub	sp, #28
 80089e8:	bf18      	it	ne
 80089ea:	3704      	addne	r7, #4
 80089ec:	2500      	movs	r5, #0
 80089ee:	1f3e      	subs	r6, r7, #4
 80089f0:	4682      	mov	sl, r0
 80089f2:	4690      	mov	r8, r2
 80089f4:	9301      	str	r3, [sp, #4]
 80089f6:	f847 5c04 	str.w	r5, [r7, #-4]
 80089fa:	46b1      	mov	r9, r6
 80089fc:	4634      	mov	r4, r6
 80089fe:	9502      	str	r5, [sp, #8]
 8008a00:	46ab      	mov	fp, r5
 8008a02:	784a      	ldrb	r2, [r1, #1]
 8008a04:	1c4b      	adds	r3, r1, #1
 8008a06:	9303      	str	r3, [sp, #12]
 8008a08:	b342      	cbz	r2, 8008a5c <__hexnan+0x88>
 8008a0a:	4610      	mov	r0, r2
 8008a0c:	9105      	str	r1, [sp, #20]
 8008a0e:	9204      	str	r2, [sp, #16]
 8008a10:	f7ff fd84 	bl	800851c <__hexdig_fun>
 8008a14:	2800      	cmp	r0, #0
 8008a16:	d143      	bne.n	8008aa0 <__hexnan+0xcc>
 8008a18:	9a04      	ldr	r2, [sp, #16]
 8008a1a:	9905      	ldr	r1, [sp, #20]
 8008a1c:	2a20      	cmp	r2, #32
 8008a1e:	d818      	bhi.n	8008a52 <__hexnan+0x7e>
 8008a20:	9b02      	ldr	r3, [sp, #8]
 8008a22:	459b      	cmp	fp, r3
 8008a24:	dd13      	ble.n	8008a4e <__hexnan+0x7a>
 8008a26:	454c      	cmp	r4, r9
 8008a28:	d206      	bcs.n	8008a38 <__hexnan+0x64>
 8008a2a:	2d07      	cmp	r5, #7
 8008a2c:	dc04      	bgt.n	8008a38 <__hexnan+0x64>
 8008a2e:	462a      	mov	r2, r5
 8008a30:	4649      	mov	r1, r9
 8008a32:	4620      	mov	r0, r4
 8008a34:	f7ff ffa8 	bl	8008988 <L_shift>
 8008a38:	4544      	cmp	r4, r8
 8008a3a:	d944      	bls.n	8008ac6 <__hexnan+0xf2>
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	f1a4 0904 	sub.w	r9, r4, #4
 8008a42:	f844 3c04 	str.w	r3, [r4, #-4]
 8008a46:	f8cd b008 	str.w	fp, [sp, #8]
 8008a4a:	464c      	mov	r4, r9
 8008a4c:	461d      	mov	r5, r3
 8008a4e:	9903      	ldr	r1, [sp, #12]
 8008a50:	e7d7      	b.n	8008a02 <__hexnan+0x2e>
 8008a52:	2a29      	cmp	r2, #41	; 0x29
 8008a54:	d14a      	bne.n	8008aec <__hexnan+0x118>
 8008a56:	3102      	adds	r1, #2
 8008a58:	f8ca 1000 	str.w	r1, [sl]
 8008a5c:	f1bb 0f00 	cmp.w	fp, #0
 8008a60:	d044      	beq.n	8008aec <__hexnan+0x118>
 8008a62:	454c      	cmp	r4, r9
 8008a64:	d206      	bcs.n	8008a74 <__hexnan+0xa0>
 8008a66:	2d07      	cmp	r5, #7
 8008a68:	dc04      	bgt.n	8008a74 <__hexnan+0xa0>
 8008a6a:	462a      	mov	r2, r5
 8008a6c:	4649      	mov	r1, r9
 8008a6e:	4620      	mov	r0, r4
 8008a70:	f7ff ff8a 	bl	8008988 <L_shift>
 8008a74:	4544      	cmp	r4, r8
 8008a76:	d928      	bls.n	8008aca <__hexnan+0xf6>
 8008a78:	4643      	mov	r3, r8
 8008a7a:	f854 2b04 	ldr.w	r2, [r4], #4
 8008a7e:	f843 2b04 	str.w	r2, [r3], #4
 8008a82:	42a6      	cmp	r6, r4
 8008a84:	d2f9      	bcs.n	8008a7a <__hexnan+0xa6>
 8008a86:	2200      	movs	r2, #0
 8008a88:	f843 2b04 	str.w	r2, [r3], #4
 8008a8c:	429e      	cmp	r6, r3
 8008a8e:	d2fb      	bcs.n	8008a88 <__hexnan+0xb4>
 8008a90:	6833      	ldr	r3, [r6, #0]
 8008a92:	b91b      	cbnz	r3, 8008a9c <__hexnan+0xc8>
 8008a94:	4546      	cmp	r6, r8
 8008a96:	d127      	bne.n	8008ae8 <__hexnan+0x114>
 8008a98:	2301      	movs	r3, #1
 8008a9a:	6033      	str	r3, [r6, #0]
 8008a9c:	2005      	movs	r0, #5
 8008a9e:	e026      	b.n	8008aee <__hexnan+0x11a>
 8008aa0:	3501      	adds	r5, #1
 8008aa2:	2d08      	cmp	r5, #8
 8008aa4:	f10b 0b01 	add.w	fp, fp, #1
 8008aa8:	dd06      	ble.n	8008ab8 <__hexnan+0xe4>
 8008aaa:	4544      	cmp	r4, r8
 8008aac:	d9cf      	bls.n	8008a4e <__hexnan+0x7a>
 8008aae:	2300      	movs	r3, #0
 8008ab0:	f844 3c04 	str.w	r3, [r4, #-4]
 8008ab4:	2501      	movs	r5, #1
 8008ab6:	3c04      	subs	r4, #4
 8008ab8:	6822      	ldr	r2, [r4, #0]
 8008aba:	f000 000f 	and.w	r0, r0, #15
 8008abe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008ac2:	6020      	str	r0, [r4, #0]
 8008ac4:	e7c3      	b.n	8008a4e <__hexnan+0x7a>
 8008ac6:	2508      	movs	r5, #8
 8008ac8:	e7c1      	b.n	8008a4e <__hexnan+0x7a>
 8008aca:	9b01      	ldr	r3, [sp, #4]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d0df      	beq.n	8008a90 <__hexnan+0xbc>
 8008ad0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008ad4:	f1c3 0320 	rsb	r3, r3, #32
 8008ad8:	fa22 f303 	lsr.w	r3, r2, r3
 8008adc:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8008ae0:	401a      	ands	r2, r3
 8008ae2:	f847 2c04 	str.w	r2, [r7, #-4]
 8008ae6:	e7d3      	b.n	8008a90 <__hexnan+0xbc>
 8008ae8:	3e04      	subs	r6, #4
 8008aea:	e7d1      	b.n	8008a90 <__hexnan+0xbc>
 8008aec:	2004      	movs	r0, #4
 8008aee:	b007      	add	sp, #28
 8008af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008af4 <__locale_ctype_ptr_l>:
 8008af4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8008af8:	4770      	bx	lr
	...

08008afc <__locale_ctype_ptr>:
 8008afc:	4b04      	ldr	r3, [pc, #16]	; (8008b10 <__locale_ctype_ptr+0x14>)
 8008afe:	4a05      	ldr	r2, [pc, #20]	; (8008b14 <__locale_ctype_ptr+0x18>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	6a1b      	ldr	r3, [r3, #32]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	bf08      	it	eq
 8008b08:	4613      	moveq	r3, r2
 8008b0a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8008b0e:	4770      	bx	lr
 8008b10:	20000014 	.word	0x20000014
 8008b14:	20000078 	.word	0x20000078

08008b18 <__localeconv_l>:
 8008b18:	30f0      	adds	r0, #240	; 0xf0
 8008b1a:	4770      	bx	lr

08008b1c <_localeconv_r>:
 8008b1c:	4b04      	ldr	r3, [pc, #16]	; (8008b30 <_localeconv_r+0x14>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	6a18      	ldr	r0, [r3, #32]
 8008b22:	4b04      	ldr	r3, [pc, #16]	; (8008b34 <_localeconv_r+0x18>)
 8008b24:	2800      	cmp	r0, #0
 8008b26:	bf08      	it	eq
 8008b28:	4618      	moveq	r0, r3
 8008b2a:	30f0      	adds	r0, #240	; 0xf0
 8008b2c:	4770      	bx	lr
 8008b2e:	bf00      	nop
 8008b30:	20000014 	.word	0x20000014
 8008b34:	20000078 	.word	0x20000078

08008b38 <malloc>:
 8008b38:	4b02      	ldr	r3, [pc, #8]	; (8008b44 <malloc+0xc>)
 8008b3a:	4601      	mov	r1, r0
 8008b3c:	6818      	ldr	r0, [r3, #0]
 8008b3e:	f000 bc71 	b.w	8009424 <_malloc_r>
 8008b42:	bf00      	nop
 8008b44:	20000014 	.word	0x20000014

08008b48 <__ascii_mbtowc>:
 8008b48:	b082      	sub	sp, #8
 8008b4a:	b901      	cbnz	r1, 8008b4e <__ascii_mbtowc+0x6>
 8008b4c:	a901      	add	r1, sp, #4
 8008b4e:	b142      	cbz	r2, 8008b62 <__ascii_mbtowc+0x1a>
 8008b50:	b14b      	cbz	r3, 8008b66 <__ascii_mbtowc+0x1e>
 8008b52:	7813      	ldrb	r3, [r2, #0]
 8008b54:	600b      	str	r3, [r1, #0]
 8008b56:	7812      	ldrb	r2, [r2, #0]
 8008b58:	1c10      	adds	r0, r2, #0
 8008b5a:	bf18      	it	ne
 8008b5c:	2001      	movne	r0, #1
 8008b5e:	b002      	add	sp, #8
 8008b60:	4770      	bx	lr
 8008b62:	4610      	mov	r0, r2
 8008b64:	e7fb      	b.n	8008b5e <__ascii_mbtowc+0x16>
 8008b66:	f06f 0001 	mvn.w	r0, #1
 8008b6a:	e7f8      	b.n	8008b5e <__ascii_mbtowc+0x16>

08008b6c <_Balloc>:
 8008b6c:	b570      	push	{r4, r5, r6, lr}
 8008b6e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008b70:	4604      	mov	r4, r0
 8008b72:	460e      	mov	r6, r1
 8008b74:	b93d      	cbnz	r5, 8008b86 <_Balloc+0x1a>
 8008b76:	2010      	movs	r0, #16
 8008b78:	f7ff ffde 	bl	8008b38 <malloc>
 8008b7c:	6260      	str	r0, [r4, #36]	; 0x24
 8008b7e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008b82:	6005      	str	r5, [r0, #0]
 8008b84:	60c5      	str	r5, [r0, #12]
 8008b86:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008b88:	68eb      	ldr	r3, [r5, #12]
 8008b8a:	b183      	cbz	r3, 8008bae <_Balloc+0x42>
 8008b8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b8e:	68db      	ldr	r3, [r3, #12]
 8008b90:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008b94:	b9b8      	cbnz	r0, 8008bc6 <_Balloc+0x5a>
 8008b96:	2101      	movs	r1, #1
 8008b98:	fa01 f506 	lsl.w	r5, r1, r6
 8008b9c:	1d6a      	adds	r2, r5, #5
 8008b9e:	0092      	lsls	r2, r2, #2
 8008ba0:	4620      	mov	r0, r4
 8008ba2:	f000 fbe2 	bl	800936a <_calloc_r>
 8008ba6:	b160      	cbz	r0, 8008bc2 <_Balloc+0x56>
 8008ba8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8008bac:	e00e      	b.n	8008bcc <_Balloc+0x60>
 8008bae:	2221      	movs	r2, #33	; 0x21
 8008bb0:	2104      	movs	r1, #4
 8008bb2:	4620      	mov	r0, r4
 8008bb4:	f000 fbd9 	bl	800936a <_calloc_r>
 8008bb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008bba:	60e8      	str	r0, [r5, #12]
 8008bbc:	68db      	ldr	r3, [r3, #12]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d1e4      	bne.n	8008b8c <_Balloc+0x20>
 8008bc2:	2000      	movs	r0, #0
 8008bc4:	bd70      	pop	{r4, r5, r6, pc}
 8008bc6:	6802      	ldr	r2, [r0, #0]
 8008bc8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8008bcc:	2300      	movs	r3, #0
 8008bce:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008bd2:	e7f7      	b.n	8008bc4 <_Balloc+0x58>

08008bd4 <_Bfree>:
 8008bd4:	b570      	push	{r4, r5, r6, lr}
 8008bd6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008bd8:	4606      	mov	r6, r0
 8008bda:	460d      	mov	r5, r1
 8008bdc:	b93c      	cbnz	r4, 8008bee <_Bfree+0x1a>
 8008bde:	2010      	movs	r0, #16
 8008be0:	f7ff ffaa 	bl	8008b38 <malloc>
 8008be4:	6270      	str	r0, [r6, #36]	; 0x24
 8008be6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008bea:	6004      	str	r4, [r0, #0]
 8008bec:	60c4      	str	r4, [r0, #12]
 8008bee:	b13d      	cbz	r5, 8008c00 <_Bfree+0x2c>
 8008bf0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008bf2:	686a      	ldr	r2, [r5, #4]
 8008bf4:	68db      	ldr	r3, [r3, #12]
 8008bf6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008bfa:	6029      	str	r1, [r5, #0]
 8008bfc:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008c00:	bd70      	pop	{r4, r5, r6, pc}

08008c02 <__multadd>:
 8008c02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c06:	690d      	ldr	r5, [r1, #16]
 8008c08:	461f      	mov	r7, r3
 8008c0a:	4606      	mov	r6, r0
 8008c0c:	460c      	mov	r4, r1
 8008c0e:	f101 0c14 	add.w	ip, r1, #20
 8008c12:	2300      	movs	r3, #0
 8008c14:	f8dc 0000 	ldr.w	r0, [ip]
 8008c18:	b281      	uxth	r1, r0
 8008c1a:	fb02 7101 	mla	r1, r2, r1, r7
 8008c1e:	0c0f      	lsrs	r7, r1, #16
 8008c20:	0c00      	lsrs	r0, r0, #16
 8008c22:	fb02 7000 	mla	r0, r2, r0, r7
 8008c26:	b289      	uxth	r1, r1
 8008c28:	3301      	adds	r3, #1
 8008c2a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008c2e:	429d      	cmp	r5, r3
 8008c30:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008c34:	f84c 1b04 	str.w	r1, [ip], #4
 8008c38:	dcec      	bgt.n	8008c14 <__multadd+0x12>
 8008c3a:	b1d7      	cbz	r7, 8008c72 <__multadd+0x70>
 8008c3c:	68a3      	ldr	r3, [r4, #8]
 8008c3e:	42ab      	cmp	r3, r5
 8008c40:	dc12      	bgt.n	8008c68 <__multadd+0x66>
 8008c42:	6861      	ldr	r1, [r4, #4]
 8008c44:	4630      	mov	r0, r6
 8008c46:	3101      	adds	r1, #1
 8008c48:	f7ff ff90 	bl	8008b6c <_Balloc>
 8008c4c:	6922      	ldr	r2, [r4, #16]
 8008c4e:	3202      	adds	r2, #2
 8008c50:	f104 010c 	add.w	r1, r4, #12
 8008c54:	4680      	mov	r8, r0
 8008c56:	0092      	lsls	r2, r2, #2
 8008c58:	300c      	adds	r0, #12
 8008c5a:	f7fd f88b 	bl	8005d74 <memcpy>
 8008c5e:	4621      	mov	r1, r4
 8008c60:	4630      	mov	r0, r6
 8008c62:	f7ff ffb7 	bl	8008bd4 <_Bfree>
 8008c66:	4644      	mov	r4, r8
 8008c68:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008c6c:	3501      	adds	r5, #1
 8008c6e:	615f      	str	r7, [r3, #20]
 8008c70:	6125      	str	r5, [r4, #16]
 8008c72:	4620      	mov	r0, r4
 8008c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008c78 <__s2b>:
 8008c78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c7c:	460c      	mov	r4, r1
 8008c7e:	4615      	mov	r5, r2
 8008c80:	461f      	mov	r7, r3
 8008c82:	2209      	movs	r2, #9
 8008c84:	3308      	adds	r3, #8
 8008c86:	4606      	mov	r6, r0
 8008c88:	fb93 f3f2 	sdiv	r3, r3, r2
 8008c8c:	2100      	movs	r1, #0
 8008c8e:	2201      	movs	r2, #1
 8008c90:	429a      	cmp	r2, r3
 8008c92:	db20      	blt.n	8008cd6 <__s2b+0x5e>
 8008c94:	4630      	mov	r0, r6
 8008c96:	f7ff ff69 	bl	8008b6c <_Balloc>
 8008c9a:	9b08      	ldr	r3, [sp, #32]
 8008c9c:	6143      	str	r3, [r0, #20]
 8008c9e:	2d09      	cmp	r5, #9
 8008ca0:	f04f 0301 	mov.w	r3, #1
 8008ca4:	6103      	str	r3, [r0, #16]
 8008ca6:	dd19      	ble.n	8008cdc <__s2b+0x64>
 8008ca8:	f104 0809 	add.w	r8, r4, #9
 8008cac:	46c1      	mov	r9, r8
 8008cae:	442c      	add	r4, r5
 8008cb0:	f819 3b01 	ldrb.w	r3, [r9], #1
 8008cb4:	4601      	mov	r1, r0
 8008cb6:	3b30      	subs	r3, #48	; 0x30
 8008cb8:	220a      	movs	r2, #10
 8008cba:	4630      	mov	r0, r6
 8008cbc:	f7ff ffa1 	bl	8008c02 <__multadd>
 8008cc0:	45a1      	cmp	r9, r4
 8008cc2:	d1f5      	bne.n	8008cb0 <__s2b+0x38>
 8008cc4:	eb08 0405 	add.w	r4, r8, r5
 8008cc8:	3c08      	subs	r4, #8
 8008cca:	1b2d      	subs	r5, r5, r4
 8008ccc:	1963      	adds	r3, r4, r5
 8008cce:	42bb      	cmp	r3, r7
 8008cd0:	db07      	blt.n	8008ce2 <__s2b+0x6a>
 8008cd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cd6:	0052      	lsls	r2, r2, #1
 8008cd8:	3101      	adds	r1, #1
 8008cda:	e7d9      	b.n	8008c90 <__s2b+0x18>
 8008cdc:	340a      	adds	r4, #10
 8008cde:	2509      	movs	r5, #9
 8008ce0:	e7f3      	b.n	8008cca <__s2b+0x52>
 8008ce2:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008ce6:	4601      	mov	r1, r0
 8008ce8:	3b30      	subs	r3, #48	; 0x30
 8008cea:	220a      	movs	r2, #10
 8008cec:	4630      	mov	r0, r6
 8008cee:	f7ff ff88 	bl	8008c02 <__multadd>
 8008cf2:	e7eb      	b.n	8008ccc <__s2b+0x54>

08008cf4 <__hi0bits>:
 8008cf4:	0c02      	lsrs	r2, r0, #16
 8008cf6:	0412      	lsls	r2, r2, #16
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	b9b2      	cbnz	r2, 8008d2a <__hi0bits+0x36>
 8008cfc:	0403      	lsls	r3, r0, #16
 8008cfe:	2010      	movs	r0, #16
 8008d00:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008d04:	bf04      	itt	eq
 8008d06:	021b      	lsleq	r3, r3, #8
 8008d08:	3008      	addeq	r0, #8
 8008d0a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008d0e:	bf04      	itt	eq
 8008d10:	011b      	lsleq	r3, r3, #4
 8008d12:	3004      	addeq	r0, #4
 8008d14:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008d18:	bf04      	itt	eq
 8008d1a:	009b      	lsleq	r3, r3, #2
 8008d1c:	3002      	addeq	r0, #2
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	db06      	blt.n	8008d30 <__hi0bits+0x3c>
 8008d22:	005b      	lsls	r3, r3, #1
 8008d24:	d503      	bpl.n	8008d2e <__hi0bits+0x3a>
 8008d26:	3001      	adds	r0, #1
 8008d28:	4770      	bx	lr
 8008d2a:	2000      	movs	r0, #0
 8008d2c:	e7e8      	b.n	8008d00 <__hi0bits+0xc>
 8008d2e:	2020      	movs	r0, #32
 8008d30:	4770      	bx	lr

08008d32 <__lo0bits>:
 8008d32:	6803      	ldr	r3, [r0, #0]
 8008d34:	f013 0207 	ands.w	r2, r3, #7
 8008d38:	4601      	mov	r1, r0
 8008d3a:	d00b      	beq.n	8008d54 <__lo0bits+0x22>
 8008d3c:	07da      	lsls	r2, r3, #31
 8008d3e:	d423      	bmi.n	8008d88 <__lo0bits+0x56>
 8008d40:	0798      	lsls	r0, r3, #30
 8008d42:	bf49      	itett	mi
 8008d44:	085b      	lsrmi	r3, r3, #1
 8008d46:	089b      	lsrpl	r3, r3, #2
 8008d48:	2001      	movmi	r0, #1
 8008d4a:	600b      	strmi	r3, [r1, #0]
 8008d4c:	bf5c      	itt	pl
 8008d4e:	600b      	strpl	r3, [r1, #0]
 8008d50:	2002      	movpl	r0, #2
 8008d52:	4770      	bx	lr
 8008d54:	b298      	uxth	r0, r3
 8008d56:	b9a8      	cbnz	r0, 8008d84 <__lo0bits+0x52>
 8008d58:	0c1b      	lsrs	r3, r3, #16
 8008d5a:	2010      	movs	r0, #16
 8008d5c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008d60:	bf04      	itt	eq
 8008d62:	0a1b      	lsreq	r3, r3, #8
 8008d64:	3008      	addeq	r0, #8
 8008d66:	071a      	lsls	r2, r3, #28
 8008d68:	bf04      	itt	eq
 8008d6a:	091b      	lsreq	r3, r3, #4
 8008d6c:	3004      	addeq	r0, #4
 8008d6e:	079a      	lsls	r2, r3, #30
 8008d70:	bf04      	itt	eq
 8008d72:	089b      	lsreq	r3, r3, #2
 8008d74:	3002      	addeq	r0, #2
 8008d76:	07da      	lsls	r2, r3, #31
 8008d78:	d402      	bmi.n	8008d80 <__lo0bits+0x4e>
 8008d7a:	085b      	lsrs	r3, r3, #1
 8008d7c:	d006      	beq.n	8008d8c <__lo0bits+0x5a>
 8008d7e:	3001      	adds	r0, #1
 8008d80:	600b      	str	r3, [r1, #0]
 8008d82:	4770      	bx	lr
 8008d84:	4610      	mov	r0, r2
 8008d86:	e7e9      	b.n	8008d5c <__lo0bits+0x2a>
 8008d88:	2000      	movs	r0, #0
 8008d8a:	4770      	bx	lr
 8008d8c:	2020      	movs	r0, #32
 8008d8e:	4770      	bx	lr

08008d90 <__i2b>:
 8008d90:	b510      	push	{r4, lr}
 8008d92:	460c      	mov	r4, r1
 8008d94:	2101      	movs	r1, #1
 8008d96:	f7ff fee9 	bl	8008b6c <_Balloc>
 8008d9a:	2201      	movs	r2, #1
 8008d9c:	6144      	str	r4, [r0, #20]
 8008d9e:	6102      	str	r2, [r0, #16]
 8008da0:	bd10      	pop	{r4, pc}

08008da2 <__multiply>:
 8008da2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008da6:	4614      	mov	r4, r2
 8008da8:	690a      	ldr	r2, [r1, #16]
 8008daa:	6923      	ldr	r3, [r4, #16]
 8008dac:	429a      	cmp	r2, r3
 8008dae:	bfb8      	it	lt
 8008db0:	460b      	movlt	r3, r1
 8008db2:	4688      	mov	r8, r1
 8008db4:	bfbc      	itt	lt
 8008db6:	46a0      	movlt	r8, r4
 8008db8:	461c      	movlt	r4, r3
 8008dba:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008dbe:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008dc2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008dc6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008dca:	eb07 0609 	add.w	r6, r7, r9
 8008dce:	42b3      	cmp	r3, r6
 8008dd0:	bfb8      	it	lt
 8008dd2:	3101      	addlt	r1, #1
 8008dd4:	f7ff feca 	bl	8008b6c <_Balloc>
 8008dd8:	f100 0514 	add.w	r5, r0, #20
 8008ddc:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8008de0:	462b      	mov	r3, r5
 8008de2:	2200      	movs	r2, #0
 8008de4:	4573      	cmp	r3, lr
 8008de6:	d316      	bcc.n	8008e16 <__multiply+0x74>
 8008de8:	f104 0214 	add.w	r2, r4, #20
 8008dec:	f108 0114 	add.w	r1, r8, #20
 8008df0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8008df4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8008df8:	9300      	str	r3, [sp, #0]
 8008dfa:	9b00      	ldr	r3, [sp, #0]
 8008dfc:	9201      	str	r2, [sp, #4]
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d80c      	bhi.n	8008e1c <__multiply+0x7a>
 8008e02:	2e00      	cmp	r6, #0
 8008e04:	dd03      	ble.n	8008e0e <__multiply+0x6c>
 8008e06:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d05d      	beq.n	8008eca <__multiply+0x128>
 8008e0e:	6106      	str	r6, [r0, #16]
 8008e10:	b003      	add	sp, #12
 8008e12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e16:	f843 2b04 	str.w	r2, [r3], #4
 8008e1a:	e7e3      	b.n	8008de4 <__multiply+0x42>
 8008e1c:	f8b2 b000 	ldrh.w	fp, [r2]
 8008e20:	f1bb 0f00 	cmp.w	fp, #0
 8008e24:	d023      	beq.n	8008e6e <__multiply+0xcc>
 8008e26:	4689      	mov	r9, r1
 8008e28:	46ac      	mov	ip, r5
 8008e2a:	f04f 0800 	mov.w	r8, #0
 8008e2e:	f859 4b04 	ldr.w	r4, [r9], #4
 8008e32:	f8dc a000 	ldr.w	sl, [ip]
 8008e36:	b2a3      	uxth	r3, r4
 8008e38:	fa1f fa8a 	uxth.w	sl, sl
 8008e3c:	fb0b a303 	mla	r3, fp, r3, sl
 8008e40:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008e44:	f8dc 4000 	ldr.w	r4, [ip]
 8008e48:	4443      	add	r3, r8
 8008e4a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008e4e:	fb0b 840a 	mla	r4, fp, sl, r8
 8008e52:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8008e56:	46e2      	mov	sl, ip
 8008e58:	b29b      	uxth	r3, r3
 8008e5a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008e5e:	454f      	cmp	r7, r9
 8008e60:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008e64:	f84a 3b04 	str.w	r3, [sl], #4
 8008e68:	d82b      	bhi.n	8008ec2 <__multiply+0x120>
 8008e6a:	f8cc 8004 	str.w	r8, [ip, #4]
 8008e6e:	9b01      	ldr	r3, [sp, #4]
 8008e70:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8008e74:	3204      	adds	r2, #4
 8008e76:	f1ba 0f00 	cmp.w	sl, #0
 8008e7a:	d020      	beq.n	8008ebe <__multiply+0x11c>
 8008e7c:	682b      	ldr	r3, [r5, #0]
 8008e7e:	4689      	mov	r9, r1
 8008e80:	46a8      	mov	r8, r5
 8008e82:	f04f 0b00 	mov.w	fp, #0
 8008e86:	f8b9 c000 	ldrh.w	ip, [r9]
 8008e8a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008e8e:	fb0a 440c 	mla	r4, sl, ip, r4
 8008e92:	445c      	add	r4, fp
 8008e94:	46c4      	mov	ip, r8
 8008e96:	b29b      	uxth	r3, r3
 8008e98:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008e9c:	f84c 3b04 	str.w	r3, [ip], #4
 8008ea0:	f859 3b04 	ldr.w	r3, [r9], #4
 8008ea4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8008ea8:	0c1b      	lsrs	r3, r3, #16
 8008eaa:	fb0a b303 	mla	r3, sl, r3, fp
 8008eae:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008eb2:	454f      	cmp	r7, r9
 8008eb4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8008eb8:	d805      	bhi.n	8008ec6 <__multiply+0x124>
 8008eba:	f8c8 3004 	str.w	r3, [r8, #4]
 8008ebe:	3504      	adds	r5, #4
 8008ec0:	e79b      	b.n	8008dfa <__multiply+0x58>
 8008ec2:	46d4      	mov	ip, sl
 8008ec4:	e7b3      	b.n	8008e2e <__multiply+0x8c>
 8008ec6:	46e0      	mov	r8, ip
 8008ec8:	e7dd      	b.n	8008e86 <__multiply+0xe4>
 8008eca:	3e01      	subs	r6, #1
 8008ecc:	e799      	b.n	8008e02 <__multiply+0x60>
	...

08008ed0 <__pow5mult>:
 8008ed0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ed4:	4615      	mov	r5, r2
 8008ed6:	f012 0203 	ands.w	r2, r2, #3
 8008eda:	4606      	mov	r6, r0
 8008edc:	460f      	mov	r7, r1
 8008ede:	d007      	beq.n	8008ef0 <__pow5mult+0x20>
 8008ee0:	3a01      	subs	r2, #1
 8008ee2:	4c21      	ldr	r4, [pc, #132]	; (8008f68 <__pow5mult+0x98>)
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008eea:	f7ff fe8a 	bl	8008c02 <__multadd>
 8008eee:	4607      	mov	r7, r0
 8008ef0:	10ad      	asrs	r5, r5, #2
 8008ef2:	d035      	beq.n	8008f60 <__pow5mult+0x90>
 8008ef4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008ef6:	b93c      	cbnz	r4, 8008f08 <__pow5mult+0x38>
 8008ef8:	2010      	movs	r0, #16
 8008efa:	f7ff fe1d 	bl	8008b38 <malloc>
 8008efe:	6270      	str	r0, [r6, #36]	; 0x24
 8008f00:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008f04:	6004      	str	r4, [r0, #0]
 8008f06:	60c4      	str	r4, [r0, #12]
 8008f08:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008f0c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008f10:	b94c      	cbnz	r4, 8008f26 <__pow5mult+0x56>
 8008f12:	f240 2171 	movw	r1, #625	; 0x271
 8008f16:	4630      	mov	r0, r6
 8008f18:	f7ff ff3a 	bl	8008d90 <__i2b>
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008f22:	4604      	mov	r4, r0
 8008f24:	6003      	str	r3, [r0, #0]
 8008f26:	f04f 0800 	mov.w	r8, #0
 8008f2a:	07eb      	lsls	r3, r5, #31
 8008f2c:	d50a      	bpl.n	8008f44 <__pow5mult+0x74>
 8008f2e:	4639      	mov	r1, r7
 8008f30:	4622      	mov	r2, r4
 8008f32:	4630      	mov	r0, r6
 8008f34:	f7ff ff35 	bl	8008da2 <__multiply>
 8008f38:	4639      	mov	r1, r7
 8008f3a:	4681      	mov	r9, r0
 8008f3c:	4630      	mov	r0, r6
 8008f3e:	f7ff fe49 	bl	8008bd4 <_Bfree>
 8008f42:	464f      	mov	r7, r9
 8008f44:	106d      	asrs	r5, r5, #1
 8008f46:	d00b      	beq.n	8008f60 <__pow5mult+0x90>
 8008f48:	6820      	ldr	r0, [r4, #0]
 8008f4a:	b938      	cbnz	r0, 8008f5c <__pow5mult+0x8c>
 8008f4c:	4622      	mov	r2, r4
 8008f4e:	4621      	mov	r1, r4
 8008f50:	4630      	mov	r0, r6
 8008f52:	f7ff ff26 	bl	8008da2 <__multiply>
 8008f56:	6020      	str	r0, [r4, #0]
 8008f58:	f8c0 8000 	str.w	r8, [r0]
 8008f5c:	4604      	mov	r4, r0
 8008f5e:	e7e4      	b.n	8008f2a <__pow5mult+0x5a>
 8008f60:	4638      	mov	r0, r7
 8008f62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f66:	bf00      	nop
 8008f68:	0800a7f0 	.word	0x0800a7f0

08008f6c <__lshift>:
 8008f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f70:	460c      	mov	r4, r1
 8008f72:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008f76:	6923      	ldr	r3, [r4, #16]
 8008f78:	6849      	ldr	r1, [r1, #4]
 8008f7a:	eb0a 0903 	add.w	r9, sl, r3
 8008f7e:	68a3      	ldr	r3, [r4, #8]
 8008f80:	4607      	mov	r7, r0
 8008f82:	4616      	mov	r6, r2
 8008f84:	f109 0501 	add.w	r5, r9, #1
 8008f88:	42ab      	cmp	r3, r5
 8008f8a:	db32      	blt.n	8008ff2 <__lshift+0x86>
 8008f8c:	4638      	mov	r0, r7
 8008f8e:	f7ff fded 	bl	8008b6c <_Balloc>
 8008f92:	2300      	movs	r3, #0
 8008f94:	4680      	mov	r8, r0
 8008f96:	f100 0114 	add.w	r1, r0, #20
 8008f9a:	461a      	mov	r2, r3
 8008f9c:	4553      	cmp	r3, sl
 8008f9e:	db2b      	blt.n	8008ff8 <__lshift+0x8c>
 8008fa0:	6920      	ldr	r0, [r4, #16]
 8008fa2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008fa6:	f104 0314 	add.w	r3, r4, #20
 8008faa:	f016 021f 	ands.w	r2, r6, #31
 8008fae:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008fb2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008fb6:	d025      	beq.n	8009004 <__lshift+0x98>
 8008fb8:	f1c2 0e20 	rsb	lr, r2, #32
 8008fbc:	2000      	movs	r0, #0
 8008fbe:	681e      	ldr	r6, [r3, #0]
 8008fc0:	468a      	mov	sl, r1
 8008fc2:	4096      	lsls	r6, r2
 8008fc4:	4330      	orrs	r0, r6
 8008fc6:	f84a 0b04 	str.w	r0, [sl], #4
 8008fca:	f853 0b04 	ldr.w	r0, [r3], #4
 8008fce:	459c      	cmp	ip, r3
 8008fd0:	fa20 f00e 	lsr.w	r0, r0, lr
 8008fd4:	d814      	bhi.n	8009000 <__lshift+0x94>
 8008fd6:	6048      	str	r0, [r1, #4]
 8008fd8:	b108      	cbz	r0, 8008fde <__lshift+0x72>
 8008fda:	f109 0502 	add.w	r5, r9, #2
 8008fde:	3d01      	subs	r5, #1
 8008fe0:	4638      	mov	r0, r7
 8008fe2:	f8c8 5010 	str.w	r5, [r8, #16]
 8008fe6:	4621      	mov	r1, r4
 8008fe8:	f7ff fdf4 	bl	8008bd4 <_Bfree>
 8008fec:	4640      	mov	r0, r8
 8008fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ff2:	3101      	adds	r1, #1
 8008ff4:	005b      	lsls	r3, r3, #1
 8008ff6:	e7c7      	b.n	8008f88 <__lshift+0x1c>
 8008ff8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008ffc:	3301      	adds	r3, #1
 8008ffe:	e7cd      	b.n	8008f9c <__lshift+0x30>
 8009000:	4651      	mov	r1, sl
 8009002:	e7dc      	b.n	8008fbe <__lshift+0x52>
 8009004:	3904      	subs	r1, #4
 8009006:	f853 2b04 	ldr.w	r2, [r3], #4
 800900a:	f841 2f04 	str.w	r2, [r1, #4]!
 800900e:	459c      	cmp	ip, r3
 8009010:	d8f9      	bhi.n	8009006 <__lshift+0x9a>
 8009012:	e7e4      	b.n	8008fde <__lshift+0x72>

08009014 <__mcmp>:
 8009014:	6903      	ldr	r3, [r0, #16]
 8009016:	690a      	ldr	r2, [r1, #16]
 8009018:	1a9b      	subs	r3, r3, r2
 800901a:	b530      	push	{r4, r5, lr}
 800901c:	d10c      	bne.n	8009038 <__mcmp+0x24>
 800901e:	0092      	lsls	r2, r2, #2
 8009020:	3014      	adds	r0, #20
 8009022:	3114      	adds	r1, #20
 8009024:	1884      	adds	r4, r0, r2
 8009026:	4411      	add	r1, r2
 8009028:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800902c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009030:	4295      	cmp	r5, r2
 8009032:	d003      	beq.n	800903c <__mcmp+0x28>
 8009034:	d305      	bcc.n	8009042 <__mcmp+0x2e>
 8009036:	2301      	movs	r3, #1
 8009038:	4618      	mov	r0, r3
 800903a:	bd30      	pop	{r4, r5, pc}
 800903c:	42a0      	cmp	r0, r4
 800903e:	d3f3      	bcc.n	8009028 <__mcmp+0x14>
 8009040:	e7fa      	b.n	8009038 <__mcmp+0x24>
 8009042:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009046:	e7f7      	b.n	8009038 <__mcmp+0x24>

08009048 <__mdiff>:
 8009048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800904c:	460d      	mov	r5, r1
 800904e:	4607      	mov	r7, r0
 8009050:	4611      	mov	r1, r2
 8009052:	4628      	mov	r0, r5
 8009054:	4614      	mov	r4, r2
 8009056:	f7ff ffdd 	bl	8009014 <__mcmp>
 800905a:	1e06      	subs	r6, r0, #0
 800905c:	d108      	bne.n	8009070 <__mdiff+0x28>
 800905e:	4631      	mov	r1, r6
 8009060:	4638      	mov	r0, r7
 8009062:	f7ff fd83 	bl	8008b6c <_Balloc>
 8009066:	2301      	movs	r3, #1
 8009068:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800906c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009070:	bfa4      	itt	ge
 8009072:	4623      	movge	r3, r4
 8009074:	462c      	movge	r4, r5
 8009076:	4638      	mov	r0, r7
 8009078:	6861      	ldr	r1, [r4, #4]
 800907a:	bfa6      	itte	ge
 800907c:	461d      	movge	r5, r3
 800907e:	2600      	movge	r6, #0
 8009080:	2601      	movlt	r6, #1
 8009082:	f7ff fd73 	bl	8008b6c <_Balloc>
 8009086:	692b      	ldr	r3, [r5, #16]
 8009088:	60c6      	str	r6, [r0, #12]
 800908a:	6926      	ldr	r6, [r4, #16]
 800908c:	f105 0914 	add.w	r9, r5, #20
 8009090:	f104 0214 	add.w	r2, r4, #20
 8009094:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009098:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800909c:	f100 0514 	add.w	r5, r0, #20
 80090a0:	f04f 0e00 	mov.w	lr, #0
 80090a4:	f852 ab04 	ldr.w	sl, [r2], #4
 80090a8:	f859 4b04 	ldr.w	r4, [r9], #4
 80090ac:	fa1e f18a 	uxtah	r1, lr, sl
 80090b0:	b2a3      	uxth	r3, r4
 80090b2:	1ac9      	subs	r1, r1, r3
 80090b4:	0c23      	lsrs	r3, r4, #16
 80090b6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80090ba:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80090be:	b289      	uxth	r1, r1
 80090c0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80090c4:	45c8      	cmp	r8, r9
 80090c6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80090ca:	4694      	mov	ip, r2
 80090cc:	f845 3b04 	str.w	r3, [r5], #4
 80090d0:	d8e8      	bhi.n	80090a4 <__mdiff+0x5c>
 80090d2:	45bc      	cmp	ip, r7
 80090d4:	d304      	bcc.n	80090e0 <__mdiff+0x98>
 80090d6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80090da:	b183      	cbz	r3, 80090fe <__mdiff+0xb6>
 80090dc:	6106      	str	r6, [r0, #16]
 80090de:	e7c5      	b.n	800906c <__mdiff+0x24>
 80090e0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80090e4:	fa1e f381 	uxtah	r3, lr, r1
 80090e8:	141a      	asrs	r2, r3, #16
 80090ea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80090ee:	b29b      	uxth	r3, r3
 80090f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80090f4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80090f8:	f845 3b04 	str.w	r3, [r5], #4
 80090fc:	e7e9      	b.n	80090d2 <__mdiff+0x8a>
 80090fe:	3e01      	subs	r6, #1
 8009100:	e7e9      	b.n	80090d6 <__mdiff+0x8e>
	...

08009104 <__ulp>:
 8009104:	4b12      	ldr	r3, [pc, #72]	; (8009150 <__ulp+0x4c>)
 8009106:	ee10 2a90 	vmov	r2, s1
 800910a:	401a      	ands	r2, r3
 800910c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8009110:	2b00      	cmp	r3, #0
 8009112:	dd04      	ble.n	800911e <__ulp+0x1a>
 8009114:	2000      	movs	r0, #0
 8009116:	4619      	mov	r1, r3
 8009118:	ec41 0b10 	vmov	d0, r0, r1
 800911c:	4770      	bx	lr
 800911e:	425b      	negs	r3, r3
 8009120:	151b      	asrs	r3, r3, #20
 8009122:	2b13      	cmp	r3, #19
 8009124:	f04f 0000 	mov.w	r0, #0
 8009128:	f04f 0100 	mov.w	r1, #0
 800912c:	dc04      	bgt.n	8009138 <__ulp+0x34>
 800912e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8009132:	fa42 f103 	asr.w	r1, r2, r3
 8009136:	e7ef      	b.n	8009118 <__ulp+0x14>
 8009138:	3b14      	subs	r3, #20
 800913a:	2b1e      	cmp	r3, #30
 800913c:	f04f 0201 	mov.w	r2, #1
 8009140:	bfda      	itte	le
 8009142:	f1c3 031f 	rsble	r3, r3, #31
 8009146:	fa02 f303 	lslle.w	r3, r2, r3
 800914a:	4613      	movgt	r3, r2
 800914c:	4618      	mov	r0, r3
 800914e:	e7e3      	b.n	8009118 <__ulp+0x14>
 8009150:	7ff00000 	.word	0x7ff00000

08009154 <__b2d>:
 8009154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009156:	6905      	ldr	r5, [r0, #16]
 8009158:	f100 0714 	add.w	r7, r0, #20
 800915c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009160:	1f2e      	subs	r6, r5, #4
 8009162:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009166:	4620      	mov	r0, r4
 8009168:	f7ff fdc4 	bl	8008cf4 <__hi0bits>
 800916c:	f1c0 0320 	rsb	r3, r0, #32
 8009170:	280a      	cmp	r0, #10
 8009172:	600b      	str	r3, [r1, #0]
 8009174:	f8df c074 	ldr.w	ip, [pc, #116]	; 80091ec <__b2d+0x98>
 8009178:	dc14      	bgt.n	80091a4 <__b2d+0x50>
 800917a:	f1c0 0e0b 	rsb	lr, r0, #11
 800917e:	fa24 f10e 	lsr.w	r1, r4, lr
 8009182:	42b7      	cmp	r7, r6
 8009184:	ea41 030c 	orr.w	r3, r1, ip
 8009188:	bf34      	ite	cc
 800918a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800918e:	2100      	movcs	r1, #0
 8009190:	3015      	adds	r0, #21
 8009192:	fa04 f000 	lsl.w	r0, r4, r0
 8009196:	fa21 f10e 	lsr.w	r1, r1, lr
 800919a:	ea40 0201 	orr.w	r2, r0, r1
 800919e:	ec43 2b10 	vmov	d0, r2, r3
 80091a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091a4:	42b7      	cmp	r7, r6
 80091a6:	bf3a      	itte	cc
 80091a8:	f1a5 0608 	subcc.w	r6, r5, #8
 80091ac:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80091b0:	2100      	movcs	r1, #0
 80091b2:	380b      	subs	r0, #11
 80091b4:	d015      	beq.n	80091e2 <__b2d+0x8e>
 80091b6:	4084      	lsls	r4, r0
 80091b8:	f1c0 0520 	rsb	r5, r0, #32
 80091bc:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80091c0:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80091c4:	42be      	cmp	r6, r7
 80091c6:	fa21 fc05 	lsr.w	ip, r1, r5
 80091ca:	ea44 030c 	orr.w	r3, r4, ip
 80091ce:	bf8c      	ite	hi
 80091d0:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80091d4:	2400      	movls	r4, #0
 80091d6:	fa01 f000 	lsl.w	r0, r1, r0
 80091da:	40ec      	lsrs	r4, r5
 80091dc:	ea40 0204 	orr.w	r2, r0, r4
 80091e0:	e7dd      	b.n	800919e <__b2d+0x4a>
 80091e2:	ea44 030c 	orr.w	r3, r4, ip
 80091e6:	460a      	mov	r2, r1
 80091e8:	e7d9      	b.n	800919e <__b2d+0x4a>
 80091ea:	bf00      	nop
 80091ec:	3ff00000 	.word	0x3ff00000

080091f0 <__d2b>:
 80091f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80091f4:	460e      	mov	r6, r1
 80091f6:	2101      	movs	r1, #1
 80091f8:	ec59 8b10 	vmov	r8, r9, d0
 80091fc:	4615      	mov	r5, r2
 80091fe:	f7ff fcb5 	bl	8008b6c <_Balloc>
 8009202:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009206:	4607      	mov	r7, r0
 8009208:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800920c:	bb34      	cbnz	r4, 800925c <__d2b+0x6c>
 800920e:	9301      	str	r3, [sp, #4]
 8009210:	f1b8 0300 	subs.w	r3, r8, #0
 8009214:	d027      	beq.n	8009266 <__d2b+0x76>
 8009216:	a802      	add	r0, sp, #8
 8009218:	f840 3d08 	str.w	r3, [r0, #-8]!
 800921c:	f7ff fd89 	bl	8008d32 <__lo0bits>
 8009220:	9900      	ldr	r1, [sp, #0]
 8009222:	b1f0      	cbz	r0, 8009262 <__d2b+0x72>
 8009224:	9a01      	ldr	r2, [sp, #4]
 8009226:	f1c0 0320 	rsb	r3, r0, #32
 800922a:	fa02 f303 	lsl.w	r3, r2, r3
 800922e:	430b      	orrs	r3, r1
 8009230:	40c2      	lsrs	r2, r0
 8009232:	617b      	str	r3, [r7, #20]
 8009234:	9201      	str	r2, [sp, #4]
 8009236:	9b01      	ldr	r3, [sp, #4]
 8009238:	61bb      	str	r3, [r7, #24]
 800923a:	2b00      	cmp	r3, #0
 800923c:	bf14      	ite	ne
 800923e:	2102      	movne	r1, #2
 8009240:	2101      	moveq	r1, #1
 8009242:	6139      	str	r1, [r7, #16]
 8009244:	b1c4      	cbz	r4, 8009278 <__d2b+0x88>
 8009246:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800924a:	4404      	add	r4, r0
 800924c:	6034      	str	r4, [r6, #0]
 800924e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009252:	6028      	str	r0, [r5, #0]
 8009254:	4638      	mov	r0, r7
 8009256:	b003      	add	sp, #12
 8009258:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800925c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009260:	e7d5      	b.n	800920e <__d2b+0x1e>
 8009262:	6179      	str	r1, [r7, #20]
 8009264:	e7e7      	b.n	8009236 <__d2b+0x46>
 8009266:	a801      	add	r0, sp, #4
 8009268:	f7ff fd63 	bl	8008d32 <__lo0bits>
 800926c:	9b01      	ldr	r3, [sp, #4]
 800926e:	617b      	str	r3, [r7, #20]
 8009270:	2101      	movs	r1, #1
 8009272:	6139      	str	r1, [r7, #16]
 8009274:	3020      	adds	r0, #32
 8009276:	e7e5      	b.n	8009244 <__d2b+0x54>
 8009278:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800927c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009280:	6030      	str	r0, [r6, #0]
 8009282:	6918      	ldr	r0, [r3, #16]
 8009284:	f7ff fd36 	bl	8008cf4 <__hi0bits>
 8009288:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800928c:	e7e1      	b.n	8009252 <__d2b+0x62>

0800928e <__ratio>:
 800928e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009292:	4688      	mov	r8, r1
 8009294:	4669      	mov	r1, sp
 8009296:	4681      	mov	r9, r0
 8009298:	f7ff ff5c 	bl	8009154 <__b2d>
 800929c:	a901      	add	r1, sp, #4
 800929e:	4640      	mov	r0, r8
 80092a0:	ec57 6b10 	vmov	r6, r7, d0
 80092a4:	f7ff ff56 	bl	8009154 <__b2d>
 80092a8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80092ac:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80092b0:	eba3 0c02 	sub.w	ip, r3, r2
 80092b4:	e9dd 3200 	ldrd	r3, r2, [sp]
 80092b8:	1a9b      	subs	r3, r3, r2
 80092ba:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80092be:	ec5b ab10 	vmov	sl, fp, d0
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	bfce      	itee	gt
 80092c6:	463a      	movgt	r2, r7
 80092c8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80092cc:	465a      	movle	r2, fp
 80092ce:	4659      	mov	r1, fp
 80092d0:	463d      	mov	r5, r7
 80092d2:	bfd4      	ite	le
 80092d4:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 80092d8:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 80092dc:	4630      	mov	r0, r6
 80092de:	ee10 2a10 	vmov	r2, s0
 80092e2:	460b      	mov	r3, r1
 80092e4:	4629      	mov	r1, r5
 80092e6:	f7f7 fab9 	bl	800085c <__aeabi_ddiv>
 80092ea:	ec41 0b10 	vmov	d0, r0, r1
 80092ee:	b003      	add	sp, #12
 80092f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080092f4 <__copybits>:
 80092f4:	3901      	subs	r1, #1
 80092f6:	b510      	push	{r4, lr}
 80092f8:	1149      	asrs	r1, r1, #5
 80092fa:	6914      	ldr	r4, [r2, #16]
 80092fc:	3101      	adds	r1, #1
 80092fe:	f102 0314 	add.w	r3, r2, #20
 8009302:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009306:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800930a:	42a3      	cmp	r3, r4
 800930c:	4602      	mov	r2, r0
 800930e:	d303      	bcc.n	8009318 <__copybits+0x24>
 8009310:	2300      	movs	r3, #0
 8009312:	428a      	cmp	r2, r1
 8009314:	d305      	bcc.n	8009322 <__copybits+0x2e>
 8009316:	bd10      	pop	{r4, pc}
 8009318:	f853 2b04 	ldr.w	r2, [r3], #4
 800931c:	f840 2b04 	str.w	r2, [r0], #4
 8009320:	e7f3      	b.n	800930a <__copybits+0x16>
 8009322:	f842 3b04 	str.w	r3, [r2], #4
 8009326:	e7f4      	b.n	8009312 <__copybits+0x1e>

08009328 <__any_on>:
 8009328:	f100 0214 	add.w	r2, r0, #20
 800932c:	6900      	ldr	r0, [r0, #16]
 800932e:	114b      	asrs	r3, r1, #5
 8009330:	4298      	cmp	r0, r3
 8009332:	b510      	push	{r4, lr}
 8009334:	db11      	blt.n	800935a <__any_on+0x32>
 8009336:	dd0a      	ble.n	800934e <__any_on+0x26>
 8009338:	f011 011f 	ands.w	r1, r1, #31
 800933c:	d007      	beq.n	800934e <__any_on+0x26>
 800933e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009342:	fa24 f001 	lsr.w	r0, r4, r1
 8009346:	fa00 f101 	lsl.w	r1, r0, r1
 800934a:	428c      	cmp	r4, r1
 800934c:	d10b      	bne.n	8009366 <__any_on+0x3e>
 800934e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009352:	4293      	cmp	r3, r2
 8009354:	d803      	bhi.n	800935e <__any_on+0x36>
 8009356:	2000      	movs	r0, #0
 8009358:	bd10      	pop	{r4, pc}
 800935a:	4603      	mov	r3, r0
 800935c:	e7f7      	b.n	800934e <__any_on+0x26>
 800935e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009362:	2900      	cmp	r1, #0
 8009364:	d0f5      	beq.n	8009352 <__any_on+0x2a>
 8009366:	2001      	movs	r0, #1
 8009368:	e7f6      	b.n	8009358 <__any_on+0x30>

0800936a <_calloc_r>:
 800936a:	b538      	push	{r3, r4, r5, lr}
 800936c:	fb02 f401 	mul.w	r4, r2, r1
 8009370:	4621      	mov	r1, r4
 8009372:	f000 f857 	bl	8009424 <_malloc_r>
 8009376:	4605      	mov	r5, r0
 8009378:	b118      	cbz	r0, 8009382 <_calloc_r+0x18>
 800937a:	4622      	mov	r2, r4
 800937c:	2100      	movs	r1, #0
 800937e:	f7fc fd04 	bl	8005d8a <memset>
 8009382:	4628      	mov	r0, r5
 8009384:	bd38      	pop	{r3, r4, r5, pc}
	...

08009388 <_free_r>:
 8009388:	b538      	push	{r3, r4, r5, lr}
 800938a:	4605      	mov	r5, r0
 800938c:	2900      	cmp	r1, #0
 800938e:	d045      	beq.n	800941c <_free_r+0x94>
 8009390:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009394:	1f0c      	subs	r4, r1, #4
 8009396:	2b00      	cmp	r3, #0
 8009398:	bfb8      	it	lt
 800939a:	18e4      	addlt	r4, r4, r3
 800939c:	f000 fe30 	bl	800a000 <__malloc_lock>
 80093a0:	4a1f      	ldr	r2, [pc, #124]	; (8009420 <_free_r+0x98>)
 80093a2:	6813      	ldr	r3, [r2, #0]
 80093a4:	4610      	mov	r0, r2
 80093a6:	b933      	cbnz	r3, 80093b6 <_free_r+0x2e>
 80093a8:	6063      	str	r3, [r4, #4]
 80093aa:	6014      	str	r4, [r2, #0]
 80093ac:	4628      	mov	r0, r5
 80093ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80093b2:	f000 be26 	b.w	800a002 <__malloc_unlock>
 80093b6:	42a3      	cmp	r3, r4
 80093b8:	d90c      	bls.n	80093d4 <_free_r+0x4c>
 80093ba:	6821      	ldr	r1, [r4, #0]
 80093bc:	1862      	adds	r2, r4, r1
 80093be:	4293      	cmp	r3, r2
 80093c0:	bf04      	itt	eq
 80093c2:	681a      	ldreq	r2, [r3, #0]
 80093c4:	685b      	ldreq	r3, [r3, #4]
 80093c6:	6063      	str	r3, [r4, #4]
 80093c8:	bf04      	itt	eq
 80093ca:	1852      	addeq	r2, r2, r1
 80093cc:	6022      	streq	r2, [r4, #0]
 80093ce:	6004      	str	r4, [r0, #0]
 80093d0:	e7ec      	b.n	80093ac <_free_r+0x24>
 80093d2:	4613      	mov	r3, r2
 80093d4:	685a      	ldr	r2, [r3, #4]
 80093d6:	b10a      	cbz	r2, 80093dc <_free_r+0x54>
 80093d8:	42a2      	cmp	r2, r4
 80093da:	d9fa      	bls.n	80093d2 <_free_r+0x4a>
 80093dc:	6819      	ldr	r1, [r3, #0]
 80093de:	1858      	adds	r0, r3, r1
 80093e0:	42a0      	cmp	r0, r4
 80093e2:	d10b      	bne.n	80093fc <_free_r+0x74>
 80093e4:	6820      	ldr	r0, [r4, #0]
 80093e6:	4401      	add	r1, r0
 80093e8:	1858      	adds	r0, r3, r1
 80093ea:	4282      	cmp	r2, r0
 80093ec:	6019      	str	r1, [r3, #0]
 80093ee:	d1dd      	bne.n	80093ac <_free_r+0x24>
 80093f0:	6810      	ldr	r0, [r2, #0]
 80093f2:	6852      	ldr	r2, [r2, #4]
 80093f4:	605a      	str	r2, [r3, #4]
 80093f6:	4401      	add	r1, r0
 80093f8:	6019      	str	r1, [r3, #0]
 80093fa:	e7d7      	b.n	80093ac <_free_r+0x24>
 80093fc:	d902      	bls.n	8009404 <_free_r+0x7c>
 80093fe:	230c      	movs	r3, #12
 8009400:	602b      	str	r3, [r5, #0]
 8009402:	e7d3      	b.n	80093ac <_free_r+0x24>
 8009404:	6820      	ldr	r0, [r4, #0]
 8009406:	1821      	adds	r1, r4, r0
 8009408:	428a      	cmp	r2, r1
 800940a:	bf04      	itt	eq
 800940c:	6811      	ldreq	r1, [r2, #0]
 800940e:	6852      	ldreq	r2, [r2, #4]
 8009410:	6062      	str	r2, [r4, #4]
 8009412:	bf04      	itt	eq
 8009414:	1809      	addeq	r1, r1, r0
 8009416:	6021      	streq	r1, [r4, #0]
 8009418:	605c      	str	r4, [r3, #4]
 800941a:	e7c7      	b.n	80093ac <_free_r+0x24>
 800941c:	bd38      	pop	{r3, r4, r5, pc}
 800941e:	bf00      	nop
 8009420:	200002c0 	.word	0x200002c0

08009424 <_malloc_r>:
 8009424:	b570      	push	{r4, r5, r6, lr}
 8009426:	1ccd      	adds	r5, r1, #3
 8009428:	f025 0503 	bic.w	r5, r5, #3
 800942c:	3508      	adds	r5, #8
 800942e:	2d0c      	cmp	r5, #12
 8009430:	bf38      	it	cc
 8009432:	250c      	movcc	r5, #12
 8009434:	2d00      	cmp	r5, #0
 8009436:	4606      	mov	r6, r0
 8009438:	db01      	blt.n	800943e <_malloc_r+0x1a>
 800943a:	42a9      	cmp	r1, r5
 800943c:	d903      	bls.n	8009446 <_malloc_r+0x22>
 800943e:	230c      	movs	r3, #12
 8009440:	6033      	str	r3, [r6, #0]
 8009442:	2000      	movs	r0, #0
 8009444:	bd70      	pop	{r4, r5, r6, pc}
 8009446:	f000 fddb 	bl	800a000 <__malloc_lock>
 800944a:	4a21      	ldr	r2, [pc, #132]	; (80094d0 <_malloc_r+0xac>)
 800944c:	6814      	ldr	r4, [r2, #0]
 800944e:	4621      	mov	r1, r4
 8009450:	b991      	cbnz	r1, 8009478 <_malloc_r+0x54>
 8009452:	4c20      	ldr	r4, [pc, #128]	; (80094d4 <_malloc_r+0xb0>)
 8009454:	6823      	ldr	r3, [r4, #0]
 8009456:	b91b      	cbnz	r3, 8009460 <_malloc_r+0x3c>
 8009458:	4630      	mov	r0, r6
 800945a:	f000 fc91 	bl	8009d80 <_sbrk_r>
 800945e:	6020      	str	r0, [r4, #0]
 8009460:	4629      	mov	r1, r5
 8009462:	4630      	mov	r0, r6
 8009464:	f000 fc8c 	bl	8009d80 <_sbrk_r>
 8009468:	1c43      	adds	r3, r0, #1
 800946a:	d124      	bne.n	80094b6 <_malloc_r+0x92>
 800946c:	230c      	movs	r3, #12
 800946e:	6033      	str	r3, [r6, #0]
 8009470:	4630      	mov	r0, r6
 8009472:	f000 fdc6 	bl	800a002 <__malloc_unlock>
 8009476:	e7e4      	b.n	8009442 <_malloc_r+0x1e>
 8009478:	680b      	ldr	r3, [r1, #0]
 800947a:	1b5b      	subs	r3, r3, r5
 800947c:	d418      	bmi.n	80094b0 <_malloc_r+0x8c>
 800947e:	2b0b      	cmp	r3, #11
 8009480:	d90f      	bls.n	80094a2 <_malloc_r+0x7e>
 8009482:	600b      	str	r3, [r1, #0]
 8009484:	50cd      	str	r5, [r1, r3]
 8009486:	18cc      	adds	r4, r1, r3
 8009488:	4630      	mov	r0, r6
 800948a:	f000 fdba 	bl	800a002 <__malloc_unlock>
 800948e:	f104 000b 	add.w	r0, r4, #11
 8009492:	1d23      	adds	r3, r4, #4
 8009494:	f020 0007 	bic.w	r0, r0, #7
 8009498:	1ac3      	subs	r3, r0, r3
 800949a:	d0d3      	beq.n	8009444 <_malloc_r+0x20>
 800949c:	425a      	negs	r2, r3
 800949e:	50e2      	str	r2, [r4, r3]
 80094a0:	e7d0      	b.n	8009444 <_malloc_r+0x20>
 80094a2:	428c      	cmp	r4, r1
 80094a4:	684b      	ldr	r3, [r1, #4]
 80094a6:	bf16      	itet	ne
 80094a8:	6063      	strne	r3, [r4, #4]
 80094aa:	6013      	streq	r3, [r2, #0]
 80094ac:	460c      	movne	r4, r1
 80094ae:	e7eb      	b.n	8009488 <_malloc_r+0x64>
 80094b0:	460c      	mov	r4, r1
 80094b2:	6849      	ldr	r1, [r1, #4]
 80094b4:	e7cc      	b.n	8009450 <_malloc_r+0x2c>
 80094b6:	1cc4      	adds	r4, r0, #3
 80094b8:	f024 0403 	bic.w	r4, r4, #3
 80094bc:	42a0      	cmp	r0, r4
 80094be:	d005      	beq.n	80094cc <_malloc_r+0xa8>
 80094c0:	1a21      	subs	r1, r4, r0
 80094c2:	4630      	mov	r0, r6
 80094c4:	f000 fc5c 	bl	8009d80 <_sbrk_r>
 80094c8:	3001      	adds	r0, #1
 80094ca:	d0cf      	beq.n	800946c <_malloc_r+0x48>
 80094cc:	6025      	str	r5, [r4, #0]
 80094ce:	e7db      	b.n	8009488 <_malloc_r+0x64>
 80094d0:	200002c0 	.word	0x200002c0
 80094d4:	200002c4 	.word	0x200002c4

080094d8 <__ssputs_r>:
 80094d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094dc:	688e      	ldr	r6, [r1, #8]
 80094de:	429e      	cmp	r6, r3
 80094e0:	4682      	mov	sl, r0
 80094e2:	460c      	mov	r4, r1
 80094e4:	4690      	mov	r8, r2
 80094e6:	4699      	mov	r9, r3
 80094e8:	d837      	bhi.n	800955a <__ssputs_r+0x82>
 80094ea:	898a      	ldrh	r2, [r1, #12]
 80094ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80094f0:	d031      	beq.n	8009556 <__ssputs_r+0x7e>
 80094f2:	6825      	ldr	r5, [r4, #0]
 80094f4:	6909      	ldr	r1, [r1, #16]
 80094f6:	1a6f      	subs	r7, r5, r1
 80094f8:	6965      	ldr	r5, [r4, #20]
 80094fa:	2302      	movs	r3, #2
 80094fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009500:	fb95 f5f3 	sdiv	r5, r5, r3
 8009504:	f109 0301 	add.w	r3, r9, #1
 8009508:	443b      	add	r3, r7
 800950a:	429d      	cmp	r5, r3
 800950c:	bf38      	it	cc
 800950e:	461d      	movcc	r5, r3
 8009510:	0553      	lsls	r3, r2, #21
 8009512:	d530      	bpl.n	8009576 <__ssputs_r+0x9e>
 8009514:	4629      	mov	r1, r5
 8009516:	f7ff ff85 	bl	8009424 <_malloc_r>
 800951a:	4606      	mov	r6, r0
 800951c:	b950      	cbnz	r0, 8009534 <__ssputs_r+0x5c>
 800951e:	230c      	movs	r3, #12
 8009520:	f8ca 3000 	str.w	r3, [sl]
 8009524:	89a3      	ldrh	r3, [r4, #12]
 8009526:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800952a:	81a3      	strh	r3, [r4, #12]
 800952c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009530:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009534:	463a      	mov	r2, r7
 8009536:	6921      	ldr	r1, [r4, #16]
 8009538:	f7fc fc1c 	bl	8005d74 <memcpy>
 800953c:	89a3      	ldrh	r3, [r4, #12]
 800953e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009542:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009546:	81a3      	strh	r3, [r4, #12]
 8009548:	6126      	str	r6, [r4, #16]
 800954a:	6165      	str	r5, [r4, #20]
 800954c:	443e      	add	r6, r7
 800954e:	1bed      	subs	r5, r5, r7
 8009550:	6026      	str	r6, [r4, #0]
 8009552:	60a5      	str	r5, [r4, #8]
 8009554:	464e      	mov	r6, r9
 8009556:	454e      	cmp	r6, r9
 8009558:	d900      	bls.n	800955c <__ssputs_r+0x84>
 800955a:	464e      	mov	r6, r9
 800955c:	4632      	mov	r2, r6
 800955e:	4641      	mov	r1, r8
 8009560:	6820      	ldr	r0, [r4, #0]
 8009562:	f000 fd34 	bl	8009fce <memmove>
 8009566:	68a3      	ldr	r3, [r4, #8]
 8009568:	1b9b      	subs	r3, r3, r6
 800956a:	60a3      	str	r3, [r4, #8]
 800956c:	6823      	ldr	r3, [r4, #0]
 800956e:	441e      	add	r6, r3
 8009570:	6026      	str	r6, [r4, #0]
 8009572:	2000      	movs	r0, #0
 8009574:	e7dc      	b.n	8009530 <__ssputs_r+0x58>
 8009576:	462a      	mov	r2, r5
 8009578:	f000 fd44 	bl	800a004 <_realloc_r>
 800957c:	4606      	mov	r6, r0
 800957e:	2800      	cmp	r0, #0
 8009580:	d1e2      	bne.n	8009548 <__ssputs_r+0x70>
 8009582:	6921      	ldr	r1, [r4, #16]
 8009584:	4650      	mov	r0, sl
 8009586:	f7ff feff 	bl	8009388 <_free_r>
 800958a:	e7c8      	b.n	800951e <__ssputs_r+0x46>

0800958c <_svfiprintf_r>:
 800958c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009590:	461d      	mov	r5, r3
 8009592:	898b      	ldrh	r3, [r1, #12]
 8009594:	061f      	lsls	r7, r3, #24
 8009596:	b09d      	sub	sp, #116	; 0x74
 8009598:	4680      	mov	r8, r0
 800959a:	460c      	mov	r4, r1
 800959c:	4616      	mov	r6, r2
 800959e:	d50f      	bpl.n	80095c0 <_svfiprintf_r+0x34>
 80095a0:	690b      	ldr	r3, [r1, #16]
 80095a2:	b96b      	cbnz	r3, 80095c0 <_svfiprintf_r+0x34>
 80095a4:	2140      	movs	r1, #64	; 0x40
 80095a6:	f7ff ff3d 	bl	8009424 <_malloc_r>
 80095aa:	6020      	str	r0, [r4, #0]
 80095ac:	6120      	str	r0, [r4, #16]
 80095ae:	b928      	cbnz	r0, 80095bc <_svfiprintf_r+0x30>
 80095b0:	230c      	movs	r3, #12
 80095b2:	f8c8 3000 	str.w	r3, [r8]
 80095b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80095ba:	e0c8      	b.n	800974e <_svfiprintf_r+0x1c2>
 80095bc:	2340      	movs	r3, #64	; 0x40
 80095be:	6163      	str	r3, [r4, #20]
 80095c0:	2300      	movs	r3, #0
 80095c2:	9309      	str	r3, [sp, #36]	; 0x24
 80095c4:	2320      	movs	r3, #32
 80095c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80095ca:	2330      	movs	r3, #48	; 0x30
 80095cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80095d0:	9503      	str	r5, [sp, #12]
 80095d2:	f04f 0b01 	mov.w	fp, #1
 80095d6:	4637      	mov	r7, r6
 80095d8:	463d      	mov	r5, r7
 80095da:	f815 3b01 	ldrb.w	r3, [r5], #1
 80095de:	b10b      	cbz	r3, 80095e4 <_svfiprintf_r+0x58>
 80095e0:	2b25      	cmp	r3, #37	; 0x25
 80095e2:	d13e      	bne.n	8009662 <_svfiprintf_r+0xd6>
 80095e4:	ebb7 0a06 	subs.w	sl, r7, r6
 80095e8:	d00b      	beq.n	8009602 <_svfiprintf_r+0x76>
 80095ea:	4653      	mov	r3, sl
 80095ec:	4632      	mov	r2, r6
 80095ee:	4621      	mov	r1, r4
 80095f0:	4640      	mov	r0, r8
 80095f2:	f7ff ff71 	bl	80094d8 <__ssputs_r>
 80095f6:	3001      	adds	r0, #1
 80095f8:	f000 80a4 	beq.w	8009744 <_svfiprintf_r+0x1b8>
 80095fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095fe:	4453      	add	r3, sl
 8009600:	9309      	str	r3, [sp, #36]	; 0x24
 8009602:	783b      	ldrb	r3, [r7, #0]
 8009604:	2b00      	cmp	r3, #0
 8009606:	f000 809d 	beq.w	8009744 <_svfiprintf_r+0x1b8>
 800960a:	2300      	movs	r3, #0
 800960c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009610:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009614:	9304      	str	r3, [sp, #16]
 8009616:	9307      	str	r3, [sp, #28]
 8009618:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800961c:	931a      	str	r3, [sp, #104]	; 0x68
 800961e:	462f      	mov	r7, r5
 8009620:	2205      	movs	r2, #5
 8009622:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009626:	4850      	ldr	r0, [pc, #320]	; (8009768 <_svfiprintf_r+0x1dc>)
 8009628:	f7f6 fde2 	bl	80001f0 <memchr>
 800962c:	9b04      	ldr	r3, [sp, #16]
 800962e:	b9d0      	cbnz	r0, 8009666 <_svfiprintf_r+0xda>
 8009630:	06d9      	lsls	r1, r3, #27
 8009632:	bf44      	itt	mi
 8009634:	2220      	movmi	r2, #32
 8009636:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800963a:	071a      	lsls	r2, r3, #28
 800963c:	bf44      	itt	mi
 800963e:	222b      	movmi	r2, #43	; 0x2b
 8009640:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009644:	782a      	ldrb	r2, [r5, #0]
 8009646:	2a2a      	cmp	r2, #42	; 0x2a
 8009648:	d015      	beq.n	8009676 <_svfiprintf_r+0xea>
 800964a:	9a07      	ldr	r2, [sp, #28]
 800964c:	462f      	mov	r7, r5
 800964e:	2000      	movs	r0, #0
 8009650:	250a      	movs	r5, #10
 8009652:	4639      	mov	r1, r7
 8009654:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009658:	3b30      	subs	r3, #48	; 0x30
 800965a:	2b09      	cmp	r3, #9
 800965c:	d94d      	bls.n	80096fa <_svfiprintf_r+0x16e>
 800965e:	b1b8      	cbz	r0, 8009690 <_svfiprintf_r+0x104>
 8009660:	e00f      	b.n	8009682 <_svfiprintf_r+0xf6>
 8009662:	462f      	mov	r7, r5
 8009664:	e7b8      	b.n	80095d8 <_svfiprintf_r+0x4c>
 8009666:	4a40      	ldr	r2, [pc, #256]	; (8009768 <_svfiprintf_r+0x1dc>)
 8009668:	1a80      	subs	r0, r0, r2
 800966a:	fa0b f000 	lsl.w	r0, fp, r0
 800966e:	4318      	orrs	r0, r3
 8009670:	9004      	str	r0, [sp, #16]
 8009672:	463d      	mov	r5, r7
 8009674:	e7d3      	b.n	800961e <_svfiprintf_r+0x92>
 8009676:	9a03      	ldr	r2, [sp, #12]
 8009678:	1d11      	adds	r1, r2, #4
 800967a:	6812      	ldr	r2, [r2, #0]
 800967c:	9103      	str	r1, [sp, #12]
 800967e:	2a00      	cmp	r2, #0
 8009680:	db01      	blt.n	8009686 <_svfiprintf_r+0xfa>
 8009682:	9207      	str	r2, [sp, #28]
 8009684:	e004      	b.n	8009690 <_svfiprintf_r+0x104>
 8009686:	4252      	negs	r2, r2
 8009688:	f043 0302 	orr.w	r3, r3, #2
 800968c:	9207      	str	r2, [sp, #28]
 800968e:	9304      	str	r3, [sp, #16]
 8009690:	783b      	ldrb	r3, [r7, #0]
 8009692:	2b2e      	cmp	r3, #46	; 0x2e
 8009694:	d10c      	bne.n	80096b0 <_svfiprintf_r+0x124>
 8009696:	787b      	ldrb	r3, [r7, #1]
 8009698:	2b2a      	cmp	r3, #42	; 0x2a
 800969a:	d133      	bne.n	8009704 <_svfiprintf_r+0x178>
 800969c:	9b03      	ldr	r3, [sp, #12]
 800969e:	1d1a      	adds	r2, r3, #4
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	9203      	str	r2, [sp, #12]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	bfb8      	it	lt
 80096a8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80096ac:	3702      	adds	r7, #2
 80096ae:	9305      	str	r3, [sp, #20]
 80096b0:	4d2e      	ldr	r5, [pc, #184]	; (800976c <_svfiprintf_r+0x1e0>)
 80096b2:	7839      	ldrb	r1, [r7, #0]
 80096b4:	2203      	movs	r2, #3
 80096b6:	4628      	mov	r0, r5
 80096b8:	f7f6 fd9a 	bl	80001f0 <memchr>
 80096bc:	b138      	cbz	r0, 80096ce <_svfiprintf_r+0x142>
 80096be:	2340      	movs	r3, #64	; 0x40
 80096c0:	1b40      	subs	r0, r0, r5
 80096c2:	fa03 f000 	lsl.w	r0, r3, r0
 80096c6:	9b04      	ldr	r3, [sp, #16]
 80096c8:	4303      	orrs	r3, r0
 80096ca:	3701      	adds	r7, #1
 80096cc:	9304      	str	r3, [sp, #16]
 80096ce:	7839      	ldrb	r1, [r7, #0]
 80096d0:	4827      	ldr	r0, [pc, #156]	; (8009770 <_svfiprintf_r+0x1e4>)
 80096d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80096d6:	2206      	movs	r2, #6
 80096d8:	1c7e      	adds	r6, r7, #1
 80096da:	f7f6 fd89 	bl	80001f0 <memchr>
 80096de:	2800      	cmp	r0, #0
 80096e0:	d038      	beq.n	8009754 <_svfiprintf_r+0x1c8>
 80096e2:	4b24      	ldr	r3, [pc, #144]	; (8009774 <_svfiprintf_r+0x1e8>)
 80096e4:	bb13      	cbnz	r3, 800972c <_svfiprintf_r+0x1a0>
 80096e6:	9b03      	ldr	r3, [sp, #12]
 80096e8:	3307      	adds	r3, #7
 80096ea:	f023 0307 	bic.w	r3, r3, #7
 80096ee:	3308      	adds	r3, #8
 80096f0:	9303      	str	r3, [sp, #12]
 80096f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096f4:	444b      	add	r3, r9
 80096f6:	9309      	str	r3, [sp, #36]	; 0x24
 80096f8:	e76d      	b.n	80095d6 <_svfiprintf_r+0x4a>
 80096fa:	fb05 3202 	mla	r2, r5, r2, r3
 80096fe:	2001      	movs	r0, #1
 8009700:	460f      	mov	r7, r1
 8009702:	e7a6      	b.n	8009652 <_svfiprintf_r+0xc6>
 8009704:	2300      	movs	r3, #0
 8009706:	3701      	adds	r7, #1
 8009708:	9305      	str	r3, [sp, #20]
 800970a:	4619      	mov	r1, r3
 800970c:	250a      	movs	r5, #10
 800970e:	4638      	mov	r0, r7
 8009710:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009714:	3a30      	subs	r2, #48	; 0x30
 8009716:	2a09      	cmp	r2, #9
 8009718:	d903      	bls.n	8009722 <_svfiprintf_r+0x196>
 800971a:	2b00      	cmp	r3, #0
 800971c:	d0c8      	beq.n	80096b0 <_svfiprintf_r+0x124>
 800971e:	9105      	str	r1, [sp, #20]
 8009720:	e7c6      	b.n	80096b0 <_svfiprintf_r+0x124>
 8009722:	fb05 2101 	mla	r1, r5, r1, r2
 8009726:	2301      	movs	r3, #1
 8009728:	4607      	mov	r7, r0
 800972a:	e7f0      	b.n	800970e <_svfiprintf_r+0x182>
 800972c:	ab03      	add	r3, sp, #12
 800972e:	9300      	str	r3, [sp, #0]
 8009730:	4622      	mov	r2, r4
 8009732:	4b11      	ldr	r3, [pc, #68]	; (8009778 <_svfiprintf_r+0x1ec>)
 8009734:	a904      	add	r1, sp, #16
 8009736:	4640      	mov	r0, r8
 8009738:	f7fc fbc4 	bl	8005ec4 <_printf_float>
 800973c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8009740:	4681      	mov	r9, r0
 8009742:	d1d6      	bne.n	80096f2 <_svfiprintf_r+0x166>
 8009744:	89a3      	ldrh	r3, [r4, #12]
 8009746:	065b      	lsls	r3, r3, #25
 8009748:	f53f af35 	bmi.w	80095b6 <_svfiprintf_r+0x2a>
 800974c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800974e:	b01d      	add	sp, #116	; 0x74
 8009750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009754:	ab03      	add	r3, sp, #12
 8009756:	9300      	str	r3, [sp, #0]
 8009758:	4622      	mov	r2, r4
 800975a:	4b07      	ldr	r3, [pc, #28]	; (8009778 <_svfiprintf_r+0x1ec>)
 800975c:	a904      	add	r1, sp, #16
 800975e:	4640      	mov	r0, r8
 8009760:	f7fc fe66 	bl	8006430 <_printf_i>
 8009764:	e7ea      	b.n	800973c <_svfiprintf_r+0x1b0>
 8009766:	bf00      	nop
 8009768:	0800a7fc 	.word	0x0800a7fc
 800976c:	0800a802 	.word	0x0800a802
 8009770:	0800a806 	.word	0x0800a806
 8009774:	08005ec5 	.word	0x08005ec5
 8009778:	080094d9 	.word	0x080094d9

0800977c <_sungetc_r>:
 800977c:	b538      	push	{r3, r4, r5, lr}
 800977e:	1c4b      	adds	r3, r1, #1
 8009780:	4614      	mov	r4, r2
 8009782:	d103      	bne.n	800978c <_sungetc_r+0x10>
 8009784:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8009788:	4628      	mov	r0, r5
 800978a:	bd38      	pop	{r3, r4, r5, pc}
 800978c:	8993      	ldrh	r3, [r2, #12]
 800978e:	f023 0320 	bic.w	r3, r3, #32
 8009792:	8193      	strh	r3, [r2, #12]
 8009794:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009796:	6852      	ldr	r2, [r2, #4]
 8009798:	b2cd      	uxtb	r5, r1
 800979a:	b18b      	cbz	r3, 80097c0 <_sungetc_r+0x44>
 800979c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800979e:	4293      	cmp	r3, r2
 80097a0:	dd08      	ble.n	80097b4 <_sungetc_r+0x38>
 80097a2:	6823      	ldr	r3, [r4, #0]
 80097a4:	1e5a      	subs	r2, r3, #1
 80097a6:	6022      	str	r2, [r4, #0]
 80097a8:	f803 5c01 	strb.w	r5, [r3, #-1]
 80097ac:	6863      	ldr	r3, [r4, #4]
 80097ae:	3301      	adds	r3, #1
 80097b0:	6063      	str	r3, [r4, #4]
 80097b2:	e7e9      	b.n	8009788 <_sungetc_r+0xc>
 80097b4:	4621      	mov	r1, r4
 80097b6:	f000 fbc3 	bl	8009f40 <__submore>
 80097ba:	2800      	cmp	r0, #0
 80097bc:	d0f1      	beq.n	80097a2 <_sungetc_r+0x26>
 80097be:	e7e1      	b.n	8009784 <_sungetc_r+0x8>
 80097c0:	6921      	ldr	r1, [r4, #16]
 80097c2:	6823      	ldr	r3, [r4, #0]
 80097c4:	b151      	cbz	r1, 80097dc <_sungetc_r+0x60>
 80097c6:	4299      	cmp	r1, r3
 80097c8:	d208      	bcs.n	80097dc <_sungetc_r+0x60>
 80097ca:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80097ce:	42a9      	cmp	r1, r5
 80097d0:	d104      	bne.n	80097dc <_sungetc_r+0x60>
 80097d2:	3b01      	subs	r3, #1
 80097d4:	3201      	adds	r2, #1
 80097d6:	6023      	str	r3, [r4, #0]
 80097d8:	6062      	str	r2, [r4, #4]
 80097da:	e7d5      	b.n	8009788 <_sungetc_r+0xc>
 80097dc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80097e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80097e4:	6363      	str	r3, [r4, #52]	; 0x34
 80097e6:	2303      	movs	r3, #3
 80097e8:	63a3      	str	r3, [r4, #56]	; 0x38
 80097ea:	4623      	mov	r3, r4
 80097ec:	f803 5f46 	strb.w	r5, [r3, #70]!
 80097f0:	6023      	str	r3, [r4, #0]
 80097f2:	2301      	movs	r3, #1
 80097f4:	e7dc      	b.n	80097b0 <_sungetc_r+0x34>

080097f6 <__ssrefill_r>:
 80097f6:	b510      	push	{r4, lr}
 80097f8:	460c      	mov	r4, r1
 80097fa:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80097fc:	b169      	cbz	r1, 800981a <__ssrefill_r+0x24>
 80097fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009802:	4299      	cmp	r1, r3
 8009804:	d001      	beq.n	800980a <__ssrefill_r+0x14>
 8009806:	f7ff fdbf 	bl	8009388 <_free_r>
 800980a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800980c:	6063      	str	r3, [r4, #4]
 800980e:	2000      	movs	r0, #0
 8009810:	6360      	str	r0, [r4, #52]	; 0x34
 8009812:	b113      	cbz	r3, 800981a <__ssrefill_r+0x24>
 8009814:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009816:	6023      	str	r3, [r4, #0]
 8009818:	bd10      	pop	{r4, pc}
 800981a:	6923      	ldr	r3, [r4, #16]
 800981c:	6023      	str	r3, [r4, #0]
 800981e:	2300      	movs	r3, #0
 8009820:	6063      	str	r3, [r4, #4]
 8009822:	89a3      	ldrh	r3, [r4, #12]
 8009824:	f043 0320 	orr.w	r3, r3, #32
 8009828:	81a3      	strh	r3, [r4, #12]
 800982a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800982e:	e7f3      	b.n	8009818 <__ssrefill_r+0x22>

08009830 <__ssvfiscanf_r>:
 8009830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009834:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8009838:	460c      	mov	r4, r1
 800983a:	2100      	movs	r1, #0
 800983c:	9144      	str	r1, [sp, #272]	; 0x110
 800983e:	9145      	str	r1, [sp, #276]	; 0x114
 8009840:	499f      	ldr	r1, [pc, #636]	; (8009ac0 <__ssvfiscanf_r+0x290>)
 8009842:	91a0      	str	r1, [sp, #640]	; 0x280
 8009844:	f10d 0804 	add.w	r8, sp, #4
 8009848:	499e      	ldr	r1, [pc, #632]	; (8009ac4 <__ssvfiscanf_r+0x294>)
 800984a:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8009ac8 <__ssvfiscanf_r+0x298>
 800984e:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8009852:	4606      	mov	r6, r0
 8009854:	4692      	mov	sl, r2
 8009856:	91a1      	str	r1, [sp, #644]	; 0x284
 8009858:	9300      	str	r3, [sp, #0]
 800985a:	270a      	movs	r7, #10
 800985c:	f89a 3000 	ldrb.w	r3, [sl]
 8009860:	2b00      	cmp	r3, #0
 8009862:	f000 812a 	beq.w	8009aba <__ssvfiscanf_r+0x28a>
 8009866:	4655      	mov	r5, sl
 8009868:	f7ff f948 	bl	8008afc <__locale_ctype_ptr>
 800986c:	f815 bb01 	ldrb.w	fp, [r5], #1
 8009870:	4458      	add	r0, fp
 8009872:	7843      	ldrb	r3, [r0, #1]
 8009874:	f013 0308 	ands.w	r3, r3, #8
 8009878:	d01c      	beq.n	80098b4 <__ssvfiscanf_r+0x84>
 800987a:	6863      	ldr	r3, [r4, #4]
 800987c:	2b00      	cmp	r3, #0
 800987e:	dd12      	ble.n	80098a6 <__ssvfiscanf_r+0x76>
 8009880:	f7ff f93c 	bl	8008afc <__locale_ctype_ptr>
 8009884:	6823      	ldr	r3, [r4, #0]
 8009886:	781a      	ldrb	r2, [r3, #0]
 8009888:	4410      	add	r0, r2
 800988a:	7842      	ldrb	r2, [r0, #1]
 800988c:	0712      	lsls	r2, r2, #28
 800988e:	d401      	bmi.n	8009894 <__ssvfiscanf_r+0x64>
 8009890:	46aa      	mov	sl, r5
 8009892:	e7e3      	b.n	800985c <__ssvfiscanf_r+0x2c>
 8009894:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009896:	3201      	adds	r2, #1
 8009898:	9245      	str	r2, [sp, #276]	; 0x114
 800989a:	6862      	ldr	r2, [r4, #4]
 800989c:	3301      	adds	r3, #1
 800989e:	3a01      	subs	r2, #1
 80098a0:	6062      	str	r2, [r4, #4]
 80098a2:	6023      	str	r3, [r4, #0]
 80098a4:	e7e9      	b.n	800987a <__ssvfiscanf_r+0x4a>
 80098a6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80098a8:	4621      	mov	r1, r4
 80098aa:	4630      	mov	r0, r6
 80098ac:	4798      	blx	r3
 80098ae:	2800      	cmp	r0, #0
 80098b0:	d0e6      	beq.n	8009880 <__ssvfiscanf_r+0x50>
 80098b2:	e7ed      	b.n	8009890 <__ssvfiscanf_r+0x60>
 80098b4:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 80098b8:	f040 8082 	bne.w	80099c0 <__ssvfiscanf_r+0x190>
 80098bc:	9343      	str	r3, [sp, #268]	; 0x10c
 80098be:	9341      	str	r3, [sp, #260]	; 0x104
 80098c0:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80098c4:	2b2a      	cmp	r3, #42	; 0x2a
 80098c6:	d103      	bne.n	80098d0 <__ssvfiscanf_r+0xa0>
 80098c8:	2310      	movs	r3, #16
 80098ca:	9341      	str	r3, [sp, #260]	; 0x104
 80098cc:	f10a 0502 	add.w	r5, sl, #2
 80098d0:	46aa      	mov	sl, r5
 80098d2:	f815 1b01 	ldrb.w	r1, [r5], #1
 80098d6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80098da:	2a09      	cmp	r2, #9
 80098dc:	d922      	bls.n	8009924 <__ssvfiscanf_r+0xf4>
 80098de:	2203      	movs	r2, #3
 80098e0:	4879      	ldr	r0, [pc, #484]	; (8009ac8 <__ssvfiscanf_r+0x298>)
 80098e2:	f7f6 fc85 	bl	80001f0 <memchr>
 80098e6:	b138      	cbz	r0, 80098f8 <__ssvfiscanf_r+0xc8>
 80098e8:	eba0 0309 	sub.w	r3, r0, r9
 80098ec:	2001      	movs	r0, #1
 80098ee:	4098      	lsls	r0, r3
 80098f0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80098f2:	4318      	orrs	r0, r3
 80098f4:	9041      	str	r0, [sp, #260]	; 0x104
 80098f6:	46aa      	mov	sl, r5
 80098f8:	f89a 3000 	ldrb.w	r3, [sl]
 80098fc:	2b67      	cmp	r3, #103	; 0x67
 80098fe:	f10a 0501 	add.w	r5, sl, #1
 8009902:	d82b      	bhi.n	800995c <__ssvfiscanf_r+0x12c>
 8009904:	2b65      	cmp	r3, #101	; 0x65
 8009906:	f080 809f 	bcs.w	8009a48 <__ssvfiscanf_r+0x218>
 800990a:	2b47      	cmp	r3, #71	; 0x47
 800990c:	d810      	bhi.n	8009930 <__ssvfiscanf_r+0x100>
 800990e:	2b45      	cmp	r3, #69	; 0x45
 8009910:	f080 809a 	bcs.w	8009a48 <__ssvfiscanf_r+0x218>
 8009914:	2b00      	cmp	r3, #0
 8009916:	d06c      	beq.n	80099f2 <__ssvfiscanf_r+0x1c2>
 8009918:	2b25      	cmp	r3, #37	; 0x25
 800991a:	d051      	beq.n	80099c0 <__ssvfiscanf_r+0x190>
 800991c:	2303      	movs	r3, #3
 800991e:	9347      	str	r3, [sp, #284]	; 0x11c
 8009920:	9742      	str	r7, [sp, #264]	; 0x108
 8009922:	e027      	b.n	8009974 <__ssvfiscanf_r+0x144>
 8009924:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8009926:	fb07 1303 	mla	r3, r7, r3, r1
 800992a:	3b30      	subs	r3, #48	; 0x30
 800992c:	9343      	str	r3, [sp, #268]	; 0x10c
 800992e:	e7cf      	b.n	80098d0 <__ssvfiscanf_r+0xa0>
 8009930:	2b5b      	cmp	r3, #91	; 0x5b
 8009932:	d06a      	beq.n	8009a0a <__ssvfiscanf_r+0x1da>
 8009934:	d80c      	bhi.n	8009950 <__ssvfiscanf_r+0x120>
 8009936:	2b58      	cmp	r3, #88	; 0x58
 8009938:	d1f0      	bne.n	800991c <__ssvfiscanf_r+0xec>
 800993a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800993c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009940:	9241      	str	r2, [sp, #260]	; 0x104
 8009942:	2210      	movs	r2, #16
 8009944:	9242      	str	r2, [sp, #264]	; 0x108
 8009946:	2b6e      	cmp	r3, #110	; 0x6e
 8009948:	bf8c      	ite	hi
 800994a:	2304      	movhi	r3, #4
 800994c:	2303      	movls	r3, #3
 800994e:	e010      	b.n	8009972 <__ssvfiscanf_r+0x142>
 8009950:	2b63      	cmp	r3, #99	; 0x63
 8009952:	d065      	beq.n	8009a20 <__ssvfiscanf_r+0x1f0>
 8009954:	2b64      	cmp	r3, #100	; 0x64
 8009956:	d1e1      	bne.n	800991c <__ssvfiscanf_r+0xec>
 8009958:	9742      	str	r7, [sp, #264]	; 0x108
 800995a:	e7f4      	b.n	8009946 <__ssvfiscanf_r+0x116>
 800995c:	2b70      	cmp	r3, #112	; 0x70
 800995e:	d04b      	beq.n	80099f8 <__ssvfiscanf_r+0x1c8>
 8009960:	d826      	bhi.n	80099b0 <__ssvfiscanf_r+0x180>
 8009962:	2b6e      	cmp	r3, #110	; 0x6e
 8009964:	d062      	beq.n	8009a2c <__ssvfiscanf_r+0x1fc>
 8009966:	d84c      	bhi.n	8009a02 <__ssvfiscanf_r+0x1d2>
 8009968:	2b69      	cmp	r3, #105	; 0x69
 800996a:	d1d7      	bne.n	800991c <__ssvfiscanf_r+0xec>
 800996c:	2300      	movs	r3, #0
 800996e:	9342      	str	r3, [sp, #264]	; 0x108
 8009970:	2303      	movs	r3, #3
 8009972:	9347      	str	r3, [sp, #284]	; 0x11c
 8009974:	6863      	ldr	r3, [r4, #4]
 8009976:	2b00      	cmp	r3, #0
 8009978:	dd68      	ble.n	8009a4c <__ssvfiscanf_r+0x21c>
 800997a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800997c:	0659      	lsls	r1, r3, #25
 800997e:	d407      	bmi.n	8009990 <__ssvfiscanf_r+0x160>
 8009980:	f7ff f8bc 	bl	8008afc <__locale_ctype_ptr>
 8009984:	6823      	ldr	r3, [r4, #0]
 8009986:	781a      	ldrb	r2, [r3, #0]
 8009988:	4410      	add	r0, r2
 800998a:	7842      	ldrb	r2, [r0, #1]
 800998c:	0712      	lsls	r2, r2, #28
 800998e:	d464      	bmi.n	8009a5a <__ssvfiscanf_r+0x22a>
 8009990:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8009992:	2b02      	cmp	r3, #2
 8009994:	dc73      	bgt.n	8009a7e <__ssvfiscanf_r+0x24e>
 8009996:	466b      	mov	r3, sp
 8009998:	4622      	mov	r2, r4
 800999a:	a941      	add	r1, sp, #260	; 0x104
 800999c:	4630      	mov	r0, r6
 800999e:	f000 f897 	bl	8009ad0 <_scanf_chars>
 80099a2:	2801      	cmp	r0, #1
 80099a4:	f000 8089 	beq.w	8009aba <__ssvfiscanf_r+0x28a>
 80099a8:	2802      	cmp	r0, #2
 80099aa:	f47f af71 	bne.w	8009890 <__ssvfiscanf_r+0x60>
 80099ae:	e01d      	b.n	80099ec <__ssvfiscanf_r+0x1bc>
 80099b0:	2b75      	cmp	r3, #117	; 0x75
 80099b2:	d0d1      	beq.n	8009958 <__ssvfiscanf_r+0x128>
 80099b4:	2b78      	cmp	r3, #120	; 0x78
 80099b6:	d0c0      	beq.n	800993a <__ssvfiscanf_r+0x10a>
 80099b8:	2b73      	cmp	r3, #115	; 0x73
 80099ba:	d1af      	bne.n	800991c <__ssvfiscanf_r+0xec>
 80099bc:	2302      	movs	r3, #2
 80099be:	e7d8      	b.n	8009972 <__ssvfiscanf_r+0x142>
 80099c0:	6863      	ldr	r3, [r4, #4]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	dd0c      	ble.n	80099e0 <__ssvfiscanf_r+0x1b0>
 80099c6:	6823      	ldr	r3, [r4, #0]
 80099c8:	781a      	ldrb	r2, [r3, #0]
 80099ca:	455a      	cmp	r2, fp
 80099cc:	d175      	bne.n	8009aba <__ssvfiscanf_r+0x28a>
 80099ce:	3301      	adds	r3, #1
 80099d0:	6862      	ldr	r2, [r4, #4]
 80099d2:	6023      	str	r3, [r4, #0]
 80099d4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80099d6:	3a01      	subs	r2, #1
 80099d8:	3301      	adds	r3, #1
 80099da:	6062      	str	r2, [r4, #4]
 80099dc:	9345      	str	r3, [sp, #276]	; 0x114
 80099de:	e757      	b.n	8009890 <__ssvfiscanf_r+0x60>
 80099e0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80099e2:	4621      	mov	r1, r4
 80099e4:	4630      	mov	r0, r6
 80099e6:	4798      	blx	r3
 80099e8:	2800      	cmp	r0, #0
 80099ea:	d0ec      	beq.n	80099c6 <__ssvfiscanf_r+0x196>
 80099ec:	9844      	ldr	r0, [sp, #272]	; 0x110
 80099ee:	2800      	cmp	r0, #0
 80099f0:	d159      	bne.n	8009aa6 <__ssvfiscanf_r+0x276>
 80099f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80099f6:	e05c      	b.n	8009ab2 <__ssvfiscanf_r+0x282>
 80099f8:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80099fa:	f042 0220 	orr.w	r2, r2, #32
 80099fe:	9241      	str	r2, [sp, #260]	; 0x104
 8009a00:	e79b      	b.n	800993a <__ssvfiscanf_r+0x10a>
 8009a02:	2308      	movs	r3, #8
 8009a04:	9342      	str	r3, [sp, #264]	; 0x108
 8009a06:	2304      	movs	r3, #4
 8009a08:	e7b3      	b.n	8009972 <__ssvfiscanf_r+0x142>
 8009a0a:	4629      	mov	r1, r5
 8009a0c:	4640      	mov	r0, r8
 8009a0e:	f000 f9c7 	bl	8009da0 <__sccl>
 8009a12:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009a14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a18:	9341      	str	r3, [sp, #260]	; 0x104
 8009a1a:	4605      	mov	r5, r0
 8009a1c:	2301      	movs	r3, #1
 8009a1e:	e7a8      	b.n	8009972 <__ssvfiscanf_r+0x142>
 8009a20:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009a22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a26:	9341      	str	r3, [sp, #260]	; 0x104
 8009a28:	2300      	movs	r3, #0
 8009a2a:	e7a2      	b.n	8009972 <__ssvfiscanf_r+0x142>
 8009a2c:	9841      	ldr	r0, [sp, #260]	; 0x104
 8009a2e:	06c3      	lsls	r3, r0, #27
 8009a30:	f53f af2e 	bmi.w	8009890 <__ssvfiscanf_r+0x60>
 8009a34:	9b00      	ldr	r3, [sp, #0]
 8009a36:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009a38:	1d19      	adds	r1, r3, #4
 8009a3a:	9100      	str	r1, [sp, #0]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	07c0      	lsls	r0, r0, #31
 8009a40:	bf4c      	ite	mi
 8009a42:	801a      	strhmi	r2, [r3, #0]
 8009a44:	601a      	strpl	r2, [r3, #0]
 8009a46:	e723      	b.n	8009890 <__ssvfiscanf_r+0x60>
 8009a48:	2305      	movs	r3, #5
 8009a4a:	e792      	b.n	8009972 <__ssvfiscanf_r+0x142>
 8009a4c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009a4e:	4621      	mov	r1, r4
 8009a50:	4630      	mov	r0, r6
 8009a52:	4798      	blx	r3
 8009a54:	2800      	cmp	r0, #0
 8009a56:	d090      	beq.n	800997a <__ssvfiscanf_r+0x14a>
 8009a58:	e7c8      	b.n	80099ec <__ssvfiscanf_r+0x1bc>
 8009a5a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009a5c:	3201      	adds	r2, #1
 8009a5e:	9245      	str	r2, [sp, #276]	; 0x114
 8009a60:	6862      	ldr	r2, [r4, #4]
 8009a62:	3a01      	subs	r2, #1
 8009a64:	2a00      	cmp	r2, #0
 8009a66:	6062      	str	r2, [r4, #4]
 8009a68:	dd02      	ble.n	8009a70 <__ssvfiscanf_r+0x240>
 8009a6a:	3301      	adds	r3, #1
 8009a6c:	6023      	str	r3, [r4, #0]
 8009a6e:	e787      	b.n	8009980 <__ssvfiscanf_r+0x150>
 8009a70:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009a72:	4621      	mov	r1, r4
 8009a74:	4630      	mov	r0, r6
 8009a76:	4798      	blx	r3
 8009a78:	2800      	cmp	r0, #0
 8009a7a:	d081      	beq.n	8009980 <__ssvfiscanf_r+0x150>
 8009a7c:	e7b6      	b.n	80099ec <__ssvfiscanf_r+0x1bc>
 8009a7e:	2b04      	cmp	r3, #4
 8009a80:	dc06      	bgt.n	8009a90 <__ssvfiscanf_r+0x260>
 8009a82:	466b      	mov	r3, sp
 8009a84:	4622      	mov	r2, r4
 8009a86:	a941      	add	r1, sp, #260	; 0x104
 8009a88:	4630      	mov	r0, r6
 8009a8a:	f000 f885 	bl	8009b98 <_scanf_i>
 8009a8e:	e788      	b.n	80099a2 <__ssvfiscanf_r+0x172>
 8009a90:	4b0e      	ldr	r3, [pc, #56]	; (8009acc <__ssvfiscanf_r+0x29c>)
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	f43f aefc 	beq.w	8009890 <__ssvfiscanf_r+0x60>
 8009a98:	466b      	mov	r3, sp
 8009a9a:	4622      	mov	r2, r4
 8009a9c:	a941      	add	r1, sp, #260	; 0x104
 8009a9e:	4630      	mov	r0, r6
 8009aa0:	f7fc fdd8 	bl	8006654 <_scanf_float>
 8009aa4:	e77d      	b.n	80099a2 <__ssvfiscanf_r+0x172>
 8009aa6:	89a3      	ldrh	r3, [r4, #12]
 8009aa8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009aac:	bf18      	it	ne
 8009aae:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8009ab2:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8009ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009aba:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009abc:	e7f9      	b.n	8009ab2 <__ssvfiscanf_r+0x282>
 8009abe:	bf00      	nop
 8009ac0:	0800977d 	.word	0x0800977d
 8009ac4:	080097f7 	.word	0x080097f7
 8009ac8:	0800a802 	.word	0x0800a802
 8009acc:	08006655 	.word	0x08006655

08009ad0 <_scanf_chars>:
 8009ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ad4:	4615      	mov	r5, r2
 8009ad6:	688a      	ldr	r2, [r1, #8]
 8009ad8:	4680      	mov	r8, r0
 8009ada:	460c      	mov	r4, r1
 8009adc:	b932      	cbnz	r2, 8009aec <_scanf_chars+0x1c>
 8009ade:	698a      	ldr	r2, [r1, #24]
 8009ae0:	2a00      	cmp	r2, #0
 8009ae2:	bf14      	ite	ne
 8009ae4:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 8009ae8:	2201      	moveq	r2, #1
 8009aea:	608a      	str	r2, [r1, #8]
 8009aec:	6822      	ldr	r2, [r4, #0]
 8009aee:	06d1      	lsls	r1, r2, #27
 8009af0:	bf5f      	itttt	pl
 8009af2:	681a      	ldrpl	r2, [r3, #0]
 8009af4:	1d11      	addpl	r1, r2, #4
 8009af6:	6019      	strpl	r1, [r3, #0]
 8009af8:	6817      	ldrpl	r7, [r2, #0]
 8009afa:	2600      	movs	r6, #0
 8009afc:	69a3      	ldr	r3, [r4, #24]
 8009afe:	b1db      	cbz	r3, 8009b38 <_scanf_chars+0x68>
 8009b00:	2b01      	cmp	r3, #1
 8009b02:	d107      	bne.n	8009b14 <_scanf_chars+0x44>
 8009b04:	682b      	ldr	r3, [r5, #0]
 8009b06:	6962      	ldr	r2, [r4, #20]
 8009b08:	781b      	ldrb	r3, [r3, #0]
 8009b0a:	5cd3      	ldrb	r3, [r2, r3]
 8009b0c:	b9a3      	cbnz	r3, 8009b38 <_scanf_chars+0x68>
 8009b0e:	2e00      	cmp	r6, #0
 8009b10:	d132      	bne.n	8009b78 <_scanf_chars+0xa8>
 8009b12:	e006      	b.n	8009b22 <_scanf_chars+0x52>
 8009b14:	2b02      	cmp	r3, #2
 8009b16:	d007      	beq.n	8009b28 <_scanf_chars+0x58>
 8009b18:	2e00      	cmp	r6, #0
 8009b1a:	d12d      	bne.n	8009b78 <_scanf_chars+0xa8>
 8009b1c:	69a3      	ldr	r3, [r4, #24]
 8009b1e:	2b01      	cmp	r3, #1
 8009b20:	d12a      	bne.n	8009b78 <_scanf_chars+0xa8>
 8009b22:	2001      	movs	r0, #1
 8009b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b28:	f7fe ffe8 	bl	8008afc <__locale_ctype_ptr>
 8009b2c:	682b      	ldr	r3, [r5, #0]
 8009b2e:	781b      	ldrb	r3, [r3, #0]
 8009b30:	4418      	add	r0, r3
 8009b32:	7843      	ldrb	r3, [r0, #1]
 8009b34:	071b      	lsls	r3, r3, #28
 8009b36:	d4ef      	bmi.n	8009b18 <_scanf_chars+0x48>
 8009b38:	6823      	ldr	r3, [r4, #0]
 8009b3a:	06da      	lsls	r2, r3, #27
 8009b3c:	bf5e      	ittt	pl
 8009b3e:	682b      	ldrpl	r3, [r5, #0]
 8009b40:	781b      	ldrbpl	r3, [r3, #0]
 8009b42:	703b      	strbpl	r3, [r7, #0]
 8009b44:	682a      	ldr	r2, [r5, #0]
 8009b46:	686b      	ldr	r3, [r5, #4]
 8009b48:	f102 0201 	add.w	r2, r2, #1
 8009b4c:	602a      	str	r2, [r5, #0]
 8009b4e:	68a2      	ldr	r2, [r4, #8]
 8009b50:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8009b54:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8009b58:	606b      	str	r3, [r5, #4]
 8009b5a:	f106 0601 	add.w	r6, r6, #1
 8009b5e:	bf58      	it	pl
 8009b60:	3701      	addpl	r7, #1
 8009b62:	60a2      	str	r2, [r4, #8]
 8009b64:	b142      	cbz	r2, 8009b78 <_scanf_chars+0xa8>
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	dcc8      	bgt.n	8009afc <_scanf_chars+0x2c>
 8009b6a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009b6e:	4629      	mov	r1, r5
 8009b70:	4640      	mov	r0, r8
 8009b72:	4798      	blx	r3
 8009b74:	2800      	cmp	r0, #0
 8009b76:	d0c1      	beq.n	8009afc <_scanf_chars+0x2c>
 8009b78:	6823      	ldr	r3, [r4, #0]
 8009b7a:	f013 0310 	ands.w	r3, r3, #16
 8009b7e:	d105      	bne.n	8009b8c <_scanf_chars+0xbc>
 8009b80:	68e2      	ldr	r2, [r4, #12]
 8009b82:	3201      	adds	r2, #1
 8009b84:	60e2      	str	r2, [r4, #12]
 8009b86:	69a2      	ldr	r2, [r4, #24]
 8009b88:	b102      	cbz	r2, 8009b8c <_scanf_chars+0xbc>
 8009b8a:	703b      	strb	r3, [r7, #0]
 8009b8c:	6923      	ldr	r3, [r4, #16]
 8009b8e:	441e      	add	r6, r3
 8009b90:	6126      	str	r6, [r4, #16]
 8009b92:	2000      	movs	r0, #0
 8009b94:	e7c6      	b.n	8009b24 <_scanf_chars+0x54>
	...

08009b98 <_scanf_i>:
 8009b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b9c:	469a      	mov	sl, r3
 8009b9e:	4b74      	ldr	r3, [pc, #464]	; (8009d70 <_scanf_i+0x1d8>)
 8009ba0:	460c      	mov	r4, r1
 8009ba2:	4683      	mov	fp, r0
 8009ba4:	4616      	mov	r6, r2
 8009ba6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009baa:	b087      	sub	sp, #28
 8009bac:	ab03      	add	r3, sp, #12
 8009bae:	68a7      	ldr	r7, [r4, #8]
 8009bb0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009bb4:	4b6f      	ldr	r3, [pc, #444]	; (8009d74 <_scanf_i+0x1dc>)
 8009bb6:	69a1      	ldr	r1, [r4, #24]
 8009bb8:	4a6f      	ldr	r2, [pc, #444]	; (8009d78 <_scanf_i+0x1e0>)
 8009bba:	2903      	cmp	r1, #3
 8009bbc:	bf08      	it	eq
 8009bbe:	461a      	moveq	r2, r3
 8009bc0:	1e7b      	subs	r3, r7, #1
 8009bc2:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8009bc6:	bf84      	itt	hi
 8009bc8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009bcc:	60a3      	strhi	r3, [r4, #8]
 8009bce:	6823      	ldr	r3, [r4, #0]
 8009bd0:	9200      	str	r2, [sp, #0]
 8009bd2:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8009bd6:	bf88      	it	hi
 8009bd8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009bdc:	f104 091c 	add.w	r9, r4, #28
 8009be0:	6023      	str	r3, [r4, #0]
 8009be2:	bf8c      	ite	hi
 8009be4:	197f      	addhi	r7, r7, r5
 8009be6:	2700      	movls	r7, #0
 8009be8:	464b      	mov	r3, r9
 8009bea:	f04f 0800 	mov.w	r8, #0
 8009bee:	9301      	str	r3, [sp, #4]
 8009bf0:	6831      	ldr	r1, [r6, #0]
 8009bf2:	ab03      	add	r3, sp, #12
 8009bf4:	2202      	movs	r2, #2
 8009bf6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8009bfa:	7809      	ldrb	r1, [r1, #0]
 8009bfc:	f7f6 faf8 	bl	80001f0 <memchr>
 8009c00:	9b01      	ldr	r3, [sp, #4]
 8009c02:	b330      	cbz	r0, 8009c52 <_scanf_i+0xba>
 8009c04:	f1b8 0f01 	cmp.w	r8, #1
 8009c08:	d15a      	bne.n	8009cc0 <_scanf_i+0x128>
 8009c0a:	6862      	ldr	r2, [r4, #4]
 8009c0c:	b92a      	cbnz	r2, 8009c1a <_scanf_i+0x82>
 8009c0e:	6822      	ldr	r2, [r4, #0]
 8009c10:	2108      	movs	r1, #8
 8009c12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c16:	6061      	str	r1, [r4, #4]
 8009c18:	6022      	str	r2, [r4, #0]
 8009c1a:	6822      	ldr	r2, [r4, #0]
 8009c1c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8009c20:	6022      	str	r2, [r4, #0]
 8009c22:	68a2      	ldr	r2, [r4, #8]
 8009c24:	1e51      	subs	r1, r2, #1
 8009c26:	60a1      	str	r1, [r4, #8]
 8009c28:	b19a      	cbz	r2, 8009c52 <_scanf_i+0xba>
 8009c2a:	6832      	ldr	r2, [r6, #0]
 8009c2c:	1c51      	adds	r1, r2, #1
 8009c2e:	6031      	str	r1, [r6, #0]
 8009c30:	7812      	ldrb	r2, [r2, #0]
 8009c32:	701a      	strb	r2, [r3, #0]
 8009c34:	1c5d      	adds	r5, r3, #1
 8009c36:	6873      	ldr	r3, [r6, #4]
 8009c38:	3b01      	subs	r3, #1
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	6073      	str	r3, [r6, #4]
 8009c3e:	dc07      	bgt.n	8009c50 <_scanf_i+0xb8>
 8009c40:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009c44:	4631      	mov	r1, r6
 8009c46:	4658      	mov	r0, fp
 8009c48:	4798      	blx	r3
 8009c4a:	2800      	cmp	r0, #0
 8009c4c:	f040 8086 	bne.w	8009d5c <_scanf_i+0x1c4>
 8009c50:	462b      	mov	r3, r5
 8009c52:	f108 0801 	add.w	r8, r8, #1
 8009c56:	f1b8 0f03 	cmp.w	r8, #3
 8009c5a:	d1c8      	bne.n	8009bee <_scanf_i+0x56>
 8009c5c:	6862      	ldr	r2, [r4, #4]
 8009c5e:	b90a      	cbnz	r2, 8009c64 <_scanf_i+0xcc>
 8009c60:	220a      	movs	r2, #10
 8009c62:	6062      	str	r2, [r4, #4]
 8009c64:	6862      	ldr	r2, [r4, #4]
 8009c66:	4945      	ldr	r1, [pc, #276]	; (8009d7c <_scanf_i+0x1e4>)
 8009c68:	6960      	ldr	r0, [r4, #20]
 8009c6a:	9301      	str	r3, [sp, #4]
 8009c6c:	1a89      	subs	r1, r1, r2
 8009c6e:	f000 f897 	bl	8009da0 <__sccl>
 8009c72:	9b01      	ldr	r3, [sp, #4]
 8009c74:	f04f 0800 	mov.w	r8, #0
 8009c78:	461d      	mov	r5, r3
 8009c7a:	68a3      	ldr	r3, [r4, #8]
 8009c7c:	6822      	ldr	r2, [r4, #0]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d03a      	beq.n	8009cf8 <_scanf_i+0x160>
 8009c82:	6831      	ldr	r1, [r6, #0]
 8009c84:	6960      	ldr	r0, [r4, #20]
 8009c86:	f891 c000 	ldrb.w	ip, [r1]
 8009c8a:	f810 000c 	ldrb.w	r0, [r0, ip]
 8009c8e:	2800      	cmp	r0, #0
 8009c90:	d032      	beq.n	8009cf8 <_scanf_i+0x160>
 8009c92:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8009c96:	d121      	bne.n	8009cdc <_scanf_i+0x144>
 8009c98:	0510      	lsls	r0, r2, #20
 8009c9a:	d51f      	bpl.n	8009cdc <_scanf_i+0x144>
 8009c9c:	f108 0801 	add.w	r8, r8, #1
 8009ca0:	b117      	cbz	r7, 8009ca8 <_scanf_i+0x110>
 8009ca2:	3301      	adds	r3, #1
 8009ca4:	3f01      	subs	r7, #1
 8009ca6:	60a3      	str	r3, [r4, #8]
 8009ca8:	6873      	ldr	r3, [r6, #4]
 8009caa:	3b01      	subs	r3, #1
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	6073      	str	r3, [r6, #4]
 8009cb0:	dd1b      	ble.n	8009cea <_scanf_i+0x152>
 8009cb2:	6833      	ldr	r3, [r6, #0]
 8009cb4:	3301      	adds	r3, #1
 8009cb6:	6033      	str	r3, [r6, #0]
 8009cb8:	68a3      	ldr	r3, [r4, #8]
 8009cba:	3b01      	subs	r3, #1
 8009cbc:	60a3      	str	r3, [r4, #8]
 8009cbe:	e7dc      	b.n	8009c7a <_scanf_i+0xe2>
 8009cc0:	f1b8 0f02 	cmp.w	r8, #2
 8009cc4:	d1ad      	bne.n	8009c22 <_scanf_i+0x8a>
 8009cc6:	6822      	ldr	r2, [r4, #0]
 8009cc8:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8009ccc:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009cd0:	d1bf      	bne.n	8009c52 <_scanf_i+0xba>
 8009cd2:	2110      	movs	r1, #16
 8009cd4:	6061      	str	r1, [r4, #4]
 8009cd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009cda:	e7a1      	b.n	8009c20 <_scanf_i+0x88>
 8009cdc:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8009ce0:	6022      	str	r2, [r4, #0]
 8009ce2:	780b      	ldrb	r3, [r1, #0]
 8009ce4:	702b      	strb	r3, [r5, #0]
 8009ce6:	3501      	adds	r5, #1
 8009ce8:	e7de      	b.n	8009ca8 <_scanf_i+0x110>
 8009cea:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009cee:	4631      	mov	r1, r6
 8009cf0:	4658      	mov	r0, fp
 8009cf2:	4798      	blx	r3
 8009cf4:	2800      	cmp	r0, #0
 8009cf6:	d0df      	beq.n	8009cb8 <_scanf_i+0x120>
 8009cf8:	6823      	ldr	r3, [r4, #0]
 8009cfa:	05d9      	lsls	r1, r3, #23
 8009cfc:	d50c      	bpl.n	8009d18 <_scanf_i+0x180>
 8009cfe:	454d      	cmp	r5, r9
 8009d00:	d908      	bls.n	8009d14 <_scanf_i+0x17c>
 8009d02:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009d06:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009d0a:	4632      	mov	r2, r6
 8009d0c:	4658      	mov	r0, fp
 8009d0e:	4798      	blx	r3
 8009d10:	1e6f      	subs	r7, r5, #1
 8009d12:	463d      	mov	r5, r7
 8009d14:	454d      	cmp	r5, r9
 8009d16:	d029      	beq.n	8009d6c <_scanf_i+0x1d4>
 8009d18:	6822      	ldr	r2, [r4, #0]
 8009d1a:	f012 0210 	ands.w	r2, r2, #16
 8009d1e:	d113      	bne.n	8009d48 <_scanf_i+0x1b0>
 8009d20:	702a      	strb	r2, [r5, #0]
 8009d22:	6863      	ldr	r3, [r4, #4]
 8009d24:	9e00      	ldr	r6, [sp, #0]
 8009d26:	4649      	mov	r1, r9
 8009d28:	4658      	mov	r0, fp
 8009d2a:	47b0      	blx	r6
 8009d2c:	f8da 3000 	ldr.w	r3, [sl]
 8009d30:	6821      	ldr	r1, [r4, #0]
 8009d32:	1d1a      	adds	r2, r3, #4
 8009d34:	f8ca 2000 	str.w	r2, [sl]
 8009d38:	f011 0f20 	tst.w	r1, #32
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	d010      	beq.n	8009d62 <_scanf_i+0x1ca>
 8009d40:	6018      	str	r0, [r3, #0]
 8009d42:	68e3      	ldr	r3, [r4, #12]
 8009d44:	3301      	adds	r3, #1
 8009d46:	60e3      	str	r3, [r4, #12]
 8009d48:	eba5 0509 	sub.w	r5, r5, r9
 8009d4c:	44a8      	add	r8, r5
 8009d4e:	6925      	ldr	r5, [r4, #16]
 8009d50:	4445      	add	r5, r8
 8009d52:	6125      	str	r5, [r4, #16]
 8009d54:	2000      	movs	r0, #0
 8009d56:	b007      	add	sp, #28
 8009d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d5c:	f04f 0800 	mov.w	r8, #0
 8009d60:	e7ca      	b.n	8009cf8 <_scanf_i+0x160>
 8009d62:	07ca      	lsls	r2, r1, #31
 8009d64:	bf4c      	ite	mi
 8009d66:	8018      	strhmi	r0, [r3, #0]
 8009d68:	6018      	strpl	r0, [r3, #0]
 8009d6a:	e7ea      	b.n	8009d42 <_scanf_i+0x1aa>
 8009d6c:	2001      	movs	r0, #1
 8009d6e:	e7f2      	b.n	8009d56 <_scanf_i+0x1be>
 8009d70:	0800a628 	.word	0x0800a628
 8009d74:	080077f9 	.word	0x080077f9
 8009d78:	08009f1d 	.word	0x08009f1d
 8009d7c:	0800a81d 	.word	0x0800a81d

08009d80 <_sbrk_r>:
 8009d80:	b538      	push	{r3, r4, r5, lr}
 8009d82:	4c06      	ldr	r4, [pc, #24]	; (8009d9c <_sbrk_r+0x1c>)
 8009d84:	2300      	movs	r3, #0
 8009d86:	4605      	mov	r5, r0
 8009d88:	4608      	mov	r0, r1
 8009d8a:	6023      	str	r3, [r4, #0]
 8009d8c:	f7f9 f876 	bl	8002e7c <_sbrk>
 8009d90:	1c43      	adds	r3, r0, #1
 8009d92:	d102      	bne.n	8009d9a <_sbrk_r+0x1a>
 8009d94:	6823      	ldr	r3, [r4, #0]
 8009d96:	b103      	cbz	r3, 8009d9a <_sbrk_r+0x1a>
 8009d98:	602b      	str	r3, [r5, #0]
 8009d9a:	bd38      	pop	{r3, r4, r5, pc}
 8009d9c:	200003ec 	.word	0x200003ec

08009da0 <__sccl>:
 8009da0:	b570      	push	{r4, r5, r6, lr}
 8009da2:	780b      	ldrb	r3, [r1, #0]
 8009da4:	2b5e      	cmp	r3, #94	; 0x5e
 8009da6:	bf13      	iteet	ne
 8009da8:	1c4a      	addne	r2, r1, #1
 8009daa:	1c8a      	addeq	r2, r1, #2
 8009dac:	784b      	ldrbeq	r3, [r1, #1]
 8009dae:	2100      	movne	r1, #0
 8009db0:	bf08      	it	eq
 8009db2:	2101      	moveq	r1, #1
 8009db4:	1e44      	subs	r4, r0, #1
 8009db6:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8009dba:	f804 1f01 	strb.w	r1, [r4, #1]!
 8009dbe:	42ac      	cmp	r4, r5
 8009dc0:	d1fb      	bne.n	8009dba <__sccl+0x1a>
 8009dc2:	b913      	cbnz	r3, 8009dca <__sccl+0x2a>
 8009dc4:	3a01      	subs	r2, #1
 8009dc6:	4610      	mov	r0, r2
 8009dc8:	bd70      	pop	{r4, r5, r6, pc}
 8009dca:	f081 0401 	eor.w	r4, r1, #1
 8009dce:	54c4      	strb	r4, [r0, r3]
 8009dd0:	1c51      	adds	r1, r2, #1
 8009dd2:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8009dd6:	2d2d      	cmp	r5, #45	; 0x2d
 8009dd8:	f101 36ff 	add.w	r6, r1, #4294967295	; 0xffffffff
 8009ddc:	460a      	mov	r2, r1
 8009dde:	d006      	beq.n	8009dee <__sccl+0x4e>
 8009de0:	2d5d      	cmp	r5, #93	; 0x5d
 8009de2:	d0f0      	beq.n	8009dc6 <__sccl+0x26>
 8009de4:	b90d      	cbnz	r5, 8009dea <__sccl+0x4a>
 8009de6:	4632      	mov	r2, r6
 8009de8:	e7ed      	b.n	8009dc6 <__sccl+0x26>
 8009dea:	462b      	mov	r3, r5
 8009dec:	e7ef      	b.n	8009dce <__sccl+0x2e>
 8009dee:	780e      	ldrb	r6, [r1, #0]
 8009df0:	2e5d      	cmp	r6, #93	; 0x5d
 8009df2:	d0fa      	beq.n	8009dea <__sccl+0x4a>
 8009df4:	42b3      	cmp	r3, r6
 8009df6:	dcf8      	bgt.n	8009dea <__sccl+0x4a>
 8009df8:	3301      	adds	r3, #1
 8009dfa:	429e      	cmp	r6, r3
 8009dfc:	54c4      	strb	r4, [r0, r3]
 8009dfe:	dcfb      	bgt.n	8009df8 <__sccl+0x58>
 8009e00:	3102      	adds	r1, #2
 8009e02:	e7e6      	b.n	8009dd2 <__sccl+0x32>

08009e04 <strncmp>:
 8009e04:	b510      	push	{r4, lr}
 8009e06:	b16a      	cbz	r2, 8009e24 <strncmp+0x20>
 8009e08:	3901      	subs	r1, #1
 8009e0a:	1884      	adds	r4, r0, r2
 8009e0c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009e10:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009e14:	4293      	cmp	r3, r2
 8009e16:	d103      	bne.n	8009e20 <strncmp+0x1c>
 8009e18:	42a0      	cmp	r0, r4
 8009e1a:	d001      	beq.n	8009e20 <strncmp+0x1c>
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d1f5      	bne.n	8009e0c <strncmp+0x8>
 8009e20:	1a98      	subs	r0, r3, r2
 8009e22:	bd10      	pop	{r4, pc}
 8009e24:	4610      	mov	r0, r2
 8009e26:	e7fc      	b.n	8009e22 <strncmp+0x1e>

08009e28 <_strtoul_l.isra.0>:
 8009e28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e2c:	4680      	mov	r8, r0
 8009e2e:	4689      	mov	r9, r1
 8009e30:	4692      	mov	sl, r2
 8009e32:	461e      	mov	r6, r3
 8009e34:	460f      	mov	r7, r1
 8009e36:	463d      	mov	r5, r7
 8009e38:	9808      	ldr	r0, [sp, #32]
 8009e3a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009e3e:	f7fe fe59 	bl	8008af4 <__locale_ctype_ptr_l>
 8009e42:	4420      	add	r0, r4
 8009e44:	7843      	ldrb	r3, [r0, #1]
 8009e46:	f013 0308 	ands.w	r3, r3, #8
 8009e4a:	d130      	bne.n	8009eae <_strtoul_l.isra.0+0x86>
 8009e4c:	2c2d      	cmp	r4, #45	; 0x2d
 8009e4e:	d130      	bne.n	8009eb2 <_strtoul_l.isra.0+0x8a>
 8009e50:	787c      	ldrb	r4, [r7, #1]
 8009e52:	1cbd      	adds	r5, r7, #2
 8009e54:	2101      	movs	r1, #1
 8009e56:	2e00      	cmp	r6, #0
 8009e58:	d05c      	beq.n	8009f14 <_strtoul_l.isra.0+0xec>
 8009e5a:	2e10      	cmp	r6, #16
 8009e5c:	d109      	bne.n	8009e72 <_strtoul_l.isra.0+0x4a>
 8009e5e:	2c30      	cmp	r4, #48	; 0x30
 8009e60:	d107      	bne.n	8009e72 <_strtoul_l.isra.0+0x4a>
 8009e62:	782b      	ldrb	r3, [r5, #0]
 8009e64:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009e68:	2b58      	cmp	r3, #88	; 0x58
 8009e6a:	d14e      	bne.n	8009f0a <_strtoul_l.isra.0+0xe2>
 8009e6c:	786c      	ldrb	r4, [r5, #1]
 8009e6e:	2610      	movs	r6, #16
 8009e70:	3502      	adds	r5, #2
 8009e72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009e76:	2300      	movs	r3, #0
 8009e78:	fbb2 f2f6 	udiv	r2, r2, r6
 8009e7c:	fb06 fc02 	mul.w	ip, r6, r2
 8009e80:	ea6f 0c0c 	mvn.w	ip, ip
 8009e84:	4618      	mov	r0, r3
 8009e86:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8009e8a:	2f09      	cmp	r7, #9
 8009e8c:	d817      	bhi.n	8009ebe <_strtoul_l.isra.0+0x96>
 8009e8e:	463c      	mov	r4, r7
 8009e90:	42a6      	cmp	r6, r4
 8009e92:	dd23      	ble.n	8009edc <_strtoul_l.isra.0+0xb4>
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	db1e      	blt.n	8009ed6 <_strtoul_l.isra.0+0xae>
 8009e98:	4282      	cmp	r2, r0
 8009e9a:	d31c      	bcc.n	8009ed6 <_strtoul_l.isra.0+0xae>
 8009e9c:	d101      	bne.n	8009ea2 <_strtoul_l.isra.0+0x7a>
 8009e9e:	45a4      	cmp	ip, r4
 8009ea0:	db19      	blt.n	8009ed6 <_strtoul_l.isra.0+0xae>
 8009ea2:	fb00 4006 	mla	r0, r0, r6, r4
 8009ea6:	2301      	movs	r3, #1
 8009ea8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009eac:	e7eb      	b.n	8009e86 <_strtoul_l.isra.0+0x5e>
 8009eae:	462f      	mov	r7, r5
 8009eb0:	e7c1      	b.n	8009e36 <_strtoul_l.isra.0+0xe>
 8009eb2:	2c2b      	cmp	r4, #43	; 0x2b
 8009eb4:	bf04      	itt	eq
 8009eb6:	1cbd      	addeq	r5, r7, #2
 8009eb8:	787c      	ldrbeq	r4, [r7, #1]
 8009eba:	4619      	mov	r1, r3
 8009ebc:	e7cb      	b.n	8009e56 <_strtoul_l.isra.0+0x2e>
 8009ebe:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8009ec2:	2f19      	cmp	r7, #25
 8009ec4:	d801      	bhi.n	8009eca <_strtoul_l.isra.0+0xa2>
 8009ec6:	3c37      	subs	r4, #55	; 0x37
 8009ec8:	e7e2      	b.n	8009e90 <_strtoul_l.isra.0+0x68>
 8009eca:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8009ece:	2f19      	cmp	r7, #25
 8009ed0:	d804      	bhi.n	8009edc <_strtoul_l.isra.0+0xb4>
 8009ed2:	3c57      	subs	r4, #87	; 0x57
 8009ed4:	e7dc      	b.n	8009e90 <_strtoul_l.isra.0+0x68>
 8009ed6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009eda:	e7e5      	b.n	8009ea8 <_strtoul_l.isra.0+0x80>
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	da09      	bge.n	8009ef4 <_strtoul_l.isra.0+0xcc>
 8009ee0:	2322      	movs	r3, #34	; 0x22
 8009ee2:	f8c8 3000 	str.w	r3, [r8]
 8009ee6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009eea:	f1ba 0f00 	cmp.w	sl, #0
 8009eee:	d107      	bne.n	8009f00 <_strtoul_l.isra.0+0xd8>
 8009ef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ef4:	b101      	cbz	r1, 8009ef8 <_strtoul_l.isra.0+0xd0>
 8009ef6:	4240      	negs	r0, r0
 8009ef8:	f1ba 0f00 	cmp.w	sl, #0
 8009efc:	d0f8      	beq.n	8009ef0 <_strtoul_l.isra.0+0xc8>
 8009efe:	b10b      	cbz	r3, 8009f04 <_strtoul_l.isra.0+0xdc>
 8009f00:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8009f04:	f8ca 9000 	str.w	r9, [sl]
 8009f08:	e7f2      	b.n	8009ef0 <_strtoul_l.isra.0+0xc8>
 8009f0a:	2430      	movs	r4, #48	; 0x30
 8009f0c:	2e00      	cmp	r6, #0
 8009f0e:	d1b0      	bne.n	8009e72 <_strtoul_l.isra.0+0x4a>
 8009f10:	2608      	movs	r6, #8
 8009f12:	e7ae      	b.n	8009e72 <_strtoul_l.isra.0+0x4a>
 8009f14:	2c30      	cmp	r4, #48	; 0x30
 8009f16:	d0a4      	beq.n	8009e62 <_strtoul_l.isra.0+0x3a>
 8009f18:	260a      	movs	r6, #10
 8009f1a:	e7aa      	b.n	8009e72 <_strtoul_l.isra.0+0x4a>

08009f1c <_strtoul_r>:
 8009f1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f1e:	4c06      	ldr	r4, [pc, #24]	; (8009f38 <_strtoul_r+0x1c>)
 8009f20:	4d06      	ldr	r5, [pc, #24]	; (8009f3c <_strtoul_r+0x20>)
 8009f22:	6824      	ldr	r4, [r4, #0]
 8009f24:	6a24      	ldr	r4, [r4, #32]
 8009f26:	2c00      	cmp	r4, #0
 8009f28:	bf08      	it	eq
 8009f2a:	462c      	moveq	r4, r5
 8009f2c:	9400      	str	r4, [sp, #0]
 8009f2e:	f7ff ff7b 	bl	8009e28 <_strtoul_l.isra.0>
 8009f32:	b003      	add	sp, #12
 8009f34:	bd30      	pop	{r4, r5, pc}
 8009f36:	bf00      	nop
 8009f38:	20000014 	.word	0x20000014
 8009f3c:	20000078 	.word	0x20000078

08009f40 <__submore>:
 8009f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f44:	460c      	mov	r4, r1
 8009f46:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009f48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f4c:	4299      	cmp	r1, r3
 8009f4e:	d11d      	bne.n	8009f8c <__submore+0x4c>
 8009f50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009f54:	f7ff fa66 	bl	8009424 <_malloc_r>
 8009f58:	b918      	cbnz	r0, 8009f62 <__submore+0x22>
 8009f5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009f5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f66:	63a3      	str	r3, [r4, #56]	; 0x38
 8009f68:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8009f6c:	6360      	str	r0, [r4, #52]	; 0x34
 8009f6e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8009f72:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009f76:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8009f7a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009f7e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8009f82:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8009f86:	6020      	str	r0, [r4, #0]
 8009f88:	2000      	movs	r0, #0
 8009f8a:	e7e8      	b.n	8009f5e <__submore+0x1e>
 8009f8c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8009f8e:	0077      	lsls	r7, r6, #1
 8009f90:	463a      	mov	r2, r7
 8009f92:	f000 f837 	bl	800a004 <_realloc_r>
 8009f96:	4605      	mov	r5, r0
 8009f98:	2800      	cmp	r0, #0
 8009f9a:	d0de      	beq.n	8009f5a <__submore+0x1a>
 8009f9c:	eb00 0806 	add.w	r8, r0, r6
 8009fa0:	4601      	mov	r1, r0
 8009fa2:	4632      	mov	r2, r6
 8009fa4:	4640      	mov	r0, r8
 8009fa6:	f7fb fee5 	bl	8005d74 <memcpy>
 8009faa:	f8c4 8000 	str.w	r8, [r4]
 8009fae:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8009fb2:	e7e9      	b.n	8009f88 <__submore+0x48>

08009fb4 <__ascii_wctomb>:
 8009fb4:	b149      	cbz	r1, 8009fca <__ascii_wctomb+0x16>
 8009fb6:	2aff      	cmp	r2, #255	; 0xff
 8009fb8:	bf85      	ittet	hi
 8009fba:	238a      	movhi	r3, #138	; 0x8a
 8009fbc:	6003      	strhi	r3, [r0, #0]
 8009fbe:	700a      	strbls	r2, [r1, #0]
 8009fc0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009fc4:	bf98      	it	ls
 8009fc6:	2001      	movls	r0, #1
 8009fc8:	4770      	bx	lr
 8009fca:	4608      	mov	r0, r1
 8009fcc:	4770      	bx	lr

08009fce <memmove>:
 8009fce:	4288      	cmp	r0, r1
 8009fd0:	b510      	push	{r4, lr}
 8009fd2:	eb01 0302 	add.w	r3, r1, r2
 8009fd6:	d807      	bhi.n	8009fe8 <memmove+0x1a>
 8009fd8:	1e42      	subs	r2, r0, #1
 8009fda:	4299      	cmp	r1, r3
 8009fdc:	d00a      	beq.n	8009ff4 <memmove+0x26>
 8009fde:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009fe2:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009fe6:	e7f8      	b.n	8009fda <memmove+0xc>
 8009fe8:	4283      	cmp	r3, r0
 8009fea:	d9f5      	bls.n	8009fd8 <memmove+0xa>
 8009fec:	1881      	adds	r1, r0, r2
 8009fee:	1ad2      	subs	r2, r2, r3
 8009ff0:	42d3      	cmn	r3, r2
 8009ff2:	d100      	bne.n	8009ff6 <memmove+0x28>
 8009ff4:	bd10      	pop	{r4, pc}
 8009ff6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009ffa:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009ffe:	e7f7      	b.n	8009ff0 <memmove+0x22>

0800a000 <__malloc_lock>:
 800a000:	4770      	bx	lr

0800a002 <__malloc_unlock>:
 800a002:	4770      	bx	lr

0800a004 <_realloc_r>:
 800a004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a006:	4607      	mov	r7, r0
 800a008:	4614      	mov	r4, r2
 800a00a:	460e      	mov	r6, r1
 800a00c:	b921      	cbnz	r1, 800a018 <_realloc_r+0x14>
 800a00e:	4611      	mov	r1, r2
 800a010:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a014:	f7ff ba06 	b.w	8009424 <_malloc_r>
 800a018:	b922      	cbnz	r2, 800a024 <_realloc_r+0x20>
 800a01a:	f7ff f9b5 	bl	8009388 <_free_r>
 800a01e:	4625      	mov	r5, r4
 800a020:	4628      	mov	r0, r5
 800a022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a024:	f000 f814 	bl	800a050 <_malloc_usable_size_r>
 800a028:	42a0      	cmp	r0, r4
 800a02a:	d20f      	bcs.n	800a04c <_realloc_r+0x48>
 800a02c:	4621      	mov	r1, r4
 800a02e:	4638      	mov	r0, r7
 800a030:	f7ff f9f8 	bl	8009424 <_malloc_r>
 800a034:	4605      	mov	r5, r0
 800a036:	2800      	cmp	r0, #0
 800a038:	d0f2      	beq.n	800a020 <_realloc_r+0x1c>
 800a03a:	4631      	mov	r1, r6
 800a03c:	4622      	mov	r2, r4
 800a03e:	f7fb fe99 	bl	8005d74 <memcpy>
 800a042:	4631      	mov	r1, r6
 800a044:	4638      	mov	r0, r7
 800a046:	f7ff f99f 	bl	8009388 <_free_r>
 800a04a:	e7e9      	b.n	800a020 <_realloc_r+0x1c>
 800a04c:	4635      	mov	r5, r6
 800a04e:	e7e7      	b.n	800a020 <_realloc_r+0x1c>

0800a050 <_malloc_usable_size_r>:
 800a050:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a054:	1f18      	subs	r0, r3, #4
 800a056:	2b00      	cmp	r3, #0
 800a058:	bfbc      	itt	lt
 800a05a:	580b      	ldrlt	r3, [r1, r0]
 800a05c:	18c0      	addlt	r0, r0, r3
 800a05e:	4770      	bx	lr

0800a060 <_init>:
 800a060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a062:	bf00      	nop
 800a064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a066:	bc08      	pop	{r3}
 800a068:	469e      	mov	lr, r3
 800a06a:	4770      	bx	lr

0800a06c <_fini>:
 800a06c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a06e:	bf00      	nop
 800a070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a072:	bc08      	pop	{r3}
 800a074:	469e      	mov	lr, r3
 800a076:	4770      	bx	lr
